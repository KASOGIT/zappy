<?xml version="1.0" encoding="UTF-8"?>
<tagfile>
    <compound kind="namespace">
        <name>Qt3DCore</name>
        <filename>qt3dcore.html</filename>
        <member kind="typedef" type="">
            <name>QAspectJobPtr</name>
            <anchorfile>qt3dcore-qabstractaspect.html</anchorfile>
            <anchor>QAspectJobPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>QBackendNodeFunctorPtr</name>
            <anchorfile>qt3dcore-qabstractaspect.html</anchorfile>
            <anchor>QBackendNodeFunctorPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QAbstractAspect</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>registerBackendType</name>
            <anchorfile>qt3dcore.html</anchorfile>
            <anchor>registerBackendType</anchor>
            <arglist>(const QBackendNodeFunctorPtr &amp;functor)</arglist>
        </member>
        <class>Qt3DCore::QAspectEngine</class>
        <class>Qt3DCore::QCamera</class>
        <class>Qt3DCore::QCameraLens</class>
        <class>Qt3DCore::QAspectJob</class>
        <class>Qt3DCore::QAbstractNodeFactory</class>
        <class>Qt3DCore::QBackendNodeFunctor</class>
        <class>Qt3DCore::QBackendNode</class>
        <class>Qt3DCore::QComponent</class>
        <member kind="typedef" type="">
            <name>QComponentList</name>
            <anchorfile>qt3dcore-qentity.html</anchorfile>
            <anchor>QComponentList-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QEntity</class>
        <member kind="typedef" type="">
            <name>QNodeList</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>QNodeList-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>QNodePtr</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>QNodePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QNode</class>
        <class>Qt3DCore::QNodeId</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qt3dcore.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDebug d, const QNodeId &amp;id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>qHash</name>
            <anchorfile>qt3dcore.html</anchorfile>
            <anchor>qHash</anchor>
            <arglist>(const QNodeId &amp;id, uint seed)</arglist>
        </member>
        <class>Qt3DCore::QBackendScenePropertyChange</class>
        <member kind="typedef" type="">
            <name>QBackendScenePropertyChangePtr</name>
            <anchorfile>qt3dcore-qbackendscenepropertychange.html</anchorfile>
            <anchor>QBackendScenePropertyChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QRay3D</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qt3dcore.html</anchorfile>
            <anchor>operator-lt-lt-1</anchor>
            <arglist>(QDebug dbg, const Qt3DCore::QRay3D &amp;ray)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qt3dcore.html</anchorfile>
            <anchor>operator-lt-lt-2</anchor>
            <arglist>(QDataStream &amp;stream, const Qt3DCore::QRay3D &amp;ray)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qt3dcore-qray3d.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;stream, Qt3DCore::QRay3D &amp;ray)</arglist>
        </member>
        <member kind="enum">
            <name>ChangeFlag</name>
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NodeCreated">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NodeAboutToBeDeleted">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NodeDeleted">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NodeUpdated">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NodeAdded">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NodeRemoved">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ComponentAdded">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ComponentRemoved">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AllChanges">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt3DCore::ChangeFlag">
            <name>ChangeFlags</name>
            <anchorfile>qt3dcore.html</anchorfile>
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QSceneChange</class>
        <member kind="typedef" type="">
            <name>QSceneChangePtr</name>
            <anchorfile>qt3dcore.html</anchorfile>
            <anchor>QSceneChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QScenePropertyChange</class>
        <member kind="typedef" type="">
            <name>QScenePropertyChangePtr</name>
            <anchorfile>qt3dcore.html</anchorfile>
            <anchor>QScenePropertyChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QTransform</class>
        <namespace>Qt3DCore::Quick</namespace>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QAbstractAspect</name>
        <filename>qt3dcore-qabstractaspect.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractAspect</name>
            <anchorfile>qt3dcore-qabstractaspect.html</anchorfile>
            <anchor>QAbstractAspect</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>registerBackendType</name>
            <anchorfile>qt3dcore-qabstractaspect.html</anchorfile>
            <anchor>registerBackendType</anchor>
            <arglist>(const QBackendNodeFunctorPtr &amp;functor)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>registerBackendType</name>
            <anchorfile>qt3dcore-qabstractaspect.html</anchorfile>
            <anchor>registerBackendType-1</anchor>
            <arglist>(const QMetaObject &amp;obj, const QBackendNodeFunctorPtr &amp;functor)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QAspectEngine</name>
        <filename>qt3dcore-qaspectengine.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAspectEngine</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>QAspectEngine</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAspectEngine</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>dtor.QAspectEngine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRootEntity</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>setRootEntity</anchor>
            <arglist>(QEntity *root)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;QEntity&gt;</type>
            <name>rootEntity</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>rootEntity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QVariantMap &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>registerAspect</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>registerAspect</anchor>
            <arglist>(QAbstractAspect *aspect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>registerAspect</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>registerAspect-1</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QAbstractAspect *&gt;</type>
            <name>aspects</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>aspects</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>executeCommand</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>executeCommand</anchor>
            <arglist>(const QString &amp;command)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QCamera</name>
        <filename>qt3dcore-qcamera.html</filename>
        <base>QEntity</base>
        <member kind="property" type="Qt3DCore::QCameraLens::ProjectionType">
            <name>projectionType</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>projectionType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>nearPlane</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>nearPlane-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>farPlane</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>farPlane-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>fieldOfView</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>fieldOfView-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>aspectRatio</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>aspectRatio-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>left</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>right</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>right-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>bottom</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>top</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QMatrix4x4">
            <name>projectionMatrix</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>projectionMatrix-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>position</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>upVector</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>upVector-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>viewCenter</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>viewCenter-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>viewVector</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>viewVector-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QMatrix4x4">
            <name>viewMatrix</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>viewMatrix-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCamera</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>QCamera</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCamera</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>dtor.QCamera</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>CameraTranslationOption</name>
            <anchor>CameraTranslationOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TranslateViewCenter">
            <anchor>CameraTranslationOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DontTranslateViewCenter">
            <anchor>CameraTranslationOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCameraLens *</type>
            <name>lens</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>lens</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform *</type>
            <name>transform</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>transform</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion</type>
            <name>tiltRotation</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>tiltRotation</anchor>
            <arglist>(float angle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion</type>
            <name>panRotation</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>panRotation</anchor>
            <arglist>(float angle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion</type>
            <name>rollRotation</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>rollRotation</anchor>
            <arglist>(float angle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion</type>
            <name>rotation</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>rotation</anchor>
            <arglist>(float angle, const QVector3D &amp;axis) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(const QVector3D &amp;vLocal, CameraTranslationOption option)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translateWorld</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>translateWorld</anchor>
            <arglist>(const QVector3D &amp;vWorld, CameraTranslationOption option)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tilt</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>tilt</anchor>
            <arglist>(float angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pan</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>pan</anchor>
            <arglist>(float angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pan</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>pan-1</anchor>
            <arglist>(float angle, const QVector3D &amp;axis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>roll</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>roll</anchor>
            <arglist>(float angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tiltAboutViewCenter</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>tiltAboutViewCenter</anchor>
            <arglist>(float angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>panAboutViewCenter</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>panAboutViewCenter</anchor>
            <arglist>(float angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>panAboutViewCenter</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>panAboutViewCenter-1</anchor>
            <arglist>(float angle, const QVector3D &amp;axis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rollAboutViewCenter</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>rollAboutViewCenter</anchor>
            <arglist>(float angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotate</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>rotate</anchor>
            <arglist>(const QQuaternion &amp;q)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotateAboutViewCenter</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>rotateAboutViewCenter</anchor>
            <arglist>(const QQuaternion &amp;q)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCameraLens::ProjectionType</type>
            <name>projectionType</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>projectionType-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>nearPlane</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>nearPlane-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>farPlane</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>farPlane-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>fieldOfView</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>fieldOfView-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>aspectRatio</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>aspectRatio-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>left</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>right</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>right-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>bottom</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>top</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>projectionMatrix</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>projectionMatrix-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>position</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>upVector</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>upVector-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>viewCenter</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>viewCenter-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>viewVector</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>viewVector-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>viewMatrix</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>viewMatrix-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProjectionType</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>projectionType-prop</anchor>
            <arglist>(QCameraLens::ProjectionType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNearPlane</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>nearPlane-prop</anchor>
            <arglist>(float nearPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFarPlane</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>farPlane-prop</anchor>
            <arglist>(float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFieldOfView</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>fieldOfView-prop</anchor>
            <arglist>(float fieldOfView)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAspectRatio</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>aspectRatio-prop</anchor>
            <arglist>(float aspectRatio)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeft</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist>(float left)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRight</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>right-prop</anchor>
            <arglist>(float right)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottom</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>(float bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTop</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist>(float top)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosition</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>(const QVector3D &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUpVector</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>upVector-prop</anchor>
            <arglist>(const QVector3D &amp;upVector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setViewCenter</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>viewCenter-prop</anchor>
            <arglist>(const QVector3D &amp;viewCenter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>projectionTypeChanged</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>projectionType-prop</anchor>
            <arglist>(QCameraLens::ProjectionType projectionType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nearPlaneChanged</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>nearPlane-prop</anchor>
            <arglist>(float nearPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>farPlaneChanged</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>farPlane-prop</anchor>
            <arglist>(float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fieldOfViewChanged</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>fieldOfView-prop</anchor>
            <arglist>(float fieldOfView)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>aspectRatioChanged</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>aspectRatio-prop</anchor>
            <arglist>(float aspectRatio)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>leftChanged</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist>(float left)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rightChanged</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>right-prop</anchor>
            <arglist>(float right)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bottomChanged</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>(float bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>topChanged</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist>(float top)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>projectionMatrixChanged</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>projectionMatrix-prop</anchor>
            <arglist>(const QMatrix4x4 &amp;projectionMatrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>positionChanged</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>(const QVector3D &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>upVectorChanged</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>upVector-prop</anchor>
            <arglist>(const QVector3D &amp;upVector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>viewCenterChanged</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>viewCenter-prop</anchor>
            <arglist>(const QVector3D &amp;viewCenter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>viewVectorChanged</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>viewVector-prop</anchor>
            <arglist>(const QVector3D &amp;viewVector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>viewMatrixChanged</name>
            <anchorfile>qt3dcore-qcamera.html</anchorfile>
            <anchor>viewMatrix-prop</anchor>
            <arglist>(const QMatrix4x4 &amp;viewMatrix)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QCameraLens</name>
        <filename>qt3dcore-qcameralens.html</filename>
        <base>QComponent</base>
        <member kind="property" type="ProjectionType">
            <name>projectionType</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>projectionType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>nearPlane</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>nearPlane-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>farPlane</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>farPlane-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>fieldOfView</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>fieldOfView-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>aspectRatio</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>aspectRatio-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>left</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>right</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>right-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>bottom</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>top</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QMatrix4x4">
            <name>projectionMatrix</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>projectionMatrix-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCameraLens</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>QCameraLens</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCameraLens</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>dtor.QCameraLens</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>ProjectionType</name>
            <anchor>ProjectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OrthographicProjection">
            <anchor>ProjectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PerspectiveProjection">
            <anchor>ProjectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrustumProjection">
            <anchor>ProjectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ProjectionType</type>
            <name>projectionType</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>projectionType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>nearPlane</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>nearPlane</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>farPlane</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>farPlane</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>fieldOfView</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>fieldOfView</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>aspectRatio</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>aspectRatio</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>left</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>left</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>right</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>right</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>bottom</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>bottom</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>top</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>top</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>projectionMatrix</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>projectionMatrix</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOrthographicProjection</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>setOrthographicProjection</anchor>
            <arglist>(float left, float right, float bottom, float top, float nearPlane, float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrustumProjection</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>setFrustumProjection</anchor>
            <arglist>(float left, float right, float bottom, float top, float nearPlane, float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPerspectiveProjection</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>setPerspectiveProjection</anchor>
            <arglist>(float fieldOfView, float aspectRatio, float nearPlane, float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProjectionType</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>setProjectionType</anchor>
            <arglist>(ProjectionType projectionType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNearPlane</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>setNearPlane</anchor>
            <arglist>(float nearPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFarPlane</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>setFarPlane</anchor>
            <arglist>(float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFieldOfView</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>setFieldOfView</anchor>
            <arglist>(float fieldOfView)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAspectRatio</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>setAspectRatio</anchor>
            <arglist>(float aspectRatio)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeft</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>setLeft</anchor>
            <arglist>(float left)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRight</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>setRight</anchor>
            <arglist>(float right)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottom</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>setBottom</anchor>
            <arglist>(float bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTop</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>setTop</anchor>
            <arglist>(float top)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>projectionTypeChanged</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>projectionType-prop</anchor>
            <arglist>(QCameraLens::ProjectionType projectionType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nearPlaneChanged</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>nearPlane-prop</anchor>
            <arglist>(float nearPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>farPlaneChanged</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>farPlane-prop</anchor>
            <arglist>(float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fieldOfViewChanged</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>fieldOfView-prop</anchor>
            <arglist>(float fieldOfView)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>aspectRatioChanged</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>aspectRatio-prop</anchor>
            <arglist>(float aspectRatio)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>leftChanged</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist>(float left)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rightChanged</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>right-prop</anchor>
            <arglist>(float right)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bottomChanged</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>(float bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>topChanged</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist>(float top)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>projectionMatrixChanged</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>projectionMatrix-prop</anchor>
            <arglist>(const QMatrix4x4 &amp;projectionMatrix)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QCameraLens</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>QCameraLens-1</anchor>
            <arglist>(QCameraLensPrivate &amp;dd, QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>copy</name>
            <anchorfile>qt3dcore-qcameralens.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QAspectJob</name>
        <filename>qt3dcore-qaspectjob.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAspectJob</name>
            <anchorfile>qt3dcore-qaspectjob.html</anchorfile>
            <anchor>QAspectJob</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAspectJob</name>
            <anchorfile>qt3dcore-qaspectjob.html</anchorfile>
            <anchor>dtor.QAspectJob</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addDependency</name>
            <anchorfile>qt3dcore-qaspectjob.html</anchorfile>
            <anchor>addDependency</anchor>
            <arglist>(QWeakPointer&lt;QAspectJob&gt; dependency)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeDependency</name>
            <anchorfile>qt3dcore-qaspectjob.html</anchorfile>
            <anchor>removeDependency</anchor>
            <arglist>(QWeakPointer&lt;QAspectJob&gt; dependency)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QWeakPointer&lt;QAspectJob&gt; &gt;</type>
            <name>dependencies</name>
            <anchorfile>qt3dcore-qaspectjob.html</anchorfile>
            <anchor>dependencies</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>run</name>
            <anchorfile>qt3dcore-qaspectjob.html</anchorfile>
            <anchor>run</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAspectJob</name>
            <anchorfile>qt3dcore-qaspectjob.html</anchorfile>
            <anchor>QAspectJob-1</anchor>
            <arglist>(QAspectJobPrivate &amp;dd)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QAbstractNodeFactory</name>
        <filename>qt3dcore-qabstractnodefactory.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractNodeFactory</name>
            <anchorfile>qt3dcore-qabstractnodefactory.html</anchorfile>
            <anchor>dtor.QAbstractNodeFactory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QNode *</type>
            <name>createNode</name>
            <anchorfile>qt3dcore-qabstractnodefactory.html</anchorfile>
            <anchor>createNode</anchor>
            <arglist>(const char *type) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>registerNodeFactory</name>
            <anchorfile>qt3dcore-qabstractnodefactory.html</anchorfile>
            <anchor>registerNodeFactory</anchor>
            <arglist>(QAbstractNodeFactory *factory)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QAbstractNodeFactory *&gt;</type>
            <name>nodeFactories</name>
            <anchorfile>qt3dcore-qabstractnodefactory.html</anchorfile>
            <anchor>nodeFactories</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>T *</type>
            <name>createNode</name>
            <anchorfile>qt3dcore-qabstractnodefactory.html</anchorfile>
            <anchor>createNode-1</anchor>
            <arglist>(const char *type)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QBackendNodeFunctor</name>
        <filename>qt3dcore-qbackendnodefunctor.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QBackendNodeFunctor</name>
            <anchorfile>qt3dcore-qbackendnodefunctor.html</anchorfile>
            <anchor>dtor.QBackendNodeFunctor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QBackendNode *</type>
            <name>create</name>
            <anchorfile>qt3dcore-qbackendnodefunctor.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(QNode *frontend, const QBackendNodeFactory *factory) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QBackendNode *</type>
            <name>get</name>
            <anchorfile>qt3dcore-qbackendnodefunctor.html</anchorfile>
            <anchor>get</anchor>
            <arglist>(const QNodeId &amp;id) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>destroy</name>
            <anchorfile>qt3dcore-qbackendnodefunctor.html</anchorfile>
            <anchor>destroy</anchor>
            <arglist>(const QNodeId &amp;id) const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QBackendNode</name>
        <filename>qt3dcore-qbackendnode.html</filename>
        <member kind="enum">
            <name>Mode</name>
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadOnly">
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadWrite">
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBackendNode</name>
            <anchorfile>qt3dcore-qbackendnode.html</anchorfile>
            <anchor>QBackendNode</anchor>
            <arglist>(Mode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QBackendNode</name>
            <anchorfile>qt3dcore-qbackendnode.html</anchorfile>
            <anchor>dtor.QBackendNode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFactory</name>
            <anchorfile>qt3dcore-qbackendnode.html</anchorfile>
            <anchor>setFactory</anchor>
            <arglist>(const QBackendNodeFactory *factory)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPeer</name>
            <anchorfile>qt3dcore-qbackendnode.html</anchorfile>
            <anchor>setPeer</anchor>
            <arglist>(QNode *peer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNodeId</type>
            <name>peerUuid</name>
            <anchorfile>qt3dcore-qbackendnode.html</anchorfile>
            <anchor>peerUuid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Mode</type>
            <name>mode</name>
            <anchorfile>qt3dcore-qbackendnode.html</anchorfile>
            <anchor>mode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>updateFromPeer</name>
            <anchorfile>qt3dcore-qbackendnode.html</anchorfile>
            <anchor>updateFromPeer</anchor>
            <arglist>(QNode *peer) = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QBackendNode *</type>
            <name>createBackendNode</name>
            <anchorfile>qt3dcore-qbackendnode.html</anchorfile>
            <anchor>createBackendNode</anchor>
            <arglist>(QNode *frontend) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>notifyObservers</name>
            <anchorfile>qt3dcore-qbackendnode.html</anchorfile>
            <anchor>notifyObservers</anchor>
            <arglist>(const QSceneChangePtr &amp;e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3dcore-qbackendnode.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const QSceneChangePtr &amp;e) = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QBackendNode</name>
            <anchorfile>qt3dcore-qbackendnode.html</anchorfile>
            <anchor>QBackendNode-1</anchor>
            <arglist>(QBackendNodePrivate &amp;dd)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QComponent</name>
        <filename>qt3dcore-qcomponent.html</filename>
        <base>QNode</base>
        <member kind="property" type="bool">
            <name>shareable</name>
            <anchorfile>qt3dcore-qcomponent.html</anchorfile>
            <anchor>shareable-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QComponent</name>
            <anchorfile>qt3dcore-qcomponent.html</anchorfile>
            <anchor>QComponent</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QComponent</name>
            <anchorfile>qt3dcore-qcomponent.html</anchorfile>
            <anchor>dtor.QComponent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>shareable</name>
            <anchorfile>qt3dcore-qcomponent.html</anchorfile>
            <anchor>shareable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QEntity *&gt;</type>
            <name>entities</name>
            <anchorfile>qt3dcore-qcomponent.html</anchorfile>
            <anchor>entities</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShareable</name>
            <anchorfile>qt3dcore-qcomponent.html</anchorfile>
            <anchor>setShareable</anchor>
            <arglist>(bool shareable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shareableChanged</name>
            <anchorfile>qt3dcore-qcomponent.html</anchorfile>
            <anchor>shareable-prop</anchor>
            <arglist>(bool shareable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>enabledChanged</name>
            <anchorfile>qt3dcore-qcomponent.html</anchorfile>
            <anchor>enabledChanged</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>copy</name>
            <anchorfile>qt3dcore-qcomponent.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QEntity</name>
        <filename>qt3dcore-qentity.html</filename>
        <base>QNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QEntity</name>
            <anchorfile>qt3dcore-qentity.html</anchorfile>
            <anchor>QEntity</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QEntity</name>
            <anchorfile>qt3dcore-qentity.html</anchorfile>
            <anchor>dtor.QEntity</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QComponentList</type>
            <name>components</name>
            <anchorfile>qt3dcore-qentity.html</anchorfile>
            <anchor>components</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addComponent</name>
            <anchorfile>qt3dcore-qentity.html</anchorfile>
            <anchor>addComponent</anchor>
            <arglist>(QComponent *comp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeComponent</name>
            <anchorfile>qt3dcore-qentity.html</anchorfile>
            <anchor>removeComponent</anchor>
            <arglist>(QComponent *comp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAllComponents</name>
            <anchorfile>qt3dcore-qentity.html</anchorfile>
            <anchor>removeAllComponents</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEntity *</type>
            <name>parentEntity</name>
            <anchorfile>qt3dcore-qentity.html</anchorfile>
            <anchor>parentEntity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>copy</name>
            <anchorfile>qt3dcore-qentity.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QNode</name>
        <filename>qt3dcore-qnode.html</filename>
        <base>QObject</base>
        <member kind="property" type="Qt3DCore::QNode *">
            <name>parent</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>parent-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>enabled</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNode</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>QNode</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QNode</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>dtor.QNode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QNodeId</type>
            <name>id</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNode *</type>
            <name>parentNode</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>parentNode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>notificationsBlocked</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>notificationsBlocked</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>blockNotifications</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>blockNotifications</anchor>
            <arglist>(bool block)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNodeList</type>
            <name>childrenNodes</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>childrenNodes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEnabled</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>isEnabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setParent</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>setParent</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEnabled</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>setEnabled</anchor>
            <arglist>(bool isEnabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>parentChanged</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>parent-prop</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>enabledChanged</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="yes">
            <type>QNode *</type>
            <name>clone</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>clone</anchor>
            <arglist>(QNode *node)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>copy</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const QNode *ref)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const QSceneChangePtr &amp;change)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>cleanup</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>cleanup</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QNodeId</name>
        <filename>qt3dcore-qnodeid.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNodeId</name>
            <anchorfile>qt3dcore-qnodeid.html</anchorfile>
            <anchor>QNodeId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QNodeId</type>
            <name>createId</name>
            <anchorfile>qt3dcore-qnodeid.html</anchorfile>
            <anchor>createId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qt3dcore-qnodeid.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qt3dcore-qnodeid.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QNodeId &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qt3dcore-qnodeid.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QNodeId &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qt3dcore-qnodeid.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QNodeId &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qt3dcore-qnodeid.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QNodeId &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint64</type>
            <name>id</name>
            <anchorfile>qt3dcore-qnodeid.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QBackendScenePropertyChange</name>
        <filename>qt3dcore-qbackendscenepropertychange.html</filename>
        <base>QScenePropertyChange</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBackendScenePropertyChange</name>
            <anchorfile>qt3dcore-qbackendscenepropertychange.html</anchorfile>
            <anchor>QBackendScenePropertyChange</anchor>
            <arglist>(ChangeFlag type, const QNodeId &amp;subjectId, Priority priority)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QBackendScenePropertyChange</name>
            <anchorfile>qt3dcore-qbackendscenepropertychange.html</anchorfile>
            <anchor>dtor.QBackendScenePropertyChange</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTargetNode</name>
            <anchorfile>qt3dcore-qbackendscenepropertychange.html</anchorfile>
            <anchor>setTargetNode</anchor>
            <arglist>(const QNodeId &amp;id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNodeId</type>
            <name>targetNode</name>
            <anchorfile>qt3dcore-qbackendscenepropertychange.html</anchorfile>
            <anchor>targetNode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QBackendScenePropertyChange</name>
            <anchorfile>qt3dcore-qbackendscenepropertychange.html</anchorfile>
            <anchor>QBackendScenePropertyChange-2</anchor>
            <arglist>(QBackendScenePropertyChangePrivate &amp;dd, ChangeFlag type, const QNodeId &amp;subjectId, Priority priority)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QRay3D</name>
        <filename>qt3dcore-qray3d.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRay3D</name>
            <anchorfile>qt3dcore-qray3d.html</anchorfile>
            <anchor>QRay3D</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRay3D</name>
            <anchorfile>qt3dcore-qray3d.html</anchorfile>
            <anchor>QRay3D-1</anchor>
            <arglist>(const QVector3D &amp;origin, const QVector3D &amp;direction, float distance)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QRay3D</name>
            <anchorfile>qt3dcore-qray3d.html</anchorfile>
            <anchor>dtor.QRay3D</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>origin</name>
            <anchorfile>qt3dcore-qray3d.html</anchorfile>
            <anchor>origin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOrigin</name>
            <anchorfile>qt3dcore-qray3d.html</anchorfile>
            <anchor>setOrigin</anchor>
            <arglist>(const QVector3D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>direction</name>
            <anchorfile>qt3dcore-qray3d.html</anchorfile>
            <anchor>direction</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDirection</name>
            <anchorfile>qt3dcore-qray3d.html</anchorfile>
            <anchor>setDirection</anchor>
            <arglist>(const QVector3D &amp;direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>distance</name>
            <anchorfile>qt3dcore-qray3d.html</anchorfile>
            <anchor>distance</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDistance</name>
            <anchorfile>qt3dcore-qray3d.html</anchorfile>
            <anchor>setDistance</anchor>
            <arglist>(float distance)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qt3dcore-qray3d.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QVector3D &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qt3dcore-qray3d.html</anchorfile>
            <anchor>contains-1</anchor>
            <arglist>(const QRay3D &amp;ray) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>point</name>
            <anchorfile>qt3dcore-qray3d.html</anchorfile>
            <anchor>point</anchor>
            <arglist>(float t) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>projectedDistance</name>
            <anchorfile>qt3dcore-qray3d.html</anchorfile>
            <anchor>projectedDistance</anchor>
            <arglist>(const QVector3D &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>project</name>
            <anchorfile>qt3dcore-qray3d.html</anchorfile>
            <anchor>project</anchor>
            <arglist>(const QVector3D &amp;vector) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>distance</name>
            <anchorfile>qt3dcore-qray3d.html</anchorfile>
            <anchor>distance-1</anchor>
            <arglist>(const QVector3D &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRay3D &amp;</type>
            <name>transform</name>
            <anchorfile>qt3dcore-qray3d.html</anchorfile>
            <anchor>transform</anchor>
            <arglist>(const QMatrix4x4 &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRay3D</type>
            <name>transformed</name>
            <anchorfile>qt3dcore-qray3d.html</anchorfile>
            <anchor>transformed</anchor>
            <arglist>(const QMatrix4x4 &amp;matrix) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qt3dcore-qray3d.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QRay3D &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qt3dcore-qray3d.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QRay3D &amp;other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QSceneChange</name>
        <filename>qt3dcore-qscenechange.html</filename>
        <member kind="enum">
            <name>Priority</name>
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="High">
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Standard">
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Low">
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ObservableType</name>
            <anchor>ObservableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Observable">
            <anchor>ObservableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Node">
            <anchor>ObservableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSceneChange</name>
            <anchorfile>qt3dcore-qscenechange.html</anchorfile>
            <anchor>QSceneChange</anchor>
            <arglist>(ChangeFlag type, ObservableType observableType, const QNodeId &amp;subjectId, Priority priority)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSceneChange</name>
            <anchorfile>qt3dcore-qscenechange.html</anchorfile>
            <anchor>dtor.QSceneChange</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ChangeFlag</type>
            <name>type</name>
            <anchorfile>qt3dcore-qscenechange.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>timestamp</name>
            <anchorfile>qt3dcore-qscenechange.html</anchorfile>
            <anchor>timestamp</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSceneChange::Priority</type>
            <name>priority</name>
            <anchorfile>qt3dcore-qscenechange.html</anchorfile>
            <anchor>priority</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSceneChange::ObservableType</type>
            <name>observableType</name>
            <anchorfile>qt3dcore-qscenechange.html</anchorfile>
            <anchor>observableType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNodeId</type>
            <name>subjectId</name>
            <anchorfile>qt3dcore-qscenechange.html</anchorfile>
            <anchor>subjectId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QSceneChange</name>
            <anchorfile>qt3dcore-qscenechange.html</anchorfile>
            <anchor>QSceneChange-1</anchor>
            <arglist>(QSceneChangePrivate &amp;dd)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QSceneChange</name>
            <anchorfile>qt3dcore-qscenechange.html</anchorfile>
            <anchor>QSceneChange-2</anchor>
            <arglist>(QSceneChangePrivate &amp;dd, ChangeFlag type, ObservableType observableType, const QNodeId &amp;subjectId, Priority priority)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QScenePropertyChange</name>
        <filename>qt3dcore-qscenepropertychange.html</filename>
        <base>QSceneChange</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScenePropertyChange</name>
            <anchorfile>qt3dcore-qscenepropertychange.html</anchorfile>
            <anchor>QScenePropertyChange</anchor>
            <arglist>(ChangeFlag type, ObservableType observableType, const QNodeId &amp;subjectId, Priority priority)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QScenePropertyChange</name>
            <anchorfile>qt3dcore-qscenepropertychange.html</anchorfile>
            <anchor>dtor.QScenePropertyChange</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>propertyName</name>
            <anchorfile>qt3dcore-qscenepropertychange.html</anchorfile>
            <anchor>propertyName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>value</name>
            <anchorfile>qt3dcore-qscenepropertychange.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPropertyName</name>
            <anchorfile>qt3dcore-qscenepropertychange.html</anchorfile>
            <anchor>setPropertyName</anchor>
            <arglist>(const char *name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qt3dcore-qscenepropertychange.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void *</type>
            <name>operatornew</name>
            <anchorfile>qt3dcore-qscenepropertychange.html</anchorfile>
            <anchor>operatornew</anchor>
            <arglist>(size_t size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>operatordelete</name>
            <anchorfile>qt3dcore-qscenepropertychange.html</anchorfile>
            <anchor>operatordelete</anchor>
            <arglist>(void *ptr, size_t size)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QScenePropertyChange</name>
            <anchorfile>qt3dcore-qscenepropertychange.html</anchorfile>
            <anchor>QScenePropertyChange-2</anchor>
            <arglist>(QScenePropertyChangePrivate &amp;dd, ChangeFlag type, ObservableType observableType, const QNodeId &amp;subjectId, Priority priority)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QTransform</name>
        <filename>qt3dcore-qtransform.html</filename>
        <base>QComponent</base>
        <member kind="property" type="QMatrix4x4">
            <name>matrix</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>matrix-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>scale</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>scale3D</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>scale3D-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QQuaternion">
            <name>rotation</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>rotationX</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationX-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>rotationY</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationY-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>rotationZ</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationZ-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>translation</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>translation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTransform</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>QTransform</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTransform</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>dtor.QTransform</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>scale</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>scale3D</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>scale3D-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion</type>
            <name>rotation</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>translation</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>translation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>fromAxisAndAngle</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>fromAxisAndAngle</anchor>
            <arglist>(const QVector3D &amp;axis, float angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>fromAxisAndAngle</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>fromAxisAndAngle-1</anchor>
            <arglist>(float x, float y, float z, float angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>fromAxesAndAngles</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>fromAxesAndAngles</anchor>
            <arglist>(const QVector3D &amp;axis1, float angle1, const QVector3D &amp;axis2, float angle2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>fromAxesAndAngles</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>fromAxesAndAngles-1</anchor>
            <arglist>(const QVector3D &amp;axis1, float angle1, const QVector3D &amp;axis2, float angle2, const QVector3D &amp;axis3, float angle3)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>fromEulerAngles</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>fromEulerAngles</anchor>
            <arglist>(const QVector3D &amp;eulerAngles)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>fromEulerAngles</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>fromEulerAngles-1</anchor>
            <arglist>(float pitch, float yaw, float roll)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMatrix4x4</type>
            <name>rotateAround</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotateAround</anchor>
            <arglist>(const QVector3D &amp;point, float angle, const QVector3D &amp;axis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>matrix</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>matrix-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>rotationX</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationX-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>rotationY</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationY-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>rotationZ</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationZ-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScale</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>(float scale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScale3D</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>scale3D-prop</anchor>
            <arglist>(const QVector3D &amp;scale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRotation</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotation-prop</anchor>
            <arglist>(const QQuaternion &amp;rotation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTranslation</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>translation-prop</anchor>
            <arglist>(const QVector3D &amp;translation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMatrix</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>matrix-prop</anchor>
            <arglist>(const QMatrix4x4 &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRotationX</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationX-prop</anchor>
            <arglist>(float rotationX)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRotationY</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationY-prop</anchor>
            <arglist>(float rotationY)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRotationZ</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationZ-prop</anchor>
            <arglist>(float rotationZ)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scaleChanged</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>(float scale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scale3DChanged</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>scale3D-prop</anchor>
            <arglist>(const QVector3D &amp;scale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotationChanged</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotation-prop</anchor>
            <arglist>(const QQuaternion &amp;rotation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotationXChanged</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationX-prop</anchor>
            <arglist>(float rotationX)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotationYChanged</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationY-prop</anchor>
            <arglist>(float rotationY)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotationZChanged</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationZ-prop</anchor>
            <arglist>(float rotationZ)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translationChanged</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>translation-prop</anchor>
            <arglist>(const QVector3D &amp;translation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>matrixChanged</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>matrix-prop</anchor>
            <arglist>(const QMatrix4x4 &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QTransform</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>QTransform-1</anchor>
            <arglist>(QTransformPrivate &amp;dd, QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>copy</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>Qt3DCore::Quick</name>
        <filename>qt3dcore-quick.html</filename>
        <class>Qt3DCore::Quick::QQmlAspectEngine</class>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::Quick::QQmlAspectEngine</name>
        <filename>qt3dcore-quick-qqmlaspectengine.html</filename>
        <base>QObject</base>
        <member kind="enum">
            <name>Status</name>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Null">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ready">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Loading">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Error">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlAspectEngine</name>
            <anchorfile>qt3dcore-quick-qqmlaspectengine.html</anchorfile>
            <anchor>QQmlAspectEngine</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Status</type>
            <name>status</name>
            <anchorfile>qt3dcore-quick-qqmlaspectengine.html</anchorfile>
            <anchor>status</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSource</name>
            <anchorfile>qt3dcore-quick-qqmlaspectengine.html</anchorfile>
            <anchor>setSource</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlEngine *</type>
            <name>qmlEngine</name>
            <anchorfile>qt3dcore-quick-qqmlaspectengine.html</anchorfile>
            <anchor>qmlEngine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAspectEngine *</type>
            <name>aspectEngine</name>
            <anchorfile>qt3dcore-quick-qqmlaspectengine.html</anchorfile>
            <anchor>aspectEngine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>statusChanged</name>
            <anchorfile>qt3dcore-quick-qqmlaspectengine.html</anchorfile>
            <anchor>statusChanged</anchor>
            <arglist>(Status status)</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>Qt3DInput</name>
        <filename>qt3dinput.html</filename>
        <class>Qt3DInput::QAbstractPhysicalDeviceBackendNode</class>
        <class>Qt3DInput::QAbstractPhysicalDevice</class>
        <class>Qt3DInput::QAction</class>
        <class>Qt3DInput::QActionInput</class>
        <class>Qt3DInput::QAxis</class>
        <class>Qt3DInput::QAxisActionHandler</class>
        <class>Qt3DInput::QAxisInput</class>
        <class>Qt3DInput::QAxisSetting</class>
        <class>Qt3DInput::QInputAspect</class>
        <class>Qt3DInput::QInputDeviceIntegration</class>
        <class>Qt3DInput::QInputDevicePlugin</class>
        <class>Qt3DInput::QKeyboardController</class>
        <class>Qt3DInput::QKeyboardInput</class>
        <member kind="typedef" type="">
            <name>QKeyEventPtr</name>
            <anchorfile>qt3dinput.html</anchorfile>
            <anchor>QKeyEventPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DInput::QKeyEvent</class>
        <class>Qt3DInput::QLogicalDevice</class>
        <class>Qt3DInput::QMouseController</class>
        <class>Qt3DInput::QMouseEvent</class>
        <member kind="typedef" type="">
            <name>QMouseEventPtr</name>
            <anchorfile>qt3dinput.html</anchorfile>
            <anchor>QMouseEventPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DInput::QWheelEvent</class>
        <member kind="typedef" type="">
            <name>QWheelEventPtr</name>
            <anchorfile>qt3dinput.html</anchorfile>
            <anchor>QWheelEventPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DInput::QMouseInput</class>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QAbstractPhysicalDeviceBackendNode</name>
        <filename>qt3dinput-qabstractphysicaldevicebackendnode.html</filename>
        <base>QBackendNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractPhysicalDeviceBackendNode</name>
            <anchorfile>qt3dinput-qabstractphysicaldevicebackendnode.html</anchorfile>
            <anchor>QAbstractPhysicalDeviceBackendNode</anchor>
            <arglist>(QBackendNode::Mode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateFromPeer</name>
            <anchorfile>qt3dinput-qabstractphysicaldevicebackendnode.html</anchorfile>
            <anchor>updateFromPeer</anchor>
            <arglist>(Qt3DCore::QNode *peer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>cleanup</name>
            <anchorfile>qt3dinput-qabstractphysicaldevicebackendnode.html</anchorfile>
            <anchor>cleanup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3dinput-qabstractphysicaldevicebackendnode.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const Qt3DCore::QSceneChangePtr &amp;e)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInputAspect</name>
            <anchorfile>qt3dinput-qabstractphysicaldevicebackendnode.html</anchorfile>
            <anchor>setInputAspect</anchor>
            <arglist>(QInputAspect *aspect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QInputAspect *</type>
            <name>inputAspect</name>
            <anchorfile>qt3dinput-qabstractphysicaldevicebackendnode.html</anchorfile>
            <anchor>inputAspect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>processedAxisValue</name>
            <anchorfile>qt3dinput-qabstractphysicaldevicebackendnode.html</anchorfile>
            <anchor>processedAxisValue</anchor>
            <arglist>(int axisIdentifier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual float</type>
            <name>axisValue</name>
            <anchorfile>qt3dinput-qabstractphysicaldevicebackendnode.html</anchorfile>
            <anchor>axisValue</anchor>
            <arglist>(int axisIdentifier) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>isButtonPressed</name>
            <anchorfile>qt3dinput-qabstractphysicaldevicebackendnode.html</anchorfile>
            <anchor>isButtonPressed</anchor>
            <arglist>(int buttonIdentifier) const = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAbstractPhysicalDeviceBackendNode</name>
            <anchorfile>qt3dinput-qabstractphysicaldevicebackendnode.html</anchorfile>
            <anchor>QAbstractPhysicalDeviceBackendNode-1</anchor>
            <arglist>(QAbstractPhysicalDeviceBackendNodePrivate &amp;dd)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QAbstractPhysicalDevice</name>
        <filename>qt3dinput-qabstractphysicaldevice.html</filename>
        <base>QNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractPhysicalDevice</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>QAbstractPhysicalDevice</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAbstractPhysicalDevice</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>dtor.QAbstractPhysicalDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual int</type>
            <name>axisCount</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>axisCount</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual int</type>
            <name>buttonCount</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>buttonCount</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QStringList</type>
            <name>axisNames</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>axisNames</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QStringList</type>
            <name>buttonNames</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>buttonNames</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual int</type>
            <name>axisIdentifier</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>axisIdentifier</anchor>
            <arglist>(const QString &amp;name) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual int</type>
            <name>buttonIdentifier</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>buttonIdentifier</anchor>
            <arglist>(const QString &amp;name) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addAxisSetting</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>addAxisSetting</anchor>
            <arglist>(QAxisSetting *axisSetting)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAxisSetting</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>removeAxisSetting</anchor>
            <arglist>(QAxisSetting *axisSetting)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QAxisSetting *&gt;</type>
            <name>axisSettings</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>axisSettings</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAbstractPhysicalDevice</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>QAbstractPhysicalDevice-1</anchor>
            <arglist>(QAbstractPhysicalDevicePrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QAction</name>
        <filename>qt3dinput-qaction.html</filename>
        <base>QNode</base>
        <member kind="property" type="QString">
            <name>name</name>
            <anchorfile>qt3dinput-qaction.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAction</name>
            <anchorfile>qt3dinput-qaction.html</anchorfile>
            <anchor>QAction</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAction</name>
            <anchorfile>qt3dinput-qaction.html</anchorfile>
            <anchor>dtor.QAction</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qt3dinput-qaction.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addInput</name>
            <anchorfile>qt3dinput-qaction.html</anchorfile>
            <anchor>addInput</anchor>
            <arglist>(QActionInput *input)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeInput</name>
            <anchorfile>qt3dinput-qaction.html</anchorfile>
            <anchor>removeInput</anchor>
            <arglist>(QActionInput *input)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QActionInput *&gt;</type>
            <name>inputs</name>
            <anchorfile>qt3dinput-qaction.html</anchorfile>
            <anchor>inputs</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qt3dinput-qaction.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nameChanged</name>
            <anchorfile>qt3dinput-qaction.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>started</name>
            <anchorfile>qt3dinput-qaction.html</anchorfile>
            <anchor>started</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qt3dinput-qaction.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3dinput-qaction.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QActionInput</name>
        <filename>qt3dinput-qactioninput.html</filename>
        <base>QNode</base>
        <member kind="property" type="Qt3DInput::QAbstractPhysicalDevice *">
            <name>sourceDevice</name>
            <anchorfile>qt3dinput-qactioninput.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariantList">
            <name>keys</name>
            <anchorfile>qt3dinput-qactioninput.html</anchorfile>
            <anchor>keys-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QActionInput</name>
            <anchorfile>qt3dinput-qactioninput.html</anchorfile>
            <anchor>QActionInput</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QActionInput</name>
            <anchorfile>qt3dinput-qactioninput.html</anchorfile>
            <anchor>dtor.QActionInput</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractPhysicalDevice *</type>
            <name>sourceDevice</name>
            <anchorfile>qt3dinput-qactioninput.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantList</type>
            <name>keys</name>
            <anchorfile>qt3dinput-qactioninput.html</anchorfile>
            <anchor>keys-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceDevice</name>
            <anchorfile>qt3dinput-qactioninput.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist>(QAbstractPhysicalDevice *sourceDevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setKeys</name>
            <anchorfile>qt3dinput-qactioninput.html</anchorfile>
            <anchor>keys-prop</anchor>
            <arglist>(const QVariantList &amp;keys)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceDeviceChanged</name>
            <anchorfile>qt3dinput-qactioninput.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist>(QAbstractPhysicalDevice *sourceDevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>keysChanged</name>
            <anchorfile>qt3dinput-qactioninput.html</anchorfile>
            <anchor>keys-prop</anchor>
            <arglist>(const QVariantList &amp;keys)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3dinput-qactioninput.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QAxis</name>
        <filename>qt3dinput-qaxis.html</filename>
        <base>QNode</base>
        <member kind="property" type="QString">
            <name>name</name>
            <anchorfile>qt3dinput-qaxis.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAxis</name>
            <anchorfile>qt3dinput-qaxis.html</anchorfile>
            <anchor>QAxis</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAxis</name>
            <anchorfile>qt3dinput-qaxis.html</anchorfile>
            <anchor>dtor.QAxis</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qt3dinput-qaxis.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addInput</name>
            <anchorfile>qt3dinput-qaxis.html</anchorfile>
            <anchor>addInput</anchor>
            <arglist>(QAxisInput *input)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeInput</name>
            <anchorfile>qt3dinput-qaxis.html</anchorfile>
            <anchor>removeInput</anchor>
            <arglist>(QAxisInput *input)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QAxisInput *&gt;</type>
            <name>inputs</name>
            <anchorfile>qt3dinput-qaxis.html</anchorfile>
            <anchor>inputs</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qt3dinput-qaxis.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nameChanged</name>
            <anchorfile>qt3dinput-qaxis.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3dinput-qaxis.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QAxisActionHandler</name>
        <filename>qt3dinput-qaxisactionhandler.html</filename>
        <base>QComponent</base>
        <member kind="property" type="Qt3DInput::QLogicalDevice *">
            <name>logicalDevice</name>
            <anchorfile>qt3dinput-qaxisactionhandler.html</anchorfile>
            <anchor>logicalDevice-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAxisActionHandler</name>
            <anchorfile>qt3dinput-qaxisactionhandler.html</anchorfile>
            <anchor>QAxisActionHandler</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAxisActionHandler</name>
            <anchorfile>qt3dinput-qaxisactionhandler.html</anchorfile>
            <anchor>dtor.QAxisActionHandler</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DInput::QLogicalDevice *</type>
            <name>logicalDevice</name>
            <anchorfile>qt3dinput-qaxisactionhandler.html</anchorfile>
            <anchor>logicalDevice-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLogicalDevice</name>
            <anchorfile>qt3dinput-qaxisactionhandler.html</anchorfile>
            <anchor>logicalDevice-prop</anchor>
            <arglist>(Qt3DInput::QLogicalDevice *logicalDevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>logicalDeviceChanged</name>
            <anchorfile>qt3dinput-qaxisactionhandler.html</anchorfile>
            <anchor>logicalDevice-prop</anchor>
            <arglist>(Qt3DInput::QLogicalDevice *logicalDevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>actionStarted</name>
            <anchorfile>qt3dinput-qaxisactionhandler.html</anchorfile>
            <anchor>actionStarted</anchor>
            <arglist>(QString name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>actionFinished</name>
            <anchorfile>qt3dinput-qaxisactionhandler.html</anchorfile>
            <anchor>actionFinished</anchor>
            <arglist>(QString name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>axisValueChanged</name>
            <anchorfile>qt3dinput-qaxisactionhandler.html</anchorfile>
            <anchor>axisValueChanged</anchor>
            <arglist>(QString name, float axisValue)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAxisActionHandler</name>
            <anchorfile>qt3dinput-qaxisactionhandler.html</anchorfile>
            <anchor>QAxisActionHandler-1</anchor>
            <arglist>(QAxisActionHandlerPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3dinput-qaxisactionhandler.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3dinput-qaxisactionhandler.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const Qt3DCore::QSceneChangePtr &amp;change)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QAxisInput</name>
        <filename>qt3dinput-qaxisinput.html</filename>
        <base>QNode</base>
        <member kind="property" type="Qt3DInput::QAbstractPhysicalDevice *">
            <name>sourceDevice</name>
            <anchorfile>qt3dinput-qaxisinput.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>scale</name>
            <anchorfile>qt3dinput-qaxisinput.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>axis</name>
            <anchorfile>qt3dinput-qaxisinput.html</anchorfile>
            <anchor>axis-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariantList">
            <name>keys</name>
            <anchorfile>qt3dinput-qaxisinput.html</anchorfile>
            <anchor>keys-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAxisInput</name>
            <anchorfile>qt3dinput-qaxisinput.html</anchorfile>
            <anchor>QAxisInput</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAxisInput</name>
            <anchorfile>qt3dinput-qaxisinput.html</anchorfile>
            <anchor>dtor.QAxisInput</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractPhysicalDevice *</type>
            <name>sourceDevice</name>
            <anchorfile>qt3dinput-qaxisinput.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>scale</name>
            <anchorfile>qt3dinput-qaxisinput.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>axis</name>
            <anchorfile>qt3dinput-qaxisinput.html</anchorfile>
            <anchor>axis-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantList</type>
            <name>keys</name>
            <anchorfile>qt3dinput-qaxisinput.html</anchorfile>
            <anchor>keys-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceDevice</name>
            <anchorfile>qt3dinput-qaxisinput.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist>(QAbstractPhysicalDevice *sourceDevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScale</name>
            <anchorfile>qt3dinput-qaxisinput.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>(float scale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAxis</name>
            <anchorfile>qt3dinput-qaxisinput.html</anchorfile>
            <anchor>axis-prop</anchor>
            <arglist>(int axis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setKeys</name>
            <anchorfile>qt3dinput-qaxisinput.html</anchorfile>
            <anchor>keys-prop</anchor>
            <arglist>(const QVariantList &amp;keys)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceDeviceChanged</name>
            <anchorfile>qt3dinput-qaxisinput.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist>(QAbstractPhysicalDevice *sourceDevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scaleChanged</name>
            <anchorfile>qt3dinput-qaxisinput.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>(float scale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>axisChanged</name>
            <anchorfile>qt3dinput-qaxisinput.html</anchorfile>
            <anchor>axis-prop</anchor>
            <arglist>(int axis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>keysChanged</name>
            <anchorfile>qt3dinput-qaxisinput.html</anchorfile>
            <anchor>keys-prop</anchor>
            <arglist>(const QVariantList &amp;keys)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3dinput-qaxisinput.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QAxisSetting</name>
        <filename>qt3dinput-qaxissetting.html</filename>
        <base>QNode</base>
        <member kind="property" type="float">
            <name>deadZone</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>deadZone-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariantList">
            <name>axes</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>axes-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>filter</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>filter-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAxisSetting</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>QAxisSetting</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAxisSetting</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>dtor.QAxisSetting</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>deadZone</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>deadZone-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantList</type>
            <name>axes</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>axes-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFilterEnabled</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>filter-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDeadZone</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>deadZone-prop</anchor>
            <arglist>(float deadZone)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAxes</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>axes-prop</anchor>
            <arglist>(const QVariantList &amp;axes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilterEnabled</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>filter-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>deadZoneChanged</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>deadZone-prop</anchor>
            <arglist>(float deadZone)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>axesChanged</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>axes-prop</anchor>
            <arglist>(QVariantList axes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>filterChanged</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>filter-prop</anchor>
            <arglist>(bool filter)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QInputAspect</name>
        <filename>qt3dinput-qinputaspect.html</filename>
        <base>QAbstractAspect</base>
        <member kind="property" type="Qt3DCore::QCamera *">
            <name>camera</name>
            <anchorfile>qt3dinput-qinputaspect.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QInputAspect</name>
            <anchorfile>qt3dinput-qinputaspect.html</anchorfile>
            <anchor>QInputAspect</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QCamera *</type>
            <name>camera</name>
            <anchorfile>qt3dinput-qinputaspect.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractPhysicalDevice *</type>
            <name>createPhysicalDevice</name>
            <anchorfile>qt3dinput-qinputaspect.html</anchorfile>
            <anchor>createPhysicalDevice</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVector&lt;Qt3DCore::QAspectJobPtr&gt;</type>
            <name>jobsToExecute</name>
            <anchorfile>qt3dinput-qinputaspect.html</anchorfile>
            <anchor>jobsToExecute</anchor>
            <arglist>(qint64 time)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCamera</name>
            <anchorfile>qt3dinput-qinputaspect.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>(Qt3DCore::QCamera *camera)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QInputDeviceIntegration</name>
        <filename>qt3dinput-qinputdeviceintegration.html</filename>
        <base>QObject</base>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QInputDeviceIntegration</name>
            <anchorfile>qt3dinput-qinputdeviceintegration.html</anchorfile>
            <anchor>QInputDeviceIntegration</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QInputDeviceIntegration</name>
            <anchorfile>qt3dinput-qinputdeviceintegration.html</anchorfile>
            <anchor>QInputDeviceIntegration-1</anchor>
            <arglist>(QInputDeviceIntegrationPrivate &amp;dd, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>registerBackendType</name>
            <anchorfile>qt3dinput-qinputdeviceintegration.html</anchorfile>
            <anchor>registerBackendType</anchor>
            <arglist>(const Qt3DCore::QBackendNodeFunctorPtr &amp;functor)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>registerBackendType</name>
            <anchorfile>qt3dinput-qinputdeviceintegration.html</anchorfile>
            <anchor>registerBackendType-1</anchor>
            <arglist>(const QMetaObject &amp;metaObject, const Qt3DCore::QBackendNodeFunctorPtr &amp;functor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>initialize</name>
            <anchorfile>qt3dinput-qinputdeviceintegration.html</anchorfile>
            <anchor>initialize</anchor>
            <arglist>(Qt3DInput::QInputAspect *aspect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QVector&lt;Qt3DCore::QAspectJobPtr&gt;</type>
            <name>jobsToExecute</name>
            <anchorfile>qt3dinput-qinputdeviceintegration.html</anchorfile>
            <anchor>jobsToExecute</anchor>
            <arglist>(qint64 time) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QAbstractPhysicalDevice *</type>
            <name>createPhysicalDevice</name>
            <anchorfile>qt3dinput-qinputdeviceintegration.html</anchorfile>
            <anchor>createPhysicalDevice</anchor>
            <arglist>(const QString &amp;name) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QVector&lt;Qt3DCore::QNodeId&gt;</type>
            <name>physicalDevices</name>
            <anchorfile>qt3dinput-qinputdeviceintegration.html</anchorfile>
            <anchor>physicalDevices</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QAbstractPhysicalDeviceBackendNode *</type>
            <name>physicalDevice</name>
            <anchorfile>qt3dinput-qinputdeviceintegration.html</anchorfile>
            <anchor>physicalDevice</anchor>
            <arglist>(Qt3DCore::QNodeId id) const = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QInputAspect *</type>
            <name>inputAspect</name>
            <anchorfile>qt3dinput-qinputdeviceintegration.html</anchorfile>
            <anchor>inputAspect</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QInputDevicePlugin</name>
        <filename>qt3dinput-qinputdeviceplugin.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QInputDevicePlugin</name>
            <anchorfile>qt3dinput-qinputdeviceplugin.html</anchorfile>
            <anchor>QInputDevicePlugin</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QInputDevicePlugin</name>
            <anchorfile>qt3dinput-qinputdeviceplugin.html</anchorfile>
            <anchor>dtor.QInputDevicePlugin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QInputDeviceIntegration *</type>
            <name>create</name>
            <anchorfile>qt3dinput-qinputdeviceplugin.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(const QString &amp;key, const QStringList &amp;paramList)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QKeyboardController</name>
        <filename>qt3dinput-qkeyboardcontroller.html</filename>
        <base>QAbstractPhysicalDevice</base>
        <member kind="property" type="Qt3DInput::QKeyboardInput *">
            <name>activeInput</name>
            <anchorfile>qt3dinput-qkeyboardcontroller.html</anchorfile>
            <anchor>activeInput-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeyboardController</name>
            <anchorfile>qt3dinput-qkeyboardcontroller.html</anchorfile>
            <anchor>QKeyboardController</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QKeyboardController</name>
            <anchorfile>qt3dinput-qkeyboardcontroller.html</anchorfile>
            <anchor>dtor.QKeyboardController</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyboardInput *</type>
            <name>activeInput</name>
            <anchorfile>qt3dinput-qkeyboardcontroller.html</anchorfile>
            <anchor>activeInput-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>axisCount</name>
            <anchorfile>qt3dinput-qkeyboardcontroller.html</anchorfile>
            <anchor>axisCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>buttonCount</name>
            <anchorfile>qt3dinput-qkeyboardcontroller.html</anchorfile>
            <anchor>buttonCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>axisNames</name>
            <anchorfile>qt3dinput-qkeyboardcontroller.html</anchorfile>
            <anchor>axisNames</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>buttonNames</name>
            <anchorfile>qt3dinput-qkeyboardcontroller.html</anchorfile>
            <anchor>buttonNames</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>axisIdentifier</name>
            <anchorfile>qt3dinput-qkeyboardcontroller.html</anchorfile>
            <anchor>axisIdentifier</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>buttonIdentifier</name>
            <anchorfile>qt3dinput-qkeyboardcontroller.html</anchorfile>
            <anchor>buttonIdentifier</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3dinput-qkeyboardcontroller.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const Qt3DCore::QSceneChangePtr &amp;change)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activeInputChanged</name>
            <anchorfile>qt3dinput-qkeyboardcontroller.html</anchorfile>
            <anchor>activeInput-prop</anchor>
            <arglist>(QKeyboardInput *activeInput)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QKeyboardInput</name>
        <filename>qt3dinput-qkeyboardinput.html</filename>
        <base>QComponent</base>
        <member kind="property" type="Qt3DInput::QKeyboardController *">
            <name>controller</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>controller-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>focus</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>focus-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeyboardInput</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>QKeyboardInput</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QKeyboardInput</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>dtor.QKeyboardInput</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyboardController *</type>
            <name>controller</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>controller</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>focus</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>focus</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setController</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>setController</anchor>
            <arglist>(QKeyboardController *controller)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFocus</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>setFocus</anchor>
            <arglist>(bool focus)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>controllerChanged</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>controller-prop</anchor>
            <arglist>(QKeyboardController *controller)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>focusChanged</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>focus-prop</anchor>
            <arglist>(bool focus)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit0Pressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>digit0Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit1Pressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>digit1Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit2Pressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>digit2Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit3Pressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>digit3Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit4Pressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>digit4Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit5Pressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>digit5Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit6Pressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>digit6Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit7Pressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>digit7Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit8Pressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>digit8Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit9Pressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>digit9Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>leftPressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>leftPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rightPressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>rightPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>upPressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>upPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>downPressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>downPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tabPressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>tabPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>backtabPressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>backtabPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>asteriskPressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>asteriskPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>numberSignPressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>numberSignPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>escapePressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>escapePressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>returnPressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>returnPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>enterPressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>enterPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>deletePressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>deletePressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>spacePressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>spacePressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>backPressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>backPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cancelPressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>cancelPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>selectPressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>selectPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>yesPressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>yesPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>noPressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>noPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>context1Pressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>context1Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>context2Pressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>context2Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>context3Pressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>context3Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>context4Pressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>context4Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>callPressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>callPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hangupPressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>hangupPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>flipPressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>flipPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>menuPressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>menuPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>volumeUpPressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>volumeUpPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>volumeDownPressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>volumeDownPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pressed</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>released</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>released</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const Qt3DCore::QSceneChangePtr &amp;change)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>keyEvent</name>
            <anchorfile>qt3dinput-qkeyboardinput.html</anchorfile>
            <anchor>keyEvent</anchor>
            <arglist>(QKeyEvent *event)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QKeyEvent</name>
        <filename>qt3dinput-qkeyevent.html</filename>
        <base>QObject</base>
        <member kind="property" type="int">
            <name>key</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>key-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>text</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>modifiers</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>modifiers-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>isAutoRepeat</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>isAutoRepeat-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>count</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="quint32">
            <name>nativeScanCode</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>nativeScanCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>accepted</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeyEvent</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>QKeyEvent</anchor>
            <arglist>(QEvent::Type type, int key, Qt::KeyboardModifiers modifiers, const QString &amp;text, bool autorep, ushort count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeyEvent</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>QKeyEvent-1</anchor>
            <arglist>(const QKeyEvent &amp;ke)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>key</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>key-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>modifiers</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>modifiers-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAutoRepeat</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>isAutoRepeat-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>nativeScanCode</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>nativeScanCode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAccepted</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccepted</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist>(bool accepted)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEvent::Type</type>
            <name>type</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>matches</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>matches</anchor>
            <arglist>(QKeySequence::StandardKey key_) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QLogicalDevice</name>
        <filename>qt3dinput-qlogicaldevice.html</filename>
        <base>QNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLogicalDevice</name>
            <anchorfile>qt3dinput-qlogicaldevice.html</anchorfile>
            <anchor>QLogicalDevice</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLogicalDevice</name>
            <anchorfile>qt3dinput-qlogicaldevice.html</anchorfile>
            <anchor>dtor.QLogicalDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addAction</name>
            <anchorfile>qt3dinput-qlogicaldevice.html</anchorfile>
            <anchor>addAction</anchor>
            <arglist>(QAction *action)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAction</name>
            <anchorfile>qt3dinput-qlogicaldevice.html</anchorfile>
            <anchor>removeAction</anchor>
            <arglist>(QAction *action)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QAction *&gt;</type>
            <name>actions</name>
            <anchorfile>qt3dinput-qlogicaldevice.html</anchorfile>
            <anchor>actions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addAxis</name>
            <anchorfile>qt3dinput-qlogicaldevice.html</anchorfile>
            <anchor>addAxis</anchor>
            <arglist>(QAxis *axis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAxis</name>
            <anchorfile>qt3dinput-qlogicaldevice.html</anchorfile>
            <anchor>removeAxis</anchor>
            <arglist>(QAxis *axis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QAxis *&gt;</type>
            <name>axes</name>
            <anchorfile>qt3dinput-qlogicaldevice.html</anchorfile>
            <anchor>axes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3dinput-qlogicaldevice.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QMouseController</name>
        <filename>qt3dinput-qmousecontroller.html</filename>
        <base>QAbstractPhysicalDevice</base>
        <member kind="property" type="float">
            <name>sensitivity</name>
            <anchorfile>qt3dinput-qmousecontroller.html</anchorfile>
            <anchor>sensitivity-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMouseController</name>
            <anchorfile>qt3dinput-qmousecontroller.html</anchorfile>
            <anchor>QMouseController</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMouseController</name>
            <anchorfile>qt3dinput-qmousecontroller.html</anchorfile>
            <anchor>dtor.QMouseController</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>Axis</name>
            <anchor>Axis-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="X">
            <anchor>Axis-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Y">
            <anchor>Axis-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Button</name>
            <anchor>Button-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Left">
            <anchor>Button-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Center">
            <anchor>Button-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Right">
            <anchor>Button-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>axisCount</name>
            <anchorfile>qt3dinput-qmousecontroller.html</anchorfile>
            <anchor>axisCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>buttonCount</name>
            <anchorfile>qt3dinput-qmousecontroller.html</anchorfile>
            <anchor>buttonCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>axisNames</name>
            <anchorfile>qt3dinput-qmousecontroller.html</anchorfile>
            <anchor>axisNames</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>buttonNames</name>
            <anchorfile>qt3dinput-qmousecontroller.html</anchorfile>
            <anchor>buttonNames</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>axisIdentifier</name>
            <anchorfile>qt3dinput-qmousecontroller.html</anchorfile>
            <anchor>axisIdentifier</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>buttonIdentifier</name>
            <anchorfile>qt3dinput-qmousecontroller.html</anchorfile>
            <anchor>buttonIdentifier</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>sensitivity</name>
            <anchorfile>qt3dinput-qmousecontroller.html</anchorfile>
            <anchor>sensitivity-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSensitivity</name>
            <anchorfile>qt3dinput-qmousecontroller.html</anchorfile>
            <anchor>sensitivity-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sensitivityChanged</name>
            <anchorfile>qt3dinput-qmousecontroller.html</anchorfile>
            <anchor>sensitivity-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QMouseController</name>
            <anchorfile>qt3dinput-qmousecontroller.html</anchorfile>
            <anchor>QMouseController-1</anchor>
            <arglist>(QMouseControllerPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3dinput-qmousecontroller.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3dinput-qmousecontroller.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const Qt3DCore::QSceneChangePtr &amp;change)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QMouseEvent</name>
        <filename>qt3dinput-qmouseevent.html</filename>
        <base>QObject</base>
        <member kind="property" type="int">
            <name>x</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>y</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>wasHeld</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>wasHeld-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DInput::QMouseEvent::Buttons">
            <name>button</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>button-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>buttons</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>buttons-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DInput::QMouseEvent::Modifiers">
            <name>modifier</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>modifier-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>accepted</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Buttons</name>
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LeftButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RightButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MiddleButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BackButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Modifiers</name>
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShiftModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ControlModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AltModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MetaModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KeypadModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMouseEvent</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>QMouseEvent</anchor>
            <arglist>(const QMouseEvent &amp;e)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMouseEvent</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>dtor.QMouseEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>x</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>y</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>wasHeld</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>wasHeld-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Buttons</type>
            <name>button</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>button</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>buttons</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>buttons</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Modifiers</type>
            <name>modifier</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>modifier</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAccepted</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>isAccepted</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccepted</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>setAccepted</anchor>
            <arglist>(bool accepted)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEvent::Type</type>
            <name>type</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QWheelEvent</name>
        <filename>qt3dinput-qwheelevent.html</filename>
        <base>QObject</base>
        <member kind="property" type="int">
            <name>x</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>y</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QPoint">
            <name>angleDelta</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>angleDelta-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>buttons</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>buttons-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DInput::QWheelEvent::Modifiers">
            <name>modifier</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>modifier-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>accepted</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Buttons</name>
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LeftButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RightButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MiddleButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BackButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Modifiers</name>
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShiftModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ControlModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AltModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MetaModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KeypadModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWheelEvent</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>QWheelEvent</anchor>
            <arglist>(const QWheelEvent &amp;e)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QWheelEvent</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>dtor.QWheelEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>x</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>y</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>angleDelta</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>angleDelta</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>buttons</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>buttons</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Modifiers</type>
            <name>modifier</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>modifier</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAccepted</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>isAccepted</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccepted</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>setAccepted</anchor>
            <arglist>(bool accepted)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEvent::Type</type>
            <name>type</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QMouseInput</name>
        <filename>qt3dinput-qmouseinput.html</filename>
        <base>QComponent</base>
        <member kind="property" type="Qt3DInput::QMouseController *">
            <name>controller</name>
            <anchorfile>qt3dinput-qmouseinput.html</anchorfile>
            <anchor>controller-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>containsMouse</name>
            <anchorfile>qt3dinput-qmouseinput.html</anchorfile>
            <anchor>containsMouse-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMouseInput</name>
            <anchorfile>qt3dinput-qmouseinput.html</anchorfile>
            <anchor>QMouseInput</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMouseInput</name>
            <anchorfile>qt3dinput-qmouseinput.html</anchorfile>
            <anchor>dtor.QMouseInput</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMouseController *</type>
            <name>controller</name>
            <anchorfile>qt3dinput-qmouseinput.html</anchorfile>
            <anchor>controller</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>containsMouse</name>
            <anchorfile>qt3dinput-qmouseinput.html</anchorfile>
            <anchor>containsMouse</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setController</name>
            <anchorfile>qt3dinput-qmouseinput.html</anchorfile>
            <anchor>setController</anchor>
            <arglist>(QMouseController *controller)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>controllerChanged</name>
            <anchorfile>qt3dinput-qmouseinput.html</anchorfile>
            <anchor>controller-prop</anchor>
            <arglist>(QMouseController *controller)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>containsMouseChanged</name>
            <anchorfile>qt3dinput-qmouseinput.html</anchorfile>
            <anchor>containsMouse-prop</anchor>
            <arglist>(bool containsMouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clicked</name>
            <anchorfile>qt3dinput-qmouseinput.html</anchorfile>
            <anchor>clicked</anchor>
            <arglist>(Qt3DInput::QMouseEvent *mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>doubleClicked</name>
            <anchorfile>qt3dinput-qmouseinput.html</anchorfile>
            <anchor>doubleClicked</anchor>
            <arglist>(Qt3DInput::QMouseEvent *mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>entered</name>
            <anchorfile>qt3dinput-qmouseinput.html</anchorfile>
            <anchor>entered</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>exited</name>
            <anchorfile>qt3dinput-qmouseinput.html</anchorfile>
            <anchor>exited</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pressed</name>
            <anchorfile>qt3dinput-qmouseinput.html</anchorfile>
            <anchor>pressed</anchor>
            <arglist>(Qt3DInput::QMouseEvent *mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>released</name>
            <anchorfile>qt3dinput-qmouseinput.html</anchorfile>
            <anchor>released</anchor>
            <arglist>(Qt3DInput::QMouseEvent *mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pressAndHold</name>
            <anchorfile>qt3dinput-qmouseinput.html</anchorfile>
            <anchor>pressAndHold</anchor>
            <arglist>(Qt3DInput::QMouseEvent *mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>positionChanged</name>
            <anchorfile>qt3dinput-qmouseinput.html</anchorfile>
            <anchor>positionChanged</anchor>
            <arglist>(Qt3DInput::QMouseEvent *mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>wheel</name>
            <anchorfile>qt3dinput-qmouseinput.html</anchorfile>
            <anchor>wheel</anchor>
            <arglist>(Qt3DInput::QWheelEvent *wheel)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QMouseInput</name>
            <anchorfile>qt3dinput-qmouseinput.html</anchorfile>
            <anchor>QMouseInput-1</anchor>
            <arglist>(QMouseInputPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3dinput-qmouseinput.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3dinput-qmouseinput.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const Qt3DCore::QSceneChangePtr &amp;change)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>mouseEvent</name>
            <anchorfile>qt3dinput-qmouseinput.html</anchorfile>
            <anchor>mouseEvent</anchor>
            <arglist>(Qt3DInput::QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setContainsMouse</name>
            <anchorfile>qt3dinput-qmouseinput.html</anchorfile>
            <anchor>setContainsMouse</anchor>
            <arglist>(bool contains)</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>Qt3DLogic</name>
        <filename>qt3dlogic.html</filename>
        <class>Qt3DLogic::QLogicAspect</class>
        <namespace>Qt3DLogic::Logic</namespace>
        <class>Qt3DLogic::QLogicComponent</class>
    </compound>
    <compound kind="class">
        <name>Qt3DLogic::QLogicAspect</name>
        <filename>qt3dlogic-qlogicaspect.html</filename>
        <base>QAbstractAspect</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLogicAspect</name>
            <anchorfile>qt3dlogic-qlogicaspect.html</anchorfile>
            <anchor>QLogicAspect</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVector&lt;Qt3DCore::QAspectJobPtr&gt;</type>
            <name>jobsToExecute</name>
            <anchorfile>qt3dlogic-qlogicaspect.html</anchorfile>
            <anchor>jobsToExecute</anchor>
            <arglist>(qint64 time)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>registerBackendTypes</name>
            <anchorfile>qt3dlogic-qlogicaspect.html</anchorfile>
            <anchor>registerBackendTypes</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>Qt3DLogic::Logic</name>
        <filename>qt3dlogic-logic.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3DLogic::QLogicComponent</name>
        <filename>qt3dlogic-qlogiccomponent.html</filename>
        <base>QComponent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLogicComponent</name>
            <anchorfile>qt3dlogic-qlogiccomponent.html</anchorfile>
            <anchor>QLogicComponent</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLogicComponent</name>
            <anchorfile>qt3dlogic-qlogiccomponent.html</anchorfile>
            <anchor>dtor.QLogicComponent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>frameUpdate</name>
            <anchorfile>qt3dlogic-qlogiccomponent.html</anchorfile>
            <anchor>frameUpdate</anchor>
            <arglist>(float dt)</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>Qt3DRender</name>
        <filename>qt3drender.html</filename>
        <namespace>Qt3DRender::AssimpHelper</namespace>
        <class>Qt3DRender::AssimpParser</class>
        <class>Qt3DRender::GLTFParser</class>
        <class>Qt3DRender::QDiffuseMapMaterial</class>
        <class>Qt3DRender::QDiffuseSpecularMapMaterial</class>
        <class>Qt3DRender::QForwardRenderer</class>
        <class>Qt3DRender::QGoochMaterial</class>
        <class>Qt3DRender::QNormalDiffuseMapAlphaMaterial</class>
        <class>Qt3DRender::QNormalDiffuseMapMaterial</class>
        <class>Qt3DRender::QNormalDiffuseSpecularMapMaterial</class>
        <class>Qt3DRender::QPerVertexColorMaterial</class>
        <class>Qt3DRender::QPhongAlphaMaterial</class>
        <class>Qt3DRender::QPhongMaterial</class>
        <class>Qt3DRender::QSkyboxEntity</class>
        <class>Qt3DRender::QCameraSelector</class>
        <class>Qt3DRender::QClearBuffer</class>
        <class>Qt3DRender::QDispatchCompute</class>
        <class>Qt3DRender::QFrameGraph</class>
        <class>Qt3DRender::QFrameGraphNode</class>
        <class>Qt3DRender::QFrameGraphSelectorFunctor</class>
        <member kind="typedef" type="">
            <name>QFrameGraphSelectorFunctorPtr</name>
            <anchorfile>qt3drender.html</anchorfile>
            <anchor>QFrameGraphSelectorFunctorPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DRender::QFrameGraphSelector</class>
        <class>Qt3DRender::QFrustumCulling</class>
        <class>Qt3DRender::QLayerFilter</class>
        <class>Qt3DRender::QLighting</class>
        <class>Qt3DRender::QNoDraw</class>
        <class>Qt3DRender::QRenderPassFilter</class>
        <class>Qt3DRender::QRenderTargetSelector</class>
        <class>Qt3DRender::QSortCriterion</class>
        <class>Qt3DRender::QSortMethod</class>
        <class>Qt3DRender::QStateSet</class>
        <class>Qt3DRender::QTechniqueFilter</class>
        <class>Qt3DRender::QViewport</class>
        <class>Qt3DRender::FunctorType</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qintptr</type>
            <name>functorTypeId</name>
            <anchorfile>qt3drender.html</anchorfile>
            <anchor>functorTypeId</anchor>
            <arglist>()</arglist>
        </member>
        <class>Qt3DRender::QAbstractFunctor</class>
        <class>Qt3DRender::QBoundingVolumeDebug</class>
        <class>Qt3DRender::QItemModelBuffer</class>
        <class>Qt3DRender::QLayer</class>
        <namespace>Qt3DRender::Render</namespace>
        <class>Qt3DRender::QRenderAspect</class>
        <class>Qt3DRender::QRenderAttachment</class>
        <class>Qt3DRender::QRenderTarget</class>
        <class>Qt3DRender::QWindow</class>
        <member kind="typedef" type="">
            <name>QAbstractBufferPtr</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>QAbstractBufferPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DRender::QAbstractAttribute</class>
        <class>Qt3DRender::QAbstractBuffer</class>
        <class>Qt3DRender::QAttribute</class>
        <class>Qt3DRender::QBoundingVolumeSpecifier</class>
        <member kind="typedef" type="">
            <name>QBufferFunctorPtr</name>
            <anchorfile>../qtcore/qbuffer.html</anchorfile>
            <anchor>QBufferFunctorPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DRender::QBuffer</class>
        <class>Qt3DRender::QBufferFunctor</class>
        <class>Qt3DRender::QCuboidGeometry</class>
        <class>Qt3DRender::QCuboidMesh</class>
        <class>Qt3DRender::QCylinderGeometry</class>
        <class>Qt3DRender::QCylinderMesh</class>
        <member kind="typedef" type="">
            <name>QAttributeList</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>QAttributeList-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DRender::QGeometry</class>
        <class>Qt3DRender::QGeometryFunctor</class>
        <member kind="typedef" type="">
            <name>QGeometryFunctorPtr</name>
            <anchorfile>qt3drender.html</anchorfile>
            <anchor>QGeometryFunctorPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DRender::QGeometryRenderer</class>
        <class>Qt3DRender::QMesh</class>
        <class>Qt3DRender::QPlaneGeometry</class>
        <class>Qt3DRender::QPlaneMesh</class>
        <class>Qt3DRender::QSphereGeometry</class>
        <class>Qt3DRender::QSphereMesh</class>
        <class>Qt3DRender::QTorusGeometry</class>
        <class>Qt3DRender::QTorusMesh</class>
        <class>Qt3DRender::QAbstractSceneLoader</class>
        <class>Qt3DRender::QAbstractSceneParser</class>
        <class>Qt3DRender::QSceneLoader</class>
        <class>Qt3DRender::QSceneParserPlugin</class>
        <class>Qt3DRender::QDirectionalLight</class>
        <class>Qt3DRender::QLight</class>
        <class>Qt3DRender::QPointLight</class>
        <class>Qt3DRender::QSpotLight</class>
        <class>Qt3DRender::QAnnotation</class>
        <class>Qt3DRender::QEffect</class>
        <class>Qt3DRender::QGraphicsApiFilter</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QGraphicsApiFilter &amp;reference, const QGraphicsApiFilter &amp;sample)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QGraphicsApiFilter &amp;reference, const QGraphicsApiFilter &amp;sample)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>TextureDict</name>
            <anchorfile>qt3drender.html</anchorfile>
            <anchor>TextureDict-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DRender::QMaterial</class>
        <class>Qt3DRender::QParameter</class>
        <class>Qt3DRender::QParameterMapping</class>
        <member kind="typedef" type="">
            <name>ParameterList</name>
            <anchorfile>qt3drender.html</anchorfile>
            <anchor>ParameterList-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DRender::QRenderPass</class>
        <class>Qt3DRender::PropertyReaderInterface</class>
        <member kind="typedef" type="">
            <name>PropertyReaderInterfacePtr</name>
            <anchorfile>qt3drender.html</anchorfile>
            <anchor>PropertyReaderInterfacePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DRender::QShaderData</class>
        <class>Qt3DRender::QShaderProgram</class>
        <class>Qt3DRender::QTechnique</class>
        <class>Qt3DRender::QObjectPicker</class>
        <class>Qt3DRender::QPickEvent</class>
        <class>Qt3DRender::QAlphaCoverage</class>
        <class>Qt3DRender::QAlphaTest</class>
        <class>Qt3DRender::QBlendEquation</class>
        <class>Qt3DRender::QBlendState</class>
        <class>Qt3DRender::QBlendStateSeparate</class>
        <class>Qt3DRender::QClipPlane</class>
        <class>Qt3DRender::QColorMask</class>
        <class>Qt3DRender::QCullFace</class>
        <class>Qt3DRender::QDepthMask</class>
        <class>Qt3DRender::QDepthTest</class>
        <class>Qt3DRender::QDithering</class>
        <class>Qt3DRender::QFrontFace</class>
        <class>Qt3DRender::QPointSize</class>
        <class>Qt3DRender::QPolygonOffset</class>
        <class>Qt3DRender::QRenderState</class>
        <class>Qt3DRender::QScissorTest</class>
        <class>Qt3DRender::QStencilMask</class>
        <class>Qt3DRender::QStencilOp</class>
        <class>Qt3DRender::QStencilOpSeparate</class>
        <class>Qt3DRender::QStencilTest</class>
        <class>Qt3DRender::QStencilTestSeparate</class>
        <class>Qt3DRender::QTextureDataFunctor</class>
        <member kind="typedef" type="">
            <name>QTextureDataFunctorPtr</name>
            <anchorfile>qt3drender.html</anchorfile>
            <anchor>QTextureDataFunctorPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DRender::QAbstractTextureImage</class>
        <class>Qt3DRender::QAbstractTextureProvider</class>
        <class>Qt3DRender::QTexImageData</class>
        <member kind="typedef" type="">
            <name>QTexImageDataPtr</name>
            <anchorfile>qt3drender.html</anchorfile>
            <anchor>QTexImageDataPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DRender::QTextureImage</class>
        <class>Qt3DRender::QTexture1D</class>
        <class>Qt3DRender::QTexture1DArray</class>
        <class>Qt3DRender::QTexture2D</class>
        <class>Qt3DRender::QTexture2DArray</class>
        <class>Qt3DRender::QTexture3D</class>
        <class>Qt3DRender::QTextureCubeMap</class>
        <class>Qt3DRender::QTextureCubeMapArray</class>
        <class>Qt3DRender::QTexture2DMultisample</class>
        <class>Qt3DRender::QTexture2DMultisampleArray</class>
        <class>Qt3DRender::QTextureRectangle</class>
        <class>Qt3DRender::QTextureBuffer</class>
        <class>Qt3DRender::QTextureWrapMode</class>
    </compound>
    <compound kind="namespace">
        <name>Qt3DRender::AssimpHelper</name>
        <filename>qt3drender-assimphelper.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::AssimpParser</name>
        <filename>qt3drender-assimpparser.html</filename>
        <base>QAbstractSceneParser</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>AssimpParser</name>
            <anchorfile>qt3drender-assimpparser.html</anchorfile>
            <anchor>AssimpParser</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~AssimpParser</name>
            <anchorfile>qt3drender-assimpparser.html</anchorfile>
            <anchor>dtor.AssimpParser</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setSource</name>
            <anchorfile>qt3drender-assimpparser.html</anchorfile>
            <anchor>setSource</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isExtensionSupported</name>
            <anchorfile>qt3drender-assimpparser.html</anchorfile>
            <anchor>isExtensionSupported</anchor>
            <arglist>(const QUrl &amp;source) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt3DCore::QEntity *</type>
            <name>scene</name>
            <anchorfile>qt3drender-assimpparser.html</anchorfile>
            <anchor>scene</anchor>
            <arglist>(const QString &amp;id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt3DCore::QEntity *</type>
            <name>node</name>
            <anchorfile>qt3drender-assimpparser.html</anchorfile>
            <anchor>node</anchor>
            <arglist>(const QString &amp;id)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::GLTFParser</name>
        <filename>qt3drender-gltfparser.html</filename>
        <base>QAbstractSceneParser</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>GLTFParser</name>
            <anchorfile>qt3drender-gltfparser.html</anchorfile>
            <anchor>GLTFParser</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~GLTFParser</name>
            <anchorfile>qt3drender-gltfparser.html</anchorfile>
            <anchor>dtor.GLTFParser</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBasePath</name>
            <anchorfile>qt3drender-gltfparser.html</anchorfile>
            <anchor>setBasePath</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setJSON</name>
            <anchorfile>qt3drender-gltfparser.html</anchorfile>
            <anchor>setJSON</anchor>
            <arglist>(const QJsonDocument &amp;json)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setSource</name>
            <anchorfile>qt3drender-gltfparser.html</anchorfile>
            <anchor>setSource</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isExtensionSupported</name>
            <anchorfile>qt3drender-gltfparser.html</anchorfile>
            <anchor>isExtensionSupported</anchor>
            <arglist>(const QUrl &amp;source) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt3DCore::QEntity *</type>
            <name>node</name>
            <anchorfile>qt3drender-gltfparser.html</anchorfile>
            <anchor>node</anchor>
            <arglist>(const QString &amp;id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt3DCore::QEntity *</type>
            <name>scene</name>
            <anchorfile>qt3drender-gltfparser.html</anchorfile>
            <anchor>scene</anchor>
            <arglist>(const QString &amp;id)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QDiffuseMapMaterial</name>
        <filename>qt3drender-qdiffusemapmaterial.html</filename>
        <base>QMaterial</base>
        <member kind="property" type="QColor">
            <name>ambient</name>
            <anchorfile>qt3drender-qdiffusemapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>specular</name>
            <anchorfile>qt3drender-qdiffusemapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>shininess</name>
            <anchorfile>qt3drender-qdiffusemapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTextureProvider *">
            <name>diffuse</name>
            <anchorfile>qt3drender-qdiffusemapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>textureScale</name>
            <anchorfile>qt3drender-qdiffusemapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDiffuseMapMaterial</name>
            <anchorfile>qt3drender-qdiffusemapmaterial.html</anchorfile>
            <anchor>QDiffuseMapMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDiffuseMapMaterial</name>
            <anchorfile>qt3drender-qdiffusemapmaterial.html</anchorfile>
            <anchor>dtor.QDiffuseMapMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>ambient</name>
            <anchorfile>qt3drender-qdiffusemapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>specular</name>
            <anchorfile>qt3drender-qdiffusemapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>shininess</name>
            <anchorfile>qt3drender-qdiffusemapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractTextureProvider *</type>
            <name>diffuse</name>
            <anchorfile>qt3drender-qdiffusemapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>textureScale</name>
            <anchorfile>qt3drender-qdiffusemapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAmbient</name>
            <anchorfile>qt3drender-qdiffusemapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpecular</name>
            <anchorfile>qt3drender-qdiffusemapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShininess</name>
            <anchorfile>qt3drender-qdiffusemapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDiffuse</name>
            <anchorfile>qt3drender-qdiffusemapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(QAbstractTextureProvider *diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureScale</name>
            <anchorfile>qt3drender-qdiffusemapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>(float textureScale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ambientChanged</name>
            <anchorfile>qt3drender-qdiffusemapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>diffuseChanged</name>
            <anchorfile>qt3drender-qdiffusemapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(QAbstractTextureProvider *diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>specularChanged</name>
            <anchorfile>qt3drender-qdiffusemapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shininessChanged</name>
            <anchorfile>qt3drender-qdiffusemapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textureScaleChanged</name>
            <anchorfile>qt3drender-qdiffusemapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>(float textureScale)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QDiffuseSpecularMapMaterial</name>
        <filename>qt3drender-qdiffusespecularmapmaterial.html</filename>
        <base>QMaterial</base>
        <member kind="property" type="QColor">
            <name>ambient</name>
            <anchorfile>qt3drender-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>shininess</name>
            <anchorfile>qt3drender-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTextureProvider *">
            <name>specular</name>
            <anchorfile>qt3drender-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTextureProvider *">
            <name>diffuse</name>
            <anchorfile>qt3drender-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>textureScale</name>
            <anchorfile>qt3drender-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDiffuseSpecularMapMaterial</name>
            <anchorfile>qt3drender-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>QDiffuseSpecularMapMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDiffuseSpecularMapMaterial</name>
            <anchorfile>qt3drender-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>dtor.QDiffuseSpecularMapMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>ambient</name>
            <anchorfile>qt3drender-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractTextureProvider *</type>
            <name>diffuse</name>
            <anchorfile>qt3drender-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractTextureProvider *</type>
            <name>specular</name>
            <anchorfile>qt3drender-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>shininess</name>
            <anchorfile>qt3drender-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>textureScale</name>
            <anchorfile>qt3drender-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAmbient</name>
            <anchorfile>qt3drender-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDiffuse</name>
            <anchorfile>qt3drender-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(QAbstractTextureProvider *diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpecular</name>
            <anchorfile>qt3drender-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(QAbstractTextureProvider *specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShininess</name>
            <anchorfile>qt3drender-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureScale</name>
            <anchorfile>qt3drender-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>(float textureScale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ambientChanged</name>
            <anchorfile>qt3drender-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>diffuseChanged</name>
            <anchorfile>qt3drender-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(QAbstractTextureProvider *diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>specularChanged</name>
            <anchorfile>qt3drender-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(QAbstractTextureProvider *specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shininessChanged</name>
            <anchorfile>qt3drender-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textureScaleChanged</name>
            <anchorfile>qt3drender-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>(float textureScale)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QForwardRenderer</name>
        <filename>qt3drender-qforwardrenderer.html</filename>
        <base>QTechniqueFilter</base>
        <member kind="property" type="QRectF">
            <name>viewportRect</name>
            <anchorfile>qt3drender-qforwardrenderer.html</anchorfile>
            <anchor>viewportRect-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>clearColor</name>
            <anchorfile>qt3drender-qforwardrenderer.html</anchorfile>
            <anchor>clearColor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DCore::QEntity *">
            <name>camera</name>
            <anchorfile>qt3drender-qforwardrenderer.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QForwardRenderer</name>
            <anchorfile>qt3drender-qforwardrenderer.html</anchorfile>
            <anchor>QForwardRenderer</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QForwardRenderer</name>
            <anchorfile>qt3drender-qforwardrenderer.html</anchorfile>
            <anchor>dtor.QForwardRenderer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>viewportRect</name>
            <anchorfile>qt3drender-qforwardrenderer.html</anchorfile>
            <anchor>viewportRect-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>clearColor</name>
            <anchorfile>qt3drender-qforwardrenderer.html</anchorfile>
            <anchor>clearColor-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QEntity *</type>
            <name>camera</name>
            <anchorfile>qt3drender-qforwardrenderer.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setViewportRect</name>
            <anchorfile>qt3drender-qforwardrenderer.html</anchorfile>
            <anchor>viewportRect-prop</anchor>
            <arglist>(const QRectF &amp;viewportRect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClearColor</name>
            <anchorfile>qt3drender-qforwardrenderer.html</anchorfile>
            <anchor>clearColor-prop</anchor>
            <arglist>(const QColor &amp;clearColor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCamera</name>
            <anchorfile>qt3drender-qforwardrenderer.html</anchorfile>
            <anchor>setCamera</anchor>
            <arglist>(Qt3DCore::QEntity *camera)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>viewportRectChanged</name>
            <anchorfile>qt3drender-qforwardrenderer.html</anchorfile>
            <anchor>viewportRect-prop</anchor>
            <arglist>(const QRectF &amp;viewportRect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearColorChanged</name>
            <anchorfile>qt3drender-qforwardrenderer.html</anchorfile>
            <anchor>clearColor-prop</anchor>
            <arglist>(const QColor &amp;clearColor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cameraChanged</name>
            <anchorfile>qt3drender-qforwardrenderer.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>(Qt3DCore::QEntity *camera)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QGoochMaterial</name>
        <filename>qt3drender-qgoochmaterial.html</filename>
        <base>QMaterial</base>
        <member kind="property" type="QColor">
            <name>diffuse</name>
            <anchorfile>qt3drender-qgoochmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>specular</name>
            <anchorfile>qt3drender-qgoochmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>cool</name>
            <anchorfile>qt3drender-qgoochmaterial.html</anchorfile>
            <anchor>cool-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>warm</name>
            <anchorfile>qt3drender-qgoochmaterial.html</anchorfile>
            <anchor>warm-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>alpha</name>
            <anchorfile>qt3drender-qgoochmaterial.html</anchorfile>
            <anchor>alpha-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>beta</name>
            <anchorfile>qt3drender-qgoochmaterial.html</anchorfile>
            <anchor>beta-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>shininess</name>
            <anchorfile>qt3drender-qgoochmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGoochMaterial</name>
            <anchorfile>qt3drender-qgoochmaterial.html</anchorfile>
            <anchor>QGoochMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>diffuse</name>
            <anchorfile>qt3drender-qgoochmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>specular</name>
            <anchorfile>qt3drender-qgoochmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>cool</name>
            <anchorfile>qt3drender-qgoochmaterial.html</anchorfile>
            <anchor>cool-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>warm</name>
            <anchorfile>qt3drender-qgoochmaterial.html</anchorfile>
            <anchor>warm-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>alpha</name>
            <anchorfile>qt3drender-qgoochmaterial.html</anchorfile>
            <anchor>alpha-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>beta</name>
            <anchorfile>qt3drender-qgoochmaterial.html</anchorfile>
            <anchor>beta-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>shininess</name>
            <anchorfile>qt3drender-qgoochmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDiffuse</name>
            <anchorfile>qt3drender-qgoochmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(const QColor &amp;diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpecular</name>
            <anchorfile>qt3drender-qgoochmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCool</name>
            <anchorfile>qt3drender-qgoochmaterial.html</anchorfile>
            <anchor>cool-prop</anchor>
            <arglist>(const QColor &amp;cool)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWarm</name>
            <anchorfile>qt3drender-qgoochmaterial.html</anchorfile>
            <anchor>warm-prop</anchor>
            <arglist>(const QColor &amp;warm)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlpha</name>
            <anchorfile>qt3drender-qgoochmaterial.html</anchorfile>
            <anchor>alpha-prop</anchor>
            <arglist>(float alpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBeta</name>
            <anchorfile>qt3drender-qgoochmaterial.html</anchorfile>
            <anchor>beta-prop</anchor>
            <arglist>(float beta)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShininess</name>
            <anchorfile>qt3drender-qgoochmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>diffuseChanged</name>
            <anchorfile>qt3drender-qgoochmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(const QColor &amp;diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>specularChanged</name>
            <anchorfile>qt3drender-qgoochmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>coolChanged</name>
            <anchorfile>qt3drender-qgoochmaterial.html</anchorfile>
            <anchor>cool-prop</anchor>
            <arglist>(const QColor &amp;cool)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>warmChanged</name>
            <anchorfile>qt3drender-qgoochmaterial.html</anchorfile>
            <anchor>warm-prop</anchor>
            <arglist>(const QColor &amp;warm)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>alphaChanged</name>
            <anchorfile>qt3drender-qgoochmaterial.html</anchorfile>
            <anchor>alpha-prop</anchor>
            <arglist>(float alpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>betaChanged</name>
            <anchorfile>qt3drender-qgoochmaterial.html</anchorfile>
            <anchor>beta-prop</anchor>
            <arglist>(float beta)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shininessChanged</name>
            <anchorfile>qt3drender-qgoochmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QGoochMaterial</name>
            <anchorfile>qt3drender-qgoochmaterial.html</anchorfile>
            <anchor>QGoochMaterial-1</anchor>
            <arglist>(QGoochMaterialPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QNormalDiffuseMapAlphaMaterial</name>
        <filename>qt3drender-qnormaldiffusemapalphamaterial.html</filename>
        <base>QNormalDiffuseMapMaterial</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNormalDiffuseMapAlphaMaterial</name>
            <anchorfile>qt3drender-qnormaldiffusemapalphamaterial.html</anchorfile>
            <anchor>QNormalDiffuseMapAlphaMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNormalDiffuseMapAlphaMaterial</name>
            <anchorfile>qt3drender-qnormaldiffusemapalphamaterial.html</anchorfile>
            <anchor>dtor.QNormalDiffuseMapAlphaMaterial</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QNormalDiffuseMapMaterial</name>
        <filename>qt3drender-qnormaldiffusemapmaterial.html</filename>
        <base>QMaterial</base>
        <member kind="property" type="QColor">
            <name>ambient</name>
            <anchorfile>qt3drender-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>specular</name>
            <anchorfile>qt3drender-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTextureProvider *">
            <name>diffuse</name>
            <anchorfile>qt3drender-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTextureProvider *">
            <name>normal</name>
            <anchorfile>qt3drender-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>shininess</name>
            <anchorfile>qt3drender-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>textureScale</name>
            <anchorfile>qt3drender-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNormalDiffuseMapMaterial</name>
            <anchorfile>qt3drender-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>QNormalDiffuseMapMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNormalDiffuseMapMaterial</name>
            <anchorfile>qt3drender-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>dtor.QNormalDiffuseMapMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>ambient</name>
            <anchorfile>qt3drender-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>specular</name>
            <anchorfile>qt3drender-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractTextureProvider *</type>
            <name>diffuse</name>
            <anchorfile>qt3drender-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractTextureProvider *</type>
            <name>normal</name>
            <anchorfile>qt3drender-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>shininess</name>
            <anchorfile>qt3drender-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>textureScale</name>
            <anchorfile>qt3drender-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAmbient</name>
            <anchorfile>qt3drender-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpecular</name>
            <anchorfile>qt3drender-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDiffuse</name>
            <anchorfile>qt3drender-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(QAbstractTextureProvider *diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNormal</name>
            <anchorfile>qt3drender-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>(QAbstractTextureProvider *normal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShininess</name>
            <anchorfile>qt3drender-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureScale</name>
            <anchorfile>qt3drender-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>(float textureScale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ambientChanged</name>
            <anchorfile>qt3drender-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>diffuseChanged</name>
            <anchorfile>qt3drender-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(QAbstractTextureProvider *diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>normalChanged</name>
            <anchorfile>qt3drender-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>(QAbstractTextureProvider *normal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>specularChanged</name>
            <anchorfile>qt3drender-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shininessChanged</name>
            <anchorfile>qt3drender-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textureScaleChanged</name>
            <anchorfile>qt3drender-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>(float textureScale)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QNormalDiffuseMapMaterial</name>
            <anchorfile>qt3drender-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>QNormalDiffuseMapMaterial-1</anchor>
            <arglist>(QNormalDiffuseMapMaterialPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QNormalDiffuseSpecularMapMaterial</name>
        <filename>qt3drender-qnormaldiffusespecularmapmaterial.html</filename>
        <base>QMaterial</base>
        <member kind="property" type="QColor">
            <name>ambient</name>
            <anchorfile>qt3drender-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTextureProvider *">
            <name>diffuse</name>
            <anchorfile>qt3drender-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTextureProvider *">
            <name>normal</name>
            <anchorfile>qt3drender-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTextureProvider *">
            <name>specular</name>
            <anchorfile>qt3drender-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>shininess</name>
            <anchorfile>qt3drender-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>textureScale</name>
            <anchorfile>qt3drender-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNormalDiffuseSpecularMapMaterial</name>
            <anchorfile>qt3drender-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>QNormalDiffuseSpecularMapMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNormalDiffuseSpecularMapMaterial</name>
            <anchorfile>qt3drender-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>dtor.QNormalDiffuseSpecularMapMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>ambient</name>
            <anchorfile>qt3drender-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractTextureProvider *</type>
            <name>diffuse</name>
            <anchorfile>qt3drender-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractTextureProvider *</type>
            <name>normal</name>
            <anchorfile>qt3drender-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractTextureProvider *</type>
            <name>specular</name>
            <anchorfile>qt3drender-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>shininess</name>
            <anchorfile>qt3drender-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>textureScale</name>
            <anchorfile>qt3drender-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAmbient</name>
            <anchorfile>qt3drender-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDiffuse</name>
            <anchorfile>qt3drender-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(QAbstractTextureProvider *diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNormal</name>
            <anchorfile>qt3drender-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>(QAbstractTextureProvider *normal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpecular</name>
            <anchorfile>qt3drender-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(QAbstractTextureProvider *specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShininess</name>
            <anchorfile>qt3drender-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureScale</name>
            <anchorfile>qt3drender-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>(float textureScale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ambientChanged</name>
            <anchorfile>qt3drender-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>diffuseChanged</name>
            <anchorfile>qt3drender-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(QAbstractTextureProvider *diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>normalChanged</name>
            <anchorfile>qt3drender-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>(QAbstractTextureProvider *normal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>specularChanged</name>
            <anchorfile>qt3drender-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(QAbstractTextureProvider *specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shininessChanged</name>
            <anchorfile>qt3drender-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textureScaleChanged</name>
            <anchorfile>qt3drender-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>(float textureScale)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QNormalDiffuseSpecularMapMaterial</name>
            <anchorfile>qt3drender-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>QNormalDiffuseSpecularMapMaterial-1</anchor>
            <arglist>(QNormalDiffuseSpecularMapMaterialPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QPerVertexColorMaterial</name>
        <filename>qt3drender-qpervertexcolormaterial.html</filename>
        <base>QMaterial</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPerVertexColorMaterial</name>
            <anchorfile>qt3drender-qpervertexcolormaterial.html</anchorfile>
            <anchor>QPerVertexColorMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPerVertexColorMaterial</name>
            <anchorfile>qt3drender-qpervertexcolormaterial.html</anchorfile>
            <anchor>dtor.QPerVertexColorMaterial</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QPhongAlphaMaterial</name>
        <filename>qt3drender-qphongalphamaterial.html</filename>
        <base>QMaterial</base>
        <member kind="property" type="QColor">
            <name>ambient</name>
            <anchorfile>qt3drender-qphongalphamaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>diffuse</name>
            <anchorfile>qt3drender-qphongalphamaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>specular</name>
            <anchorfile>qt3drender-qphongalphamaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>shininess</name>
            <anchorfile>qt3drender-qphongalphamaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>alpha</name>
            <anchorfile>qt3drender-qphongalphamaterial.html</anchorfile>
            <anchor>alpha-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPhongAlphaMaterial</name>
            <anchorfile>qt3drender-qphongalphamaterial.html</anchorfile>
            <anchor>QPhongAlphaMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPhongAlphaMaterial</name>
            <anchorfile>qt3drender-qphongalphamaterial.html</anchorfile>
            <anchor>dtor.QPhongAlphaMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>ambient</name>
            <anchorfile>qt3drender-qphongalphamaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>diffuse</name>
            <anchorfile>qt3drender-qphongalphamaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>specular</name>
            <anchorfile>qt3drender-qphongalphamaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>shininess</name>
            <anchorfile>qt3drender-qphongalphamaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>alpha</name>
            <anchorfile>qt3drender-qphongalphamaterial.html</anchorfile>
            <anchor>alpha-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAmbient</name>
            <anchorfile>qt3drender-qphongalphamaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDiffuse</name>
            <anchorfile>qt3drender-qphongalphamaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(const QColor &amp;diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpecular</name>
            <anchorfile>qt3drender-qphongalphamaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShininess</name>
            <anchorfile>qt3drender-qphongalphamaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlpha</name>
            <anchorfile>qt3drender-qphongalphamaterial.html</anchorfile>
            <anchor>alpha-prop</anchor>
            <arglist>(float alpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ambientChanged</name>
            <anchorfile>qt3drender-qphongalphamaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>diffuseChanged</name>
            <anchorfile>qt3drender-qphongalphamaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(const QColor &amp;diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>specularChanged</name>
            <anchorfile>qt3drender-qphongalphamaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shininessChanged</name>
            <anchorfile>qt3drender-qphongalphamaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>alphaChanged</name>
            <anchorfile>qt3drender-qphongalphamaterial.html</anchorfile>
            <anchor>alpha-prop</anchor>
            <arglist>(float alpha)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QPhongMaterial</name>
        <filename>qt3drender-qphongmaterial.html</filename>
        <base>QMaterial</base>
        <member kind="property" type="QColor">
            <name>ambient</name>
            <anchorfile>qt3drender-qphongmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>diffuse</name>
            <anchorfile>qt3drender-qphongmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>specular</name>
            <anchorfile>qt3drender-qphongmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>shininess</name>
            <anchorfile>qt3drender-qphongmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPhongMaterial</name>
            <anchorfile>qt3drender-qphongmaterial.html</anchorfile>
            <anchor>QPhongMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPhongMaterial</name>
            <anchorfile>qt3drender-qphongmaterial.html</anchorfile>
            <anchor>dtor.QPhongMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>ambient</name>
            <anchorfile>qt3drender-qphongmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>diffuse</name>
            <anchorfile>qt3drender-qphongmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>specular</name>
            <anchorfile>qt3drender-qphongmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>shininess</name>
            <anchorfile>qt3drender-qphongmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAmbient</name>
            <anchorfile>qt3drender-qphongmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDiffuse</name>
            <anchorfile>qt3drender-qphongmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(const QColor &amp;diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpecular</name>
            <anchorfile>qt3drender-qphongmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShininess</name>
            <anchorfile>qt3drender-qphongmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ambientChanged</name>
            <anchorfile>qt3drender-qphongmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>diffuseChanged</name>
            <anchorfile>qt3drender-qphongmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(const QColor &amp;diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>specularChanged</name>
            <anchorfile>qt3drender-qphongmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shininessChanged</name>
            <anchorfile>qt3drender-qphongmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QSkyboxEntity</name>
        <filename>qt3drender-qskyboxentity.html</filename>
        <base>QEntity</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSkyboxEntity</name>
            <anchorfile>qt3drender-qskyboxentity.html</anchorfile>
            <anchor>QSkyboxEntity</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSkyboxEntity</name>
            <anchorfile>qt3drender-qskyboxentity.html</anchorfile>
            <anchor>dtor.QSkyboxEntity</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBaseName</name>
            <anchorfile>qt3drender-qskyboxentity.html</anchorfile>
            <anchor>setBaseName</anchor>
            <arglist>(const QString &amp;baseName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>baseName</name>
            <anchorfile>qt3drender-qskyboxentity.html</anchorfile>
            <anchor>baseName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExtension</name>
            <anchorfile>qt3drender-qskyboxentity.html</anchorfile>
            <anchor>setExtension</anchor>
            <arglist>(const QString &amp;extension)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>extension</name>
            <anchorfile>qt3drender-qskyboxentity.html</anchorfile>
            <anchor>extension</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCameraPosition</name>
            <anchorfile>qt3drender-qskyboxentity.html</anchorfile>
            <anchor>setCameraPosition</anchor>
            <arglist>(const QVector3D &amp;cameraPosition)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>cameraPosition</name>
            <anchorfile>qt3drender-qskyboxentity.html</anchorfile>
            <anchor>cameraPosition</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceDirectoryChanged</name>
            <anchorfile>qt3drender-qskyboxentity.html</anchorfile>
            <anchor>sourceDirectoryChanged</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>extensionChanged</name>
            <anchorfile>qt3drender-qskyboxentity.html</anchorfile>
            <anchor>extensionChanged</anchor>
            <arglist>(const QString &amp;extension)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cameraPositionChanged</name>
            <anchorfile>qt3drender-qskyboxentity.html</anchorfile>
            <anchor>cameraPositionChanged</anchor>
            <arglist>(const QVector3D &amp;cameraPosition)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QCameraSelector</name>
        <filename>qt3drender-qcameraselector.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="property" type="Qt3DCore::QEntity *">
            <name>camera</name>
            <anchorfile>qt3drender-qcameraselector.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCameraSelector</name>
            <anchorfile>qt3drender-qcameraselector.html</anchorfile>
            <anchor>QCameraSelector</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCameraSelector</name>
            <anchorfile>qt3drender-qcameraselector.html</anchorfile>
            <anchor>dtor.QCameraSelector</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QEntity *</type>
            <name>camera</name>
            <anchorfile>qt3drender-qcameraselector.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCamera</name>
            <anchorfile>qt3drender-qcameraselector.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>(Qt3DCore::QEntity *camera)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cameraChanged</name>
            <anchorfile>qt3drender-qcameraselector.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>(Qt3DCore::QEntity *camera)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QCameraSelector</name>
            <anchorfile>qt3drender-qcameraselector.html</anchorfile>
            <anchor>QCameraSelector-1</anchor>
            <arglist>(QCameraSelectorPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qcameraselector.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QClearBuffer</name>
        <filename>qt3drender-qclearbuffer.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="property" type="BufferType">
            <name>buffers</name>
            <anchorfile>qt3drender-qclearbuffer.html</anchorfile>
            <anchor>buffers-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QClearBuffer</name>
            <anchorfile>qt3drender-qclearbuffer.html</anchorfile>
            <anchor>QClearBuffer</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QClearBuffer</name>
            <anchorfile>qt3drender-qclearbuffer.html</anchorfile>
            <anchor>dtor.QClearBuffer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>BufferType</name>
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="None">
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ColorBuffer">
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DepthBuffer">
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StencilBuffer">
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DepthStencilBuffer">
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ColorDepthBuffer">
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ColorDepthStencilBuffer">
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AllBuffers">
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>BufferType</type>
            <name>buffers</name>
            <anchorfile>qt3drender-qclearbuffer.html</anchorfile>
            <anchor>buffers-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBuffers</name>
            <anchorfile>qt3drender-qclearbuffer.html</anchorfile>
            <anchor>buffers-prop</anchor>
            <arglist>(BufferType buffers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>buffersChanged</name>
            <anchorfile>qt3drender-qclearbuffer.html</anchorfile>
            <anchor>buffers-prop</anchor>
            <arglist>(BufferType buffers)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QClearBuffer</name>
            <anchorfile>qt3drender-qclearbuffer.html</anchorfile>
            <anchor>QClearBuffer-1</anchor>
            <arglist>(QClearBufferPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qclearbuffer.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QDispatchCompute</name>
        <filename>qt3drender-qdispatchcompute.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="property" type="int">
            <name>workGroupX</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupX-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>workGroupY</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupY-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>workGroupZ</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupZ-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDispatchCompute</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>QDispatchCompute</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDispatchCompute</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>dtor.QDispatchCompute</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>workGroupX</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupX-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>workGroupY</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupY-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>workGroupZ</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupZ-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWorkGroupX</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupX-prop</anchor>
            <arglist>(int workGroupX)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWorkGroupY</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupY-prop</anchor>
            <arglist>(int workGroupY)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWorkGroupZ</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupZ-prop</anchor>
            <arglist>(int workGroupZ)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>workGroupXChanged</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupX-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>workGroupYChanged</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupY-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>workGroupZChanged</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupZ-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QFrameGraph</name>
        <filename>qt3drender-qframegraph.html</filename>
        <base>QComponent</base>
        <member kind="property" type="Qt3DRender::QFrameGraphNode *">
            <name>activeFrameGraph</name>
            <anchorfile>qt3drender-qframegraph.html</anchorfile>
            <anchor>activeFrameGraph-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFrameGraph</name>
            <anchorfile>qt3drender-qframegraph.html</anchorfile>
            <anchor>QFrameGraph</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFrameGraph</name>
            <anchorfile>qt3drender-qframegraph.html</anchorfile>
            <anchor>dtor.QFrameGraph</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFrameGraphNode *</type>
            <name>activeFrameGraph</name>
            <anchorfile>qt3drender-qframegraph.html</anchorfile>
            <anchor>activeFrameGraph-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setActiveFrameGraph</name>
            <anchorfile>qt3drender-qframegraph.html</anchorfile>
            <anchor>activeFrameGraph-prop</anchor>
            <arglist>(QFrameGraphNode *activeFrameGraph)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activeFrameGraphChanged</name>
            <anchorfile>qt3drender-qframegraph.html</anchorfile>
            <anchor>activeFrameGraph-prop</anchor>
            <arglist>(QFrameGraphNode *activeFrameGraph)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QFrameGraph</name>
            <anchorfile>qt3drender-qframegraph.html</anchorfile>
            <anchor>QFrameGraph-1</anchor>
            <arglist>(QFrameGraphPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qframegraph.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QFrameGraphNode</name>
        <filename>qt3drender-qframegraphnode.html</filename>
        <base>QNode</base>
        <member kind="property" type="bool">
            <name>enabled</name>
            <anchorfile>qt3drender-qframegraphnode.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFrameGraphNode</name>
            <anchorfile>qt3drender-qframegraphnode.html</anchorfile>
            <anchor>QFrameGraphNode</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFrameGraphNode</name>
            <anchorfile>qt3drender-qframegraphnode.html</anchorfile>
            <anchor>dtor.QFrameGraphNode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFrameGraphNode *</type>
            <name>parentFrameGraphNode</name>
            <anchorfile>qt3drender-qframegraphnode.html</anchorfile>
            <anchor>parentFrameGraphNode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEnabled</name>
            <anchorfile>qt3drender-qframegraphnode.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEnabled</name>
            <anchorfile>qt3drender-qframegraphnode.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QFrameGraphNode</name>
            <anchorfile>qt3drender-qframegraphnode.html</anchorfile>
            <anchor>QFrameGraphNode-1</anchor>
            <arglist>(QFrameGraphNodePrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>enabledChanged</name>
            <anchorfile>qt3drender-qframegraphnode.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QFrameGraphSelectorFunctor</name>
        <filename>qt3drender-qframegraphselectorfunctor.html</filename>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QVector&lt;int&gt;</type>
            <name>operator()</name>
            <anchorfile>qt3drender-qframegraphselectorfunctor.html</anchorfile>
            <anchor>operator-28-29</anchor>
            <arglist>()() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QFrameGraphSelectorFunctor</name>
            <anchorfile>qt3drender-qframegraphselectorfunctor.html</anchorfile>
            <anchor>dtor.QFrameGraphSelectorFunctor</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QFrameGraphSelector</name>
        <filename>qt3drender-qframegraphselector.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFrameGraphSelector</name>
            <anchorfile>qt3drender-qframegraphselector.html</anchorfile>
            <anchor>QFrameGraphSelector</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFrameGraphSelector</name>
            <anchorfile>qt3drender-qframegraphselector.html</anchorfile>
            <anchor>dtor.QFrameGraphSelector</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFrameGraphSelectorFunctorPtr</type>
            <name>selectionFunctor</name>
            <anchorfile>qt3drender-qframegraphselector.html</anchorfile>
            <anchor>selectionFunctor</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSelectionFunctor</name>
            <anchorfile>qt3drender-qframegraphselector.html</anchorfile>
            <anchor>setSelectionFunctor</anchor>
            <arglist>(QFrameGraphSelectorFunctorPtr functor)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qframegraphselector.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QFrustumCulling</name>
        <filename>qt3drender-qfrustumculling.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFrustumCulling</name>
            <anchorfile>qt3drender-qfrustumculling.html</anchorfile>
            <anchor>QFrustumCulling</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFrustumCulling</name>
            <anchorfile>qt3drender-qfrustumculling.html</anchorfile>
            <anchor>dtor.QFrustumCulling</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QLayerFilter</name>
        <filename>qt3drender-qlayerfilter.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="property" type="QStringList">
            <name>layers</name>
            <anchorfile>qt3drender-qlayerfilter.html</anchorfile>
            <anchor>layers-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLayerFilter</name>
            <anchorfile>qt3drender-qlayerfilter.html</anchorfile>
            <anchor>QLayerFilter</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLayerFilter</name>
            <anchorfile>qt3drender-qlayerfilter.html</anchorfile>
            <anchor>dtor.QLayerFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>layers</name>
            <anchorfile>qt3drender-qlayerfilter.html</anchorfile>
            <anchor>layers-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLayers</name>
            <anchorfile>qt3drender-qlayerfilter.html</anchorfile>
            <anchor>layers-prop</anchor>
            <arglist>(const QStringList &amp;layers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>layersChanged</name>
            <anchorfile>qt3drender-qlayerfilter.html</anchorfile>
            <anchor>layers-prop</anchor>
            <arglist>(const QStringList &amp;layers)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QLayerFilter</name>
            <anchorfile>qt3drender-qlayerfilter.html</anchorfile>
            <anchor>QLayerFilter-1</anchor>
            <arglist>(QLayerFilterPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qlayerfilter.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QLighting</name>
        <filename>qt3drender-qlighting.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLighting</name>
            <anchorfile>qt3drender-qlighting.html</anchorfile>
            <anchor>QLighting</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLighting</name>
            <anchorfile>qt3drender-qlighting.html</anchorfile>
            <anchor>dtor.QLighting</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QLighting</name>
            <anchorfile>qt3drender-qlighting.html</anchorfile>
            <anchor>QLighting-1</anchor>
            <arglist>(QLightingPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qlighting.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QNoDraw</name>
        <filename>qt3drender-qnodraw.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNoDraw</name>
            <anchorfile>qt3drender-qnodraw.html</anchorfile>
            <anchor>QNoDraw</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNoDraw</name>
            <anchorfile>qt3drender-qnodraw.html</anchorfile>
            <anchor>dtor.QNoDraw</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderPassFilter</name>
        <filename>qt3drender-qrenderpassfilter.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRenderPassFilter</name>
            <anchorfile>qt3drender-qrenderpassfilter.html</anchorfile>
            <anchor>QRenderPassFilter</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QRenderPassFilter</name>
            <anchorfile>qt3drender-qrenderpassfilter.html</anchorfile>
            <anchor>dtor.QRenderPassFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QAnnotation *&gt;</type>
            <name>includes</name>
            <anchorfile>qt3drender-qrenderpassfilter.html</anchorfile>
            <anchor>includes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addInclude</name>
            <anchorfile>qt3drender-qrenderpassfilter.html</anchorfile>
            <anchor>addInclude</anchor>
            <arglist>(QAnnotation *criterion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeInclude</name>
            <anchorfile>qt3drender-qrenderpassfilter.html</anchorfile>
            <anchor>removeInclude</anchor>
            <arglist>(QAnnotation *criterion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addParameter</name>
            <anchorfile>qt3drender-qrenderpassfilter.html</anchorfile>
            <anchor>addParameter</anchor>
            <arglist>(QParameter *p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeParameter</name>
            <anchorfile>qt3drender-qrenderpassfilter.html</anchorfile>
            <anchor>removeParameter</anchor>
            <arglist>(QParameter *p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QParameter *&gt;</type>
            <name>parameters</name>
            <anchorfile>qt3drender-qrenderpassfilter.html</anchorfile>
            <anchor>parameters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QRenderPassFilter</name>
            <anchorfile>qt3drender-qrenderpassfilter.html</anchorfile>
            <anchor>QRenderPassFilter-1</anchor>
            <arglist>(QRenderPassFilterPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qrenderpassfilter.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderTargetSelector</name>
        <filename>qt3drender-qrendertargetselector.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="property" type="Qt3DRender::QRenderTarget *">
            <name>target</name>
            <anchorfile>qt3drender-qrendertargetselector.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRenderTargetSelector</name>
            <anchorfile>qt3drender-qrendertargetselector.html</anchorfile>
            <anchor>QRenderTargetSelector</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QRenderTargetSelector</name>
            <anchorfile>qt3drender-qrendertargetselector.html</anchorfile>
            <anchor>dtor.QRenderTargetSelector</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRenderTarget *</type>
            <name>target</name>
            <anchorfile>qt3drender-qrendertargetselector.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDrawBuffers</name>
            <anchorfile>qt3drender-qrendertargetselector.html</anchorfile>
            <anchor>setDrawBuffers</anchor>
            <arglist>(const QList&lt;QRenderAttachment::RenderAttachmentType&gt; &amp;buffers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QRenderAttachment::RenderAttachmentType&gt;</type>
            <name>drawBuffers</name>
            <anchorfile>qt3drender-qrendertargetselector.html</anchorfile>
            <anchor>drawBuffers</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTarget</name>
            <anchorfile>qt3drender-qrendertargetselector.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>(QRenderTarget *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>targetChanged</name>
            <anchorfile>qt3drender-qrendertargetselector.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>(QRenderTarget *target)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QRenderTargetSelector</name>
            <anchorfile>qt3drender-qrendertargetselector.html</anchorfile>
            <anchor>QRenderTargetSelector-1</anchor>
            <arglist>(QRenderTargetSelectorPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qrendertargetselector.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QSortCriterion</name>
        <filename>qt3drender-qsortcriterion.html</filename>
        <base>QNode</base>
        <member kind="property" type="Qt3DRender::QSortCriterion::SortType">
            <name>sort</name>
            <anchorfile>qt3drender-qsortcriterion.html</anchorfile>
            <anchor>sort-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSortCriterion</name>
            <anchorfile>qt3drender-qsortcriterion.html</anchorfile>
            <anchor>QSortCriterion</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSortCriterion</name>
            <anchorfile>qt3drender-qsortcriterion.html</anchorfile>
            <anchor>dtor.QSortCriterion</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>SortType</name>
            <anchor>SortType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StateChangeCost">
            <anchor>SortType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BackToFront">
            <anchor>SortType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Material">
            <anchor>SortType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SortType</type>
            <name>sort</name>
            <anchorfile>qt3drender-qsortcriterion.html</anchorfile>
            <anchor>sort-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSort</name>
            <anchorfile>qt3drender-qsortcriterion.html</anchorfile>
            <anchor>sort-prop</anchor>
            <arglist>(SortType sort)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sortChanged</name>
            <anchorfile>qt3drender-qsortcriterion.html</anchorfile>
            <anchor>sort-prop</anchor>
            <arglist>(SortType sort)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QSortCriterion</name>
            <anchorfile>qt3drender-qsortcriterion.html</anchorfile>
            <anchor>QSortCriterion-1</anchor>
            <arglist>(QSortCriterionPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qsortcriterion.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QSortMethod</name>
        <filename>qt3drender-qsortmethod.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSortMethod</name>
            <anchorfile>qt3drender-qsortmethod.html</anchorfile>
            <anchor>QSortMethod</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSortMethod</name>
            <anchorfile>qt3drender-qsortmethod.html</anchorfile>
            <anchor>dtor.QSortMethod</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addCriterion</name>
            <anchorfile>qt3drender-qsortmethod.html</anchorfile>
            <anchor>addCriterion</anchor>
            <arglist>(QSortCriterion *criterion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeCriterion</name>
            <anchorfile>qt3drender-qsortmethod.html</anchorfile>
            <anchor>removeCriterion</anchor>
            <arglist>(QSortCriterion *criterion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QSortCriterion *&gt;</type>
            <name>criteria</name>
            <anchorfile>qt3drender-qsortmethod.html</anchorfile>
            <anchor>criteria</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QSortMethod</name>
            <anchorfile>qt3drender-qsortmethod.html</anchorfile>
            <anchor>QSortMethod-1</anchor>
            <arglist>(QSortMethodPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qsortmethod.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QStateSet</name>
        <filename>qt3drender-qstateset.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStateSet</name>
            <anchorfile>qt3drender-qstateset.html</anchorfile>
            <anchor>QStateSet</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QStateSet</name>
            <anchorfile>qt3drender-qstateset.html</anchorfile>
            <anchor>dtor.QStateSet</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRenderState</name>
            <anchorfile>qt3drender-qstateset.html</anchorfile>
            <anchor>addRenderState</anchor>
            <arglist>(QRenderState *state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeRenderState</name>
            <anchorfile>qt3drender-qstateset.html</anchorfile>
            <anchor>removeRenderState</anchor>
            <arglist>(QRenderState *state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QRenderState *&gt;</type>
            <name>renderStates</name>
            <anchorfile>qt3drender-qstateset.html</anchorfile>
            <anchor>renderStates</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QStateSet</name>
            <anchorfile>qt3drender-qstateset.html</anchorfile>
            <anchor>QStateSet-1</anchor>
            <arglist>(QStateSetPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qstateset.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTechniqueFilter</name>
        <filename>qt3drender-qtechniquefilter.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTechniqueFilter</name>
            <anchorfile>qt3drender-qtechniquefilter.html</anchorfile>
            <anchor>QTechniqueFilter</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTechniqueFilter</name>
            <anchorfile>qt3drender-qtechniquefilter.html</anchorfile>
            <anchor>dtor.QTechniqueFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QAnnotation *&gt;</type>
            <name>criteria</name>
            <anchorfile>qt3drender-qtechniquefilter.html</anchorfile>
            <anchor>criteria</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRequirement</name>
            <anchorfile>qt3drender-qtechniquefilter.html</anchorfile>
            <anchor>addRequirement</anchor>
            <arglist>(QAnnotation *criterion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeRequirement</name>
            <anchorfile>qt3drender-qtechniquefilter.html</anchorfile>
            <anchor>removeRequirement</anchor>
            <arglist>(QAnnotation *criterion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addParameter</name>
            <anchorfile>qt3drender-qtechniquefilter.html</anchorfile>
            <anchor>addParameter</anchor>
            <arglist>(QParameter *p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeParameter</name>
            <anchorfile>qt3drender-qtechniquefilter.html</anchorfile>
            <anchor>removeParameter</anchor>
            <arglist>(QParameter *p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QParameter *&gt;</type>
            <name>parameters</name>
            <anchorfile>qt3drender-qtechniquefilter.html</anchorfile>
            <anchor>parameters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QTechniqueFilter</name>
            <anchorfile>qt3drender-qtechniquefilter.html</anchorfile>
            <anchor>QTechniqueFilter-1</anchor>
            <arglist>(QTechniqueFilterPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qtechniquefilter.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QViewport</name>
        <filename>qt3drender-qviewport.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="property" type="QRectF">
            <name>rect</name>
            <anchorfile>qt3drender-qviewport.html</anchorfile>
            <anchor>rect-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>clearColor</name>
            <anchorfile>qt3drender-qviewport.html</anchorfile>
            <anchor>clearColor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QViewport</name>
            <anchorfile>qt3drender-qviewport.html</anchorfile>
            <anchor>QViewport</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QViewport</name>
            <anchorfile>qt3drender-qviewport.html</anchorfile>
            <anchor>dtor.QViewport</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>rect</name>
            <anchorfile>qt3drender-qviewport.html</anchorfile>
            <anchor>rect-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>clearColor</name>
            <anchorfile>qt3drender-qviewport.html</anchorfile>
            <anchor>clearColor-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRect</name>
            <anchorfile>qt3drender-qviewport.html</anchorfile>
            <anchor>rect-prop</anchor>
            <arglist>(const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClearColor</name>
            <anchorfile>qt3drender-qviewport.html</anchorfile>
            <anchor>clearColor-prop</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rectChanged</name>
            <anchorfile>qt3drender-qviewport.html</anchorfile>
            <anchor>rect-prop</anchor>
            <arglist>(const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearColorChanged</name>
            <anchorfile>qt3drender-qviewport.html</anchorfile>
            <anchor>clearColor-prop</anchor>
            <arglist>(const QColor &amp;clearColor)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QViewport</name>
            <anchorfile>qt3drender-qviewport.html</anchorfile>
            <anchor>QViewport-1</anchor>
            <arglist>(QViewportPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qviewport.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::FunctorType</name>
        <filename>qt3drender-functortype.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>qintptr</type>
            <name>id</name>
            <anchorfile>qt3drender-functortype.html</anchorfile>
            <anchor>id</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QAbstractFunctor</name>
        <filename>qt3drender-qabstractfunctor.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractFunctor</name>
            <anchorfile>qt3drender-qabstractfunctor.html</anchorfile>
            <anchor>dtor.QAbstractFunctor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual qintptr</type>
            <name>id</name>
            <anchorfile>qt3drender-qabstractfunctor.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>functor_cast</name>
            <anchorfile>qt3drender-qabstractfunctor.html</anchorfile>
            <anchor>functor_cast</anchor>
            <arglist>(const QAbstractFunctor *other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QBoundingVolumeDebug</name>
        <filename>qt3drender-qboundingvolumedebug.html</filename>
        <base>QComponent</base>
        <member kind="property" type="bool">
            <name>recursive</name>
            <anchorfile>qt3drender-qboundingvolumedebug.html</anchorfile>
            <anchor>recursive-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBoundingVolumeDebug</name>
            <anchorfile>qt3drender-qboundingvolumedebug.html</anchorfile>
            <anchor>QBoundingVolumeDebug</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QBoundingVolumeDebug</name>
            <anchorfile>qt3drender-qboundingvolumedebug.html</anchorfile>
            <anchor>dtor.QBoundingVolumeDebug</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>recursive</name>
            <anchorfile>qt3drender-qboundingvolumedebug.html</anchorfile>
            <anchor>recursive-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRecursive</name>
            <anchorfile>qt3drender-qboundingvolumedebug.html</anchorfile>
            <anchor>recursive-prop</anchor>
            <arglist>(bool recursive)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>recursiveChanged</name>
            <anchorfile>qt3drender-qboundingvolumedebug.html</anchorfile>
            <anchor>recursive-prop</anchor>
            <arglist>(bool recursive)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qboundingvolumedebug.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3drender-qboundingvolumedebug.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const Qt3DCore::QSceneChangePtr &amp;change)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QItemModelBuffer</name>
        <filename>qt3drender-qitemmodelbuffer.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QItemModelBuffer</name>
            <anchorfile>qt3drender-qitemmodelbuffer.html</anchorfile>
            <anchor>QItemModelBuffer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setModel</name>
            <anchorfile>qt3drender-qitemmodelbuffer.html</anchorfile>
            <anchor>setModel</anchor>
            <arglist>(QAbstractItemModel *model)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRoot</name>
            <anchorfile>qt3drender-qitemmodelbuffer.html</anchorfile>
            <anchor>setRoot</anchor>
            <arglist>(const QModelIndex &amp;rootIndex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mapRoleName</name>
            <anchorfile>qt3drender-qitemmodelbuffer.html</anchorfile>
            <anchor>mapRoleName</anchor>
            <arglist>(QByteArray roleName, int type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mapRoleName</name>
            <anchorfile>qt3drender-qitemmodelbuffer.html</anchorfile>
            <anchor>mapRoleName-1</anchor>
            <arglist>(QByteArray roleName, QString attributeName, int type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBuffer *</type>
            <name>buffer</name>
            <anchorfile>qt3drender-qitemmodelbuffer.html</anchorfile>
            <anchor>buffer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>attributeNames</name>
            <anchorfile>qt3drender-qitemmodelbuffer.html</anchorfile>
            <anchor>attributeNames</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAttribute *</type>
            <name>attributeByName</name>
            <anchorfile>qt3drender-qitemmodelbuffer.html</anchorfile>
            <anchor>attributeByName</anchor>
            <arglist>(QString nm) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QLayer</name>
        <filename>qt3drender-qlayer.html</filename>
        <base>QComponent</base>
        <member kind="property" type="QStringList">
            <name>names</name>
            <anchorfile>qt3drender-qlayer.html</anchorfile>
            <anchor>names-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLayer</name>
            <anchorfile>qt3drender-qlayer.html</anchorfile>
            <anchor>QLayer</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLayer</name>
            <anchorfile>qt3drender-qlayer.html</anchorfile>
            <anchor>dtor.QLayer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>names</name>
            <anchorfile>qt3drender-qlayer.html</anchorfile>
            <anchor>names-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNames</name>
            <anchorfile>qt3drender-qlayer.html</anchorfile>
            <anchor>names-prop</anchor>
            <arglist>(const QStringList &amp;names)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>namesChanged</name>
            <anchorfile>qt3drender-qlayer.html</anchorfile>
            <anchor>names-prop</anchor>
            <arglist>(const QStringList &amp;names)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QLayer</name>
            <anchorfile>qt3drender-qlayer.html</anchorfile>
            <anchor>QLayer-1</anchor>
            <arglist>(QLayerPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qlayer.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>Qt3DRender::Render</name>
        <filename>qt3drender-render.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderAspect</name>
        <filename>qt3drender-qrenderaspect.html</filename>
        <base>QAbstractAspect</base>
        <member kind="enum">
            <name>RenderType</name>
            <anchor>RenderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Synchronous">
            <anchor>RenderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Threaded">
            <anchor>RenderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRenderAspect</name>
            <anchorfile>qt3drender-qrenderaspect.html</anchorfile>
            <anchor>QRenderAspect</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRenderAspect</name>
            <anchorfile>qt3drender-qrenderaspect.html</anchorfile>
            <anchor>QRenderAspect-1</anchor>
            <arglist>(RenderType type, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>renderInitialize</name>
            <anchorfile>qt3drender-qrenderaspect.html</anchorfile>
            <anchor>renderInitialize</anchor>
            <arglist>(QOpenGLContext *context)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>renderSynchronous</name>
            <anchorfile>qt3drender-qrenderaspect.html</anchorfile>
            <anchor>renderSynchronous</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>renderShutdown</name>
            <anchorfile>qt3drender-qrenderaspect.html</anchorfile>
            <anchor>renderShutdown</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVector&lt;Qt3DCore::QAspectJobPtr&gt;</type>
            <name>jobsToExecute</name>
            <anchorfile>qt3drender-qrenderaspect.html</anchorfile>
            <anchor>jobsToExecute</anchor>
            <arglist>(qint64 time)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>registerBackendTypes</name>
            <anchorfile>qt3drender-qrenderaspect.html</anchorfile>
            <anchor>registerBackendTypes</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QRenderAspect</name>
            <anchorfile>qt3drender-qrenderaspect.html</anchorfile>
            <anchor>QRenderAspect-2</anchor>
            <arglist>(QRenderAspectPrivate &amp;dd, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>onRootEntityChanged</name>
            <anchorfile>qt3drender-qrenderaspect.html</anchorfile>
            <anchor>onRootEntityChanged</anchor>
            <arglist>(Qt3DCore::QEntity *rootObject)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>onInitialize</name>
            <anchorfile>qt3drender-qrenderaspect.html</anchorfile>
            <anchor>onInitialize</anchor>
            <arglist>(const QVariantMap &amp;data)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>onCleanup</name>
            <anchorfile>qt3drender-qrenderaspect.html</anchorfile>
            <anchor>onCleanup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QVector&lt;Qt3DCore::QAspectJobPtr&gt;</type>
            <name>createRenderBufferJobs</name>
            <anchorfile>qt3drender-qrenderaspect.html</anchorfile>
            <anchor>createRenderBufferJobs</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QVector&lt;Qt3DCore::QAspectJobPtr&gt;</type>
            <name>createGeometryRendererJobs</name>
            <anchorfile>qt3drender-qrenderaspect.html</anchorfile>
            <anchor>createGeometryRendererJobs</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderAttachment</name>
        <filename>qt3drender-qrenderattachment.html</filename>
        <base>QNode</base>
        <member kind="property" type="RenderAttachmentType">
            <name>type</name>
            <anchorfile>qt3drender-qrenderattachment.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTextureProvider *">
            <name>texture</name>
            <anchorfile>qt3drender-qrenderattachment.html</anchorfile>
            <anchor>texture-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>mipLevel</name>
            <anchorfile>qt3drender-qrenderattachment.html</anchorfile>
            <anchor>mipLevel-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>layer</name>
            <anchorfile>qt3drender-qrenderattachment.html</anchorfile>
            <anchor>layer-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="CubeMapFace">
            <name>face</name>
            <anchorfile>qt3drender-qrenderattachment.html</anchorfile>
            <anchor>face-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>name</name>
            <anchorfile>qt3drender-qrenderattachment.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>RenderAttachmentType</name>
            <anchor>RenderAttachmentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ColorAttachment0">
            <anchor>RenderAttachmentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ColorAttachment1">
            <anchor>RenderAttachmentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ColorAttachment2">
            <anchor>RenderAttachmentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ColorAttachment3">
            <anchor>RenderAttachmentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ColorAttachment4">
            <anchor>RenderAttachmentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ColorAttachment5">
            <anchor>RenderAttachmentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ColorAttachment6">
            <anchor>RenderAttachmentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ColorAttachment7">
            <anchor>RenderAttachmentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ColorAttachment8">
            <anchor>RenderAttachmentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ColorAttachment9">
            <anchor>RenderAttachmentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ColorAttachment10">
            <anchor>RenderAttachmentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ColorAttachment11">
            <anchor>RenderAttachmentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ColorAttachment12">
            <anchor>RenderAttachmentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ColorAttachment13">
            <anchor>RenderAttachmentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ColorAttachment14">
            <anchor>RenderAttachmentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ColorAttachment15">
            <anchor>RenderAttachmentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DepthAttachment">
            <anchor>RenderAttachmentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StencilAttachment">
            <anchor>RenderAttachmentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DepthStencilAttachment">
            <anchor>RenderAttachmentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CubeMapFace</name>
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CubeMapPositiveX">
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CubeMapNegativeX">
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CubeMapPositiveY">
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CubeMapNegativeY">
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CubeMapPositiveZ">
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CubeMapNegativeZ">
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRenderAttachment</name>
            <anchorfile>qt3drender-qrenderattachment.html</anchorfile>
            <anchor>QRenderAttachment</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QRenderAttachment</name>
            <anchorfile>qt3drender-qrenderattachment.html</anchorfile>
            <anchor>dtor.QRenderAttachment</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>RenderAttachmentType</type>
            <name>type</name>
            <anchorfile>qt3drender-qrenderattachment.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractTextureProvider *</type>
            <name>texture</name>
            <anchorfile>qt3drender-qrenderattachment.html</anchorfile>
            <anchor>texture-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>mipLevel</name>
            <anchorfile>qt3drender-qrenderattachment.html</anchorfile>
            <anchor>mipLevel-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>layer</name>
            <anchorfile>qt3drender-qrenderattachment.html</anchorfile>
            <anchor>layer-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CubeMapFace</type>
            <name>face</name>
            <anchorfile>qt3drender-qrenderattachment.html</anchorfile>
            <anchor>face-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qt3drender-qrenderattachment.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setType</name>
            <anchorfile>qt3drender-qrenderattachment.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist>(RenderAttachmentType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTexture</name>
            <anchorfile>qt3drender-qrenderattachment.html</anchorfile>
            <anchor>texture-prop</anchor>
            <arglist>(QAbstractTextureProvider *texture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMipLevel</name>
            <anchorfile>qt3drender-qrenderattachment.html</anchorfile>
            <anchor>mipLevel-prop</anchor>
            <arglist>(int level)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLayer</name>
            <anchorfile>qt3drender-qrenderattachment.html</anchorfile>
            <anchor>layer-prop</anchor>
            <arglist>(int layer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFace</name>
            <anchorfile>qt3drender-qrenderattachment.html</anchorfile>
            <anchor>face-prop</anchor>
            <arglist>(CubeMapFace face)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qt3drender-qrenderattachment.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>typeChanged</name>
            <anchorfile>qt3drender-qrenderattachment.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist>(RenderAttachmentType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textureChanged</name>
            <anchorfile>qt3drender-qrenderattachment.html</anchorfile>
            <anchor>texture-prop</anchor>
            <arglist>(QAbstractTextureProvider *texture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mipLevelChanged</name>
            <anchorfile>qt3drender-qrenderattachment.html</anchorfile>
            <anchor>mipLevel-prop</anchor>
            <arglist>(int mipLevel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>layerChanged</name>
            <anchorfile>qt3drender-qrenderattachment.html</anchorfile>
            <anchor>layer-prop</anchor>
            <arglist>(int layer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>faceChanged</name>
            <anchorfile>qt3drender-qrenderattachment.html</anchorfile>
            <anchor>face-prop</anchor>
            <arglist>(CubeMapFace face)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nameChanged</name>
            <anchorfile>qt3drender-qrenderattachment.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QRenderAttachment</name>
            <anchorfile>qt3drender-qrenderattachment.html</anchorfile>
            <anchor>QRenderAttachment-1</anchor>
            <arglist>(QRenderAttachmentPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qrenderattachment.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderTarget</name>
        <filename>qt3drender-qrendertarget.html</filename>
        <base>QComponent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRenderTarget</name>
            <anchorfile>qt3drender-qrendertarget.html</anchorfile>
            <anchor>QRenderTarget</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QRenderTarget</name>
            <anchorfile>qt3drender-qrendertarget.html</anchorfile>
            <anchor>dtor.QRenderTarget</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addAttachment</name>
            <anchorfile>qt3drender-qrendertarget.html</anchorfile>
            <anchor>addAttachment</anchor>
            <arglist>(QRenderAttachment *attachment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAttachment</name>
            <anchorfile>qt3drender-qrendertarget.html</anchorfile>
            <anchor>removeAttachment</anchor>
            <arglist>(QRenderAttachment *attachment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QRenderAttachment *&gt;</type>
            <name>attachments</name>
            <anchorfile>qt3drender-qrendertarget.html</anchorfile>
            <anchor>attachments</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QRenderTarget</name>
            <anchorfile>qt3drender-qrendertarget.html</anchorfile>
            <anchor>QRenderTarget-1</anchor>
            <arglist>(QRenderTargetPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qrendertarget.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QWindow</name>
        <filename>qt3drender-qwindow.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QAbstractAttribute</name>
        <filename>qt3drender-qabstractattribute.html</filename>
        <base>QNode</base>
        <member kind="property" type="Qt3DRender::QAbstractBuffer *">
            <name>buffer</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>buffer-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>name</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="DataType">
            <name>dataType</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>dataType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>dataSize</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>dataSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>count</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>byteStride</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>byteStride-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>byteOffset</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>byteOffset-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>divisor</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>divisor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="AttributeType">
            <name>attributeType</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>attributeType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>AttributeType</name>
            <anchor>AttributeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VertexAttribute">
            <anchor>AttributeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IndexAttribute">
            <anchor>AttributeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>DataType</name>
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Byte">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnsignedByte">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Short">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnsignedShort">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Int">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnsignedInt">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HalfFloat">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Float">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Double">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractAttribute</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>QAbstractAttribute</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAbstractAttribute</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>dtor.QAbstractAttribute</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractAttribute</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>QAbstractAttribute-1</anchor>
            <arglist>(QAbstractBuffer *buf, DataType type, uint dataSize, uint count, uint offset, uint stride, QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractBuffer *</type>
            <name>buffer</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>buffer-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>DataType</type>
            <name>dataType</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>dataType-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>dataSize</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>dataSize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>count</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>byteStride</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>byteStride-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>byteOffset</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>byteOffset-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>divisor</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>divisor-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>AttributeType</type>
            <name>attributeType</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>attributeType-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QVector&lt;QVector4D&gt;</type>
            <name>asVector4D</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>asVector4D</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QVector&lt;QVector3D&gt;</type>
            <name>asVector3D</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>asVector3D</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QVector&lt;QVector2D&gt;</type>
            <name>asVector2D</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>asVector2D</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>dump</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>dump</anchor>
            <arglist>(int count) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBuffer</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>buffer-prop</anchor>
            <arglist>(QAbstractBuffer *buffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDataType</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>dataType-prop</anchor>
            <arglist>(DataType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDataSize</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>dataSize-prop</anchor>
            <arglist>(uint size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCount</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist>(uint count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setByteStride</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>byteStride-prop</anchor>
            <arglist>(uint byteStride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setByteOffset</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>byteOffset-prop</anchor>
            <arglist>(uint byteOffset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDivisor</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>divisor-prop</anchor>
            <arglist>(uint divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeType</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>attributeType-prop</anchor>
            <arglist>(AttributeType attributeType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bufferChanged</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>buffer-prop</anchor>
            <arglist>(QAbstractBuffer *buffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nameChanged</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dataTypeChanged</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>dataType-prop</anchor>
            <arglist>(DataType dataType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dataSizeChanged</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>dataSize-prop</anchor>
            <arglist>(uint dataSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>countChanged</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist>(uint count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>byteStrideChanged</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>byteStride-prop</anchor>
            <arglist>(uint byteStride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>byteOffsetChanged</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>byteOffset-prop</anchor>
            <arglist>(uint byteOffset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>divisorChanged</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>divisor-prop</anchor>
            <arglist>(uint divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>attributeTypeChanged</name>
            <anchorfile>qt3drender-qabstractattribute.html</anchorfile>
            <anchor>attributeType-prop</anchor>
            <arglist>(AttributeType attributeType)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QAbstractBuffer</name>
        <filename>qt3drender-qabstractbuffer.html</filename>
        <base>QNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractBuffer</name>
            <anchorfile>qt3drender-qabstractbuffer.html</anchorfile>
            <anchor>QAbstractBuffer</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractBuffer</name>
            <anchorfile>qt3drender-qabstractbuffer.html</anchorfile>
            <anchor>dtor.QAbstractBuffer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qt3drender-qabstractbuffer.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QByteArray &amp;bytes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>data</name>
            <anchorfile>qt3drender-qabstractbuffer.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dataChanged</name>
            <anchorfile>qt3drender-qabstractbuffer.html</anchorfile>
            <anchor>dataChanged</anchor>
            <arglist>(const QByteArray &amp;bytes)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QAttribute</name>
        <filename>qt3drender-qattribute.html</filename>
        <base>QAbstractAttribute</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAttribute</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>QAttribute</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAttribute</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>QAttribute-1</anchor>
            <arglist>(QBuffer *buf, DataType type, uint dataSize, int count, int offset, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAttribute</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>QAttribute-2</anchor>
            <arglist>(QBuffer *buf, const QString &amp;name, DataType type, uint dataSize, int count, int offset, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAttribute</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>dtor.QAttribute</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVector&lt;QVector4D&gt;</type>
            <name>asVector4D</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>asVector4D</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVector&lt;QVector3D&gt;</type>
            <name>asVector3D</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>asVector3D</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVector&lt;QVector2D&gt;</type>
            <name>asVector2D</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>asVector2D</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dump</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>dump</anchor>
            <arglist>(int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBuffer *</type>
            <name>buffer</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>buffer</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>defaultPositionAttributeName</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>defaultPositionAttributeName</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>defaultNormalAttributeName</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>defaultNormalAttributeName</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>defaultColorAttributeName</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>defaultColorAttributeName</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>defaultTextureCoordinateAttributeName</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>defaultTextureCoordinateAttributeName</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>defaultTangentAttributeName</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>defaultTangentAttributeName</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QBoundingVolumeSpecifier</name>
        <filename>qt3drender-qboundingvolumespecifier.html</filename>
        <base>QObject</base>
        <member kind="property" type="Qt3DRender::QAbstractAttribute *">
            <name>positionAttribute</name>
            <anchorfile>qt3drender-qboundingvolumespecifier.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBoundingVolumeSpecifier</name>
            <anchorfile>qt3drender-qboundingvolumespecifier.html</anchorfile>
            <anchor>QBoundingVolumeSpecifier</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractAttribute *</type>
            <name>positionAttribute</name>
            <anchorfile>qt3drender-qboundingvolumespecifier.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPositionAttribute</name>
            <anchorfile>qt3drender-qboundingvolumespecifier.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist>(QAbstractAttribute *positionAttribute)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>positionAttributeChanged</name>
            <anchorfile>qt3drender-qboundingvolumespecifier.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist>(QAbstractAttribute *positionAttribute)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QBuffer</name>
        <filename>qt3drender-qbuffer.html</filename>
        <base>QAbstractBuffer</base>
        <member kind="property" type="BufferType">
            <name>type</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="UsageType">
            <name>usage</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>usage-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>sync</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>sync-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>BufferType</name>
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VertexBuffer">
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IndexBuffer">
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PixelPackBuffer">
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PixelUnpackBuffer">
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>UsageType</name>
            <anchor>UsageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StreamDraw">
            <anchor>UsageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StreamRead">
            <anchor>UsageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StreamCopy">
            <anchor>UsageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StaticDraw">
            <anchor>UsageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StaticRead">
            <anchor>UsageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StaticCopy">
            <anchor>UsageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DynamicDraw">
            <anchor>UsageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DynamicRead">
            <anchor>UsageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DynamicCopy">
            <anchor>UsageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBuffer</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>QBuffer</anchor>
            <arglist>(BufferType ty, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QBuffer</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>dtor.QBuffer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>UsageType</type>
            <name>usage</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>usage-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>BufferType</type>
            <name>type</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSync</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>sync-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBufferFunctor</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>setBufferFunctor</anchor>
            <arglist>(const QBufferFunctorPtr &amp;functor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBufferFunctorPtr</type>
            <name>bufferFunctor</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>bufferFunctor</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setType</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist>(BufferType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUsage</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>usage-prop</anchor>
            <arglist>(UsageType usage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSync</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>sync-prop</anchor>
            <arglist>(bool sync)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QBuffer</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>QBuffer-1</anchor>
            <arglist>(QBufferPrivate &amp;dd, QBuffer::BufferType ty, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const Qt3DCore::QSceneChangePtr &amp;change)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>typeChanged</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist>(BufferType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>usageChanged</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>usage-prop</anchor>
            <arglist>(UsageType usage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>syncChanged</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>sync-prop</anchor>
            <arglist>(bool sync)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QBufferFunctor</name>
        <filename>qt3drender-qbufferfunctor.html</filename>
        <base>QAbstractFunctor</base>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QBufferFunctor</name>
            <anchorfile>qt3drender-qbufferfunctor.html</anchorfile>
            <anchor>dtor.QBufferFunctor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QByteArray</type>
            <name>operator()</name>
            <anchorfile>qt3drender-qbufferfunctor.html</anchorfile>
            <anchor>operator-28-29</anchor>
            <arglist>()() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>operator==</name>
            <anchorfile>qt3drender-qbufferfunctor.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QBufferFunctor &amp;other) const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QCuboidGeometry</name>
        <filename>qt3drender-qcuboidgeometry.html</filename>
        <base>QGeometry</base>
        <member kind="property" type="float">
            <name>xExtent</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>xExtent-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>yExtent</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>yExtent-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>zExtent</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>zExtent-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>xyMeshResolution</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>xyMeshResolution-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>yzMeshResolution</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>yzMeshResolution-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>xzMeshResolution</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>xzMeshResolution-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>positionAttribute</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>normalAttribute</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>texCoordAttribute</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>tangentAttribute</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>tangentAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>indexAttribute</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCuboidGeometry</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>QCuboidGeometry</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCuboidGeometry</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>dtor.QCuboidGeometry</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateIndices</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>updateIndices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateVertices</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>updateVertices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>xExtent</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>xExtent-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>yExtent</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>yExtent-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>zExtent</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>zExtent-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>yzMeshResolution</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>yzMeshResolution-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>xyMeshResolution</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>xyMeshResolution-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>xzMeshResolution</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>xzMeshResolution-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAttribute *</type>
            <name>positionAttribute</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAttribute *</type>
            <name>normalAttribute</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAttribute *</type>
            <name>texCoordAttribute</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAttribute *</type>
            <name>tangentAttribute</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>tangentAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAttribute *</type>
            <name>indexAttribute</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setXExtent</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>xExtent-prop</anchor>
            <arglist>(float xExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setYExtent</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>yExtent-prop</anchor>
            <arglist>(float yExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setZExtent</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>zExtent-prop</anchor>
            <arglist>(float zExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setYZMeshResolution</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>yzMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setXZMeshResolution</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>xzMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setXYMeshResolution</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>xyMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>xExtentChanged</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>xExtent-prop</anchor>
            <arglist>(float xExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>yExtentChanged</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>yExtent-prop</anchor>
            <arglist>(float yExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>zExtentChanged</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>zExtent-prop</anchor>
            <arglist>(float zExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>yzMeshResolutionChanged</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>yzMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;yzMeshResolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>xzMeshResolutionChanged</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>xzMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;xzMeshResolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>xyMeshResolutionChanged</name>
            <anchorfile>qt3drender-qcuboidgeometry.html</anchorfile>
            <anchor>xyMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;xyMeshResolution)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QCuboidMesh</name>
        <filename>qt3drender-qcuboidmesh.html</filename>
        <base>QGeometryRenderer</base>
        <member kind="property" type="float">
            <name>xExtent</name>
            <anchorfile>qt3drender-qcuboidmesh.html</anchorfile>
            <anchor>xExtent-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>yExtent</name>
            <anchorfile>qt3drender-qcuboidmesh.html</anchorfile>
            <anchor>yExtent-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>zExtent</name>
            <anchorfile>qt3drender-qcuboidmesh.html</anchorfile>
            <anchor>zExtent-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>yzMeshResolution</name>
            <anchorfile>qt3drender-qcuboidmesh.html</anchorfile>
            <anchor>yzMeshResolution-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>xzMeshResolution</name>
            <anchorfile>qt3drender-qcuboidmesh.html</anchorfile>
            <anchor>xzMeshResolution-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>xyMeshResolution</name>
            <anchorfile>qt3drender-qcuboidmesh.html</anchorfile>
            <anchor>xyMeshResolution-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCuboidMesh</name>
            <anchorfile>qt3drender-qcuboidmesh.html</anchorfile>
            <anchor>QCuboidMesh</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCuboidMesh</name>
            <anchorfile>qt3drender-qcuboidmesh.html</anchorfile>
            <anchor>dtor.QCuboidMesh</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>xExtent</name>
            <anchorfile>qt3drender-qcuboidmesh.html</anchorfile>
            <anchor>xExtent-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>yExtent</name>
            <anchorfile>qt3drender-qcuboidmesh.html</anchorfile>
            <anchor>yExtent-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>zExtent</name>
            <anchorfile>qt3drender-qcuboidmesh.html</anchorfile>
            <anchor>zExtent-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>yzMeshResolution</name>
            <anchorfile>qt3drender-qcuboidmesh.html</anchorfile>
            <anchor>yzMeshResolution-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>xzMeshResolution</name>
            <anchorfile>qt3drender-qcuboidmesh.html</anchorfile>
            <anchor>xzMeshResolution-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>xyMeshResolution</name>
            <anchorfile>qt3drender-qcuboidmesh.html</anchorfile>
            <anchor>xyMeshResolution-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setXExtent</name>
            <anchorfile>qt3drender-qcuboidmesh.html</anchorfile>
            <anchor>xExtent-prop</anchor>
            <arglist>(float xExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setYExtent</name>
            <anchorfile>qt3drender-qcuboidmesh.html</anchorfile>
            <anchor>yExtent-prop</anchor>
            <arglist>(float yExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setZExtent</name>
            <anchorfile>qt3drender-qcuboidmesh.html</anchorfile>
            <anchor>zExtent-prop</anchor>
            <arglist>(float zExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setYZMeshResolution</name>
            <anchorfile>qt3drender-qcuboidmesh.html</anchorfile>
            <anchor>yzMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setXZMeshResolution</name>
            <anchorfile>qt3drender-qcuboidmesh.html</anchorfile>
            <anchor>xzMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setXYMeshResolution</name>
            <anchorfile>qt3drender-qcuboidmesh.html</anchorfile>
            <anchor>xyMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>xExtentChanged</name>
            <anchorfile>qt3drender-qcuboidmesh.html</anchorfile>
            <anchor>xExtent-prop</anchor>
            <arglist>(float xExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>yExtentChanged</name>
            <anchorfile>qt3drender-qcuboidmesh.html</anchorfile>
            <anchor>yExtent-prop</anchor>
            <arglist>(float yExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>zExtentChanged</name>
            <anchorfile>qt3drender-qcuboidmesh.html</anchorfile>
            <anchor>zExtent-prop</anchor>
            <arglist>(float zExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>yzMeshResolutionChanged</name>
            <anchorfile>qt3drender-qcuboidmesh.html</anchorfile>
            <anchor>yzMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;yzMeshResolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>xzMeshResolutionChanged</name>
            <anchorfile>qt3drender-qcuboidmesh.html</anchorfile>
            <anchor>xzMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;xzMeshResolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>xyMeshResolutionChanged</name>
            <anchorfile>qt3drender-qcuboidmesh.html</anchorfile>
            <anchor>xyMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;xyMeshResolution)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QCylinderGeometry</name>
        <filename>qt3drender-qcylindergeometry.html</filename>
        <base>QGeometry</base>
        <member kind="property" type="int">
            <name>rings</name>
            <anchorfile>qt3drender-qcylindergeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>slices</name>
            <anchorfile>qt3drender-qcylindergeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>radius</name>
            <anchorfile>qt3drender-qcylindergeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>length</name>
            <anchorfile>qt3drender-qcylindergeometry.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>positionAttribute</name>
            <anchorfile>qt3drender-qcylindergeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>normalAttribute</name>
            <anchorfile>qt3drender-qcylindergeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>texCoordAttribute</name>
            <anchorfile>qt3drender-qcylindergeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>indexAttribute</name>
            <anchorfile>qt3drender-qcylindergeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCylinderGeometry</name>
            <anchorfile>qt3drender-qcylindergeometry.html</anchorfile>
            <anchor>QCylinderGeometry</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCylinderGeometry</name>
            <anchorfile>qt3drender-qcylindergeometry.html</anchorfile>
            <anchor>dtor.QCylinderGeometry</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateVertices</name>
            <anchorfile>qt3drender-qcylindergeometry.html</anchorfile>
            <anchor>updateVertices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateIndices</name>
            <anchorfile>qt3drender-qcylindergeometry.html</anchorfile>
            <anchor>updateIndices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rings</name>
            <anchorfile>qt3drender-qcylindergeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>slices</name>
            <anchorfile>qt3drender-qcylindergeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>radius</name>
            <anchorfile>qt3drender-qcylindergeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>length</name>
            <anchorfile>qt3drender-qcylindergeometry.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAttribute *</type>
            <name>positionAttribute</name>
            <anchorfile>qt3drender-qcylindergeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAttribute *</type>
            <name>normalAttribute</name>
            <anchorfile>qt3drender-qcylindergeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAttribute *</type>
            <name>texCoordAttribute</name>
            <anchorfile>qt3drender-qcylindergeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAttribute *</type>
            <name>indexAttribute</name>
            <anchorfile>qt3drender-qcylindergeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRings</name>
            <anchorfile>qt3drender-qcylindergeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSlices</name>
            <anchorfile>qt3drender-qcylindergeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRadius</name>
            <anchorfile>qt3drender-qcylindergeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLength</name>
            <anchorfile>qt3drender-qcylindergeometry.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>(float length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>radiusChanged</name>
            <anchorfile>qt3drender-qcylindergeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ringsChanged</name>
            <anchorfile>qt3drender-qcylindergeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>slicesChanged</name>
            <anchorfile>qt3drender-qcylindergeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lengthChanged</name>
            <anchorfile>qt3drender-qcylindergeometry.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>(float length)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QCylinderMesh</name>
        <filename>qt3drender-qcylindermesh.html</filename>
        <base>QGeometryRenderer</base>
        <member kind="property" type="int">
            <name>rings</name>
            <anchorfile>qt3drender-qcylindermesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>slices</name>
            <anchorfile>qt3drender-qcylindermesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>radius</name>
            <anchorfile>qt3drender-qcylindermesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>length</name>
            <anchorfile>qt3drender-qcylindermesh.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCylinderMesh</name>
            <anchorfile>qt3drender-qcylindermesh.html</anchorfile>
            <anchor>QCylinderMesh</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCylinderMesh</name>
            <anchorfile>qt3drender-qcylindermesh.html</anchorfile>
            <anchor>dtor.QCylinderMesh</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rings</name>
            <anchorfile>qt3drender-qcylindermesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>slices</name>
            <anchorfile>qt3drender-qcylindermesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>radius</name>
            <anchorfile>qt3drender-qcylindermesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>length</name>
            <anchorfile>qt3drender-qcylindermesh.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRings</name>
            <anchorfile>qt3drender-qcylindermesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSlices</name>
            <anchorfile>qt3drender-qcylindermesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRadius</name>
            <anchorfile>qt3drender-qcylindermesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLength</name>
            <anchorfile>qt3drender-qcylindermesh.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>(float length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>radiusChanged</name>
            <anchorfile>qt3drender-qcylindermesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ringsChanged</name>
            <anchorfile>qt3drender-qcylindermesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>slicesChanged</name>
            <anchorfile>qt3drender-qcylindermesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lengthChanged</name>
            <anchorfile>qt3drender-qcylindermesh.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>(float length)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QGeometry</name>
        <filename>qt3drender-qgeometry.html</filename>
        <base>QNode</base>
        <member kind="property" type="int">
            <name>verticesPerPatch</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>verticesPerPatch-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QBoundingVolumeSpecifier *">
            <name>boundingVolumeSpecifier</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>boundingVolumeSpecifier-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeometry</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>QGeometry</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeometry</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>dtor.QGeometry</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAttributeList</type>
            <name>attributes</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>attributes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addAttribute</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>addAttribute</anchor>
            <arglist>(QAbstractAttribute *attribute)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAttribute</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>removeAttribute</anchor>
            <arglist>(QAbstractAttribute *attribute)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>verticesPerPatch</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>verticesPerPatch-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBoundingVolumeSpecifier *</type>
            <name>boundingVolumeSpecifier</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>boundingVolumeSpecifier-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVerticesPerPatch</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>verticesPerPatch-prop</anchor>
            <arglist>(int verticesPerPatch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>verticesPerPatchChanged</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>verticesPerPatch-prop</anchor>
            <arglist>(int verticesPerPatch)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QGeometry</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>QGeometry-1</anchor>
            <arglist>(QGeometryPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QGeometryFunctor</name>
        <filename>qt3drender-qgeometryfunctor.html</filename>
        <base>QAbstractFunctor</base>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGeometryFunctor</name>
            <anchorfile>qt3drender-qgeometryfunctor.html</anchorfile>
            <anchor>dtor.QGeometryFunctor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QGeometry *</type>
            <name>operator()</name>
            <anchorfile>qt3drender-qgeometryfunctor.html</anchorfile>
            <anchor>operator-28-29</anchor>
            <arglist>()() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>operator==</name>
            <anchorfile>qt3drender-qgeometryfunctor.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QGeometryFunctor &amp;other) const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QGeometryRenderer</name>
        <filename>qt3drender-qgeometryrenderer.html</filename>
        <base>QComponent</base>
        <member kind="property" type="int">
            <name>instanceCount</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>instanceCount-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>primitiveCount</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>primitiveCount-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>baseVertex</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>baseVertex-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>baseInstance</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>baseInstance-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>restartIndex</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>restartIndex-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>primitiveRestart</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>primitiveRestart-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QGeometry *">
            <name>geometry</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>geometry-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="PrimitiveType">
            <name>primitiveType</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>primitiveType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeometryRenderer</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>QGeometryRenderer</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeometryRenderer</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>dtor.QGeometryRenderer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>PrimitiveType</name>
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Points">
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Lines">
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LineLoop">
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LineStrip">
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Triangles">
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TriangleStrip">
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TriangleFan">
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LinesAdjacency">
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TrianglesAdjacency">
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LineStripAdjacency">
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TriangleStripAdjacency">
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Patches">
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>instanceCount</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>instanceCount-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>primitiveCount</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>primitiveCount-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>baseVertex</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>baseVertex-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>baseInstance</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>baseInstance-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>restartIndex</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>restartIndex-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>primitiveRestart</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>primitiveRestart-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeometry *</type>
            <name>geometry</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>geometry-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>PrimitiveType</type>
            <name>primitiveType</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>primitiveType-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeometryFunctorPtr</type>
            <name>geometryFunctor</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>geometryFunctor</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGeometryFunctor</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>setGeometryFunctor</anchor>
            <arglist>(const QGeometryFunctorPtr &amp;functor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInstanceCount</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>instanceCount-prop</anchor>
            <arglist>(int instanceCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPrimitiveCount</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>primitiveCount-prop</anchor>
            <arglist>(int primitiveCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBaseVertex</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>baseVertex-prop</anchor>
            <arglist>(int baseVertex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBaseInstance</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>baseInstance-prop</anchor>
            <arglist>(int baseInstance)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRestartIndex</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>restartIndex-prop</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPrimitiveRestart</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>primitiveRestart-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGeometry</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>geometry-prop</anchor>
            <arglist>(QGeometry *geometry)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPrimitiveType</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>primitiveType-prop</anchor>
            <arglist>(PrimitiveType primitiveType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>instanceCountChanged</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>instanceCount-prop</anchor>
            <arglist>(int instanceCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>primitiveCountChanged</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>primitiveCount-prop</anchor>
            <arglist>(int primitiveCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>baseVertexChanged</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>baseVertex-prop</anchor>
            <arglist>(int baseVertex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>baseInstanceChanged</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>baseInstance-prop</anchor>
            <arglist>(int baseInstance)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>restartIndexChanged</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>restartIndex-prop</anchor>
            <arglist>(int restartIndex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>primitiveRestartChanged</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>primitiveRestart-prop</anchor>
            <arglist>(bool primitiveRestart)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>geometryChanged</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>geometry-prop</anchor>
            <arglist>(QGeometry *geometry)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>primitiveTypeChanged</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>primitiveType-prop</anchor>
            <arglist>(PrimitiveType primitiveType)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QGeometryRenderer</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>QGeometryRenderer-1</anchor>
            <arglist>(QGeometryRendererPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QMesh</name>
        <filename>qt3drender-qmesh.html</filename>
        <base>QGeometryRenderer</base>
        <member kind="property" type="QUrl">
            <name>source</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>subMesh</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>subMesh-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMesh</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>QMesh</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMesh</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>dtor.QMesh</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>source</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>subMesh</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>subMesh-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSource</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSubMesh</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>subMesh-prop</anchor>
            <arglist>(const QString &amp;subMesh)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceChanged</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>subMeshChanged</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>subMesh-prop</anchor>
            <arglist>(const QString &amp;subMesh)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QMesh</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>QMesh-1</anchor>
            <arglist>(QMeshPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QPlaneGeometry</name>
        <filename>qt3drender-qplanegeometry.html</filename>
        <base>QGeometry</base>
        <member kind="property" type="float">
            <name>width</name>
            <anchorfile>qt3drender-qplanegeometry.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>height</name>
            <anchorfile>qt3drender-qplanegeometry.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>resolution</name>
            <anchorfile>qt3drender-qplanegeometry.html</anchorfile>
            <anchor>resolution-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>positionAttribute</name>
            <anchorfile>qt3drender-qplanegeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>normalAttribute</name>
            <anchorfile>qt3drender-qplanegeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>texCoordAttribute</name>
            <anchorfile>qt3drender-qplanegeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>tangentAttribute</name>
            <anchorfile>qt3drender-qplanegeometry.html</anchorfile>
            <anchor>tangentAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>indexAttribute</name>
            <anchorfile>qt3drender-qplanegeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaneGeometry</name>
            <anchorfile>qt3drender-qplanegeometry.html</anchorfile>
            <anchor>QPlaneGeometry</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPlaneGeometry</name>
            <anchorfile>qt3drender-qplanegeometry.html</anchorfile>
            <anchor>dtor.QPlaneGeometry</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateVertices</name>
            <anchorfile>qt3drender-qplanegeometry.html</anchorfile>
            <anchor>updateVertices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateIndices</name>
            <anchorfile>qt3drender-qplanegeometry.html</anchorfile>
            <anchor>updateIndices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>resolution</name>
            <anchorfile>qt3drender-qplanegeometry.html</anchorfile>
            <anchor>resolution-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>width</name>
            <anchorfile>qt3drender-qplanegeometry.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>height</name>
            <anchorfile>qt3drender-qplanegeometry.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAttribute *</type>
            <name>positionAttribute</name>
            <anchorfile>qt3drender-qplanegeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAttribute *</type>
            <name>normalAttribute</name>
            <anchorfile>qt3drender-qplanegeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAttribute *</type>
            <name>texCoordAttribute</name>
            <anchorfile>qt3drender-qplanegeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAttribute *</type>
            <name>tangentAttribute</name>
            <anchorfile>qt3drender-qplanegeometry.html</anchorfile>
            <anchor>tangentAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAttribute *</type>
            <name>indexAttribute</name>
            <anchorfile>qt3drender-qplanegeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setResolution</name>
            <anchorfile>qt3drender-qplanegeometry.html</anchorfile>
            <anchor>resolution-prop</anchor>
            <arglist>(const QSize &amp;resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qt3drender-qplanegeometry.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(float width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qt3drender-qplanegeometry.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(float height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resolutionChanged</name>
            <anchorfile>qt3drender-qplanegeometry.html</anchorfile>
            <anchor>resolution-prop</anchor>
            <arglist>(const QSize &amp;resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>widthChanged</name>
            <anchorfile>qt3drender-qplanegeometry.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(float width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>heightChanged</name>
            <anchorfile>qt3drender-qplanegeometry.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(float height)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QPlaneMesh</name>
        <filename>qt3drender-qplanemesh.html</filename>
        <base>QGeometryRenderer</base>
        <member kind="property" type="float">
            <name>width</name>
            <anchorfile>qt3drender-qplanemesh.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>height</name>
            <anchorfile>qt3drender-qplanemesh.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>meshResolution</name>
            <anchorfile>qt3drender-qplanemesh.html</anchorfile>
            <anchor>meshResolution-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaneMesh</name>
            <anchorfile>qt3drender-qplanemesh.html</anchorfile>
            <anchor>QPlaneMesh</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPlaneMesh</name>
            <anchorfile>qt3drender-qplanemesh.html</anchorfile>
            <anchor>dtor.QPlaneMesh</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>width</name>
            <anchorfile>qt3drender-qplanemesh.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>height</name>
            <anchorfile>qt3drender-qplanemesh.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>meshResolution</name>
            <anchorfile>qt3drender-qplanemesh.html</anchorfile>
            <anchor>meshResolution-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qt3drender-qplanemesh.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(float width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qt3drender-qplanemesh.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(float height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMeshResolution</name>
            <anchorfile>qt3drender-qplanemesh.html</anchorfile>
            <anchor>meshResolution-prop</anchor>
            <arglist>(const QSize &amp;resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>meshResolutionChanged</name>
            <anchorfile>qt3drender-qplanemesh.html</anchorfile>
            <anchor>meshResolution-prop</anchor>
            <arglist>(const QSize &amp;meshResolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>widthChanged</name>
            <anchorfile>qt3drender-qplanemesh.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(float width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>heightChanged</name>
            <anchorfile>qt3drender-qplanemesh.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(float height)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QSphereGeometry</name>
        <filename>qt3drender-qspheregeometry.html</filename>
        <base>QGeometry</base>
        <member kind="property" type="int">
            <name>rings</name>
            <anchorfile>qt3drender-qspheregeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>slices</name>
            <anchorfile>qt3drender-qspheregeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>radius</name>
            <anchorfile>qt3drender-qspheregeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>generateTangents</name>
            <anchorfile>qt3drender-qspheregeometry.html</anchorfile>
            <anchor>generateTangents-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>positionAttribute</name>
            <anchorfile>qt3drender-qspheregeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>normalAttribute</name>
            <anchorfile>qt3drender-qspheregeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>texCoordAttribute</name>
            <anchorfile>qt3drender-qspheregeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>tangentAttribute</name>
            <anchorfile>qt3drender-qspheregeometry.html</anchorfile>
            <anchor>tangentAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>indexAttribute</name>
            <anchorfile>qt3drender-qspheregeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSphereGeometry</name>
            <anchorfile>qt3drender-qspheregeometry.html</anchorfile>
            <anchor>QSphereGeometry</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSphereGeometry</name>
            <anchorfile>qt3drender-qspheregeometry.html</anchorfile>
            <anchor>dtor.QSphereGeometry</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateVertices</name>
            <anchorfile>qt3drender-qspheregeometry.html</anchorfile>
            <anchor>updateVertices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateIndices</name>
            <anchorfile>qt3drender-qspheregeometry.html</anchorfile>
            <anchor>updateIndices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>generateTangents</name>
            <anchorfile>qt3drender-qspheregeometry.html</anchorfile>
            <anchor>generateTangents-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rings</name>
            <anchorfile>qt3drender-qspheregeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>slices</name>
            <anchorfile>qt3drender-qspheregeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>radius</name>
            <anchorfile>qt3drender-qspheregeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAttribute *</type>
            <name>positionAttribute</name>
            <anchorfile>qt3drender-qspheregeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAttribute *</type>
            <name>normalAttribute</name>
            <anchorfile>qt3drender-qspheregeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAttribute *</type>
            <name>texCoordAttribute</name>
            <anchorfile>qt3drender-qspheregeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAttribute *</type>
            <name>tangentAttribute</name>
            <anchorfile>qt3drender-qspheregeometry.html</anchorfile>
            <anchor>tangentAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAttribute *</type>
            <name>indexAttribute</name>
            <anchorfile>qt3drender-qspheregeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRings</name>
            <anchorfile>qt3drender-qspheregeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSlices</name>
            <anchorfile>qt3drender-qspheregeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRadius</name>
            <anchorfile>qt3drender-qspheregeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGenerateTangents</name>
            <anchorfile>qt3drender-qspheregeometry.html</anchorfile>
            <anchor>generateTangents-prop</anchor>
            <arglist>(bool gen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>radiusChanged</name>
            <anchorfile>qt3drender-qspheregeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ringsChanged</name>
            <anchorfile>qt3drender-qspheregeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>slicesChanged</name>
            <anchorfile>qt3drender-qspheregeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>generateTangentsChanged</name>
            <anchorfile>qt3drender-qspheregeometry.html</anchorfile>
            <anchor>generateTangents-prop</anchor>
            <arglist>(bool generateTangents)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QSphereMesh</name>
        <filename>qt3drender-qspheremesh.html</filename>
        <base>QGeometryRenderer</base>
        <member kind="property" type="int">
            <name>rings</name>
            <anchorfile>qt3drender-qspheremesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>slices</name>
            <anchorfile>qt3drender-qspheremesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>radius</name>
            <anchorfile>qt3drender-qspheremesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>generateTangents</name>
            <anchorfile>qt3drender-qspheremesh.html</anchorfile>
            <anchor>generateTangents-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSphereMesh</name>
            <anchorfile>qt3drender-qspheremesh.html</anchorfile>
            <anchor>QSphereMesh</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSphereMesh</name>
            <anchorfile>qt3drender-qspheremesh.html</anchorfile>
            <anchor>dtor.QSphereMesh</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rings</name>
            <anchorfile>qt3drender-qspheremesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>slices</name>
            <anchorfile>qt3drender-qspheremesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>radius</name>
            <anchorfile>qt3drender-qspheremesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>generateTangents</name>
            <anchorfile>qt3drender-qspheremesh.html</anchorfile>
            <anchor>generateTangents-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRings</name>
            <anchorfile>qt3drender-qspheremesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSlices</name>
            <anchorfile>qt3drender-qspheremesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRadius</name>
            <anchorfile>qt3drender-qspheremesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGenerateTangents</name>
            <anchorfile>qt3drender-qspheremesh.html</anchorfile>
            <anchor>generateTangents-prop</anchor>
            <arglist>(bool gen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>radiusChanged</name>
            <anchorfile>qt3drender-qspheremesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ringsChanged</name>
            <anchorfile>qt3drender-qspheremesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>slicesChanged</name>
            <anchorfile>qt3drender-qspheremesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>generateTangentsChanged</name>
            <anchorfile>qt3drender-qspheremesh.html</anchorfile>
            <anchor>generateTangents-prop</anchor>
            <arglist>(bool generateTangents)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTorusGeometry</name>
        <filename>qt3drender-qtorusgeometry.html</filename>
        <base>QGeometry</base>
        <member kind="property" type="int">
            <name>rings</name>
            <anchorfile>qt3drender-qtorusgeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>slices</name>
            <anchorfile>qt3drender-qtorusgeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>radius</name>
            <anchorfile>qt3drender-qtorusgeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>minorRadius</name>
            <anchorfile>qt3drender-qtorusgeometry.html</anchorfile>
            <anchor>minorRadius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>positionAttribute</name>
            <anchorfile>qt3drender-qtorusgeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>normalAttribute</name>
            <anchorfile>qt3drender-qtorusgeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>texCoordAttribute</name>
            <anchorfile>qt3drender-qtorusgeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute *">
            <name>indexAttribute</name>
            <anchorfile>qt3drender-qtorusgeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTorusGeometry</name>
            <anchorfile>qt3drender-qtorusgeometry.html</anchorfile>
            <anchor>QTorusGeometry</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTorusGeometry</name>
            <anchorfile>qt3drender-qtorusgeometry.html</anchorfile>
            <anchor>dtor.QTorusGeometry</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateVertices</name>
            <anchorfile>qt3drender-qtorusgeometry.html</anchorfile>
            <anchor>updateVertices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateIndices</name>
            <anchorfile>qt3drender-qtorusgeometry.html</anchorfile>
            <anchor>updateIndices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rings</name>
            <anchorfile>qt3drender-qtorusgeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>slices</name>
            <anchorfile>qt3drender-qtorusgeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>radius</name>
            <anchorfile>qt3drender-qtorusgeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>minorRadius</name>
            <anchorfile>qt3drender-qtorusgeometry.html</anchorfile>
            <anchor>minorRadius-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAttribute *</type>
            <name>positionAttribute</name>
            <anchorfile>qt3drender-qtorusgeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAttribute *</type>
            <name>normalAttribute</name>
            <anchorfile>qt3drender-qtorusgeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAttribute *</type>
            <name>texCoordAttribute</name>
            <anchorfile>qt3drender-qtorusgeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAttribute *</type>
            <name>indexAttribute</name>
            <anchorfile>qt3drender-qtorusgeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRings</name>
            <anchorfile>qt3drender-qtorusgeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSlices</name>
            <anchorfile>qt3drender-qtorusgeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRadius</name>
            <anchorfile>qt3drender-qtorusgeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinorRadius</name>
            <anchorfile>qt3drender-qtorusgeometry.html</anchorfile>
            <anchor>minorRadius-prop</anchor>
            <arglist>(float minorRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>radiusChanged</name>
            <anchorfile>qt3drender-qtorusgeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ringsChanged</name>
            <anchorfile>qt3drender-qtorusgeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>slicesChanged</name>
            <anchorfile>qt3drender-qtorusgeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>minorRadiusChanged</name>
            <anchorfile>qt3drender-qtorusgeometry.html</anchorfile>
            <anchor>minorRadius-prop</anchor>
            <arglist>(float minorRadius)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTorusMesh</name>
        <filename>qt3drender-qtorusmesh.html</filename>
        <base>QGeometryRenderer</base>
        <member kind="property" type="int">
            <name>rings</name>
            <anchorfile>qt3drender-qtorusmesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>slices</name>
            <anchorfile>qt3drender-qtorusmesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>radius</name>
            <anchorfile>qt3drender-qtorusmesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>minorRadius</name>
            <anchorfile>qt3drender-qtorusmesh.html</anchorfile>
            <anchor>minorRadius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTorusMesh</name>
            <anchorfile>qt3drender-qtorusmesh.html</anchorfile>
            <anchor>QTorusMesh</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTorusMesh</name>
            <anchorfile>qt3drender-qtorusmesh.html</anchorfile>
            <anchor>dtor.QTorusMesh</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rings</name>
            <anchorfile>qt3drender-qtorusmesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>slices</name>
            <anchorfile>qt3drender-qtorusmesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>radius</name>
            <anchorfile>qt3drender-qtorusmesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>minorRadius</name>
            <anchorfile>qt3drender-qtorusmesh.html</anchorfile>
            <anchor>minorRadius-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRings</name>
            <anchorfile>qt3drender-qtorusmesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSlices</name>
            <anchorfile>qt3drender-qtorusmesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRadius</name>
            <anchorfile>qt3drender-qtorusmesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinorRadius</name>
            <anchorfile>qt3drender-qtorusmesh.html</anchorfile>
            <anchor>minorRadius-prop</anchor>
            <arglist>(float minorRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>radiusChanged</name>
            <anchorfile>qt3drender-qtorusmesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ringsChanged</name>
            <anchorfile>qt3drender-qtorusmesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>slicesChanged</name>
            <anchorfile>qt3drender-qtorusmesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>minorRadiusChanged</name>
            <anchorfile>qt3drender-qtorusmesh.html</anchorfile>
            <anchor>minorRadius-prop</anchor>
            <arglist>(float minorRadius)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QAbstractSceneLoader</name>
        <filename>qt3drender-qabstractsceneloader.html</filename>
        <base>QComponent</base>
        <member kind="property" type="QUrl">
            <name>source</name>
            <anchorfile>qt3drender-qabstractsceneloader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Status">
            <name>status</name>
            <anchorfile>qt3drender-qabstractsceneloader.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractSceneLoader</name>
            <anchorfile>qt3drender-qabstractsceneloader.html</anchorfile>
            <anchor>QAbstractSceneLoader</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAbstractSceneLoader</name>
            <anchorfile>qt3drender-qabstractsceneloader.html</anchorfile>
            <anchor>dtor.QAbstractSceneLoader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>Status</name>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Loading">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Loaded">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Error">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>source</name>
            <anchorfile>qt3drender-qabstractsceneloader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Status</type>
            <name>status</name>
            <anchorfile>qt3drender-qabstractsceneloader.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSource</name>
            <anchorfile>qt3drender-qabstractsceneloader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>(const QUrl &amp;arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStatus</name>
            <anchorfile>qt3drender-qabstractsceneloader.html</anchorfile>
            <anchor>setStatus</anchor>
            <arglist>(Status status)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceChanged</name>
            <anchorfile>qt3drender-qabstractsceneloader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>statusChanged</name>
            <anchorfile>qt3drender-qabstractsceneloader.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>(Status status)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAbstractSceneLoader</name>
            <anchorfile>qt3drender-qabstractsceneloader.html</anchorfile>
            <anchor>QAbstractSceneLoader-1</anchor>
            <arglist>(QAbstractSceneLoaderPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qabstractsceneloader.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QAbstractSceneParser</name>
        <filename>qt3drender-qabstractsceneparser.html</filename>
        <base>QObject</base>
        <member kind="property" type="ParserStatus">
            <name>parserStatus</name>
            <anchorfile>qt3drender-qabstractsceneparser.html</anchorfile>
            <anchor>parserStatus-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QStringList">
            <name>errors</name>
            <anchorfile>qt3drender-qabstractsceneparser.html</anchorfile>
            <anchor>errors-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ParserStatus</name>
            <anchor>ParserStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Empty">
            <anchor>ParserStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Loading">
            <anchor>ParserStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Loaded">
            <anchor>ParserStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Error">
            <anchor>ParserStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractSceneParser</name>
            <anchorfile>qt3drender-qabstractsceneparser.html</anchorfile>
            <anchor>QAbstractSceneParser</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractSceneParser</name>
            <anchorfile>qt3drender-qabstractsceneparser.html</anchorfile>
            <anchor>dtor.QAbstractSceneParser</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>setSource</name>
            <anchorfile>qt3drender-qabstractsceneparser.html</anchorfile>
            <anchor>setSource</anchor>
            <arglist>(const QUrl &amp;source) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>isExtensionSupported</name>
            <anchorfile>qt3drender-qabstractsceneparser.html</anchorfile>
            <anchor>isExtensionSupported</anchor>
            <arglist>(const QUrl &amp;source) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual Qt3DCore::QEntity *</type>
            <name>scene</name>
            <anchorfile>qt3drender-qabstractsceneparser.html</anchorfile>
            <anchor>scene</anchor>
            <arglist>(const QString &amp;id) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual Qt3DCore::QEntity *</type>
            <name>node</name>
            <anchorfile>qt3drender-qabstractsceneparser.html</anchorfile>
            <anchor>node</anchor>
            <arglist>(const QString &amp;id) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ParserStatus</type>
            <name>parserStatus</name>
            <anchorfile>qt3drender-qabstractsceneparser.html</anchorfile>
            <anchor>parserStatus-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>errors</name>
            <anchorfile>qt3drender-qabstractsceneparser.html</anchorfile>
            <anchor>errors-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>parserStatusChanged</name>
            <anchorfile>qt3drender-qabstractsceneparser.html</anchorfile>
            <anchor>parserStatus-prop</anchor>
            <arglist>(ParserStatus parserStatus)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>errorsChanged</name>
            <anchorfile>qt3drender-qabstractsceneparser.html</anchorfile>
            <anchor>errors-prop</anchor>
            <arglist>(const QStringList &amp;errors)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setParserStatus</name>
            <anchorfile>qt3drender-qabstractsceneparser.html</anchorfile>
            <anchor>setParserStatus</anchor>
            <arglist>(ParserStatus parserStatus)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>logError</name>
            <anchorfile>qt3drender-qabstractsceneparser.html</anchorfile>
            <anchor>logError</anchor>
            <arglist>(const QString &amp;error)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>logInfo</name>
            <anchorfile>qt3drender-qabstractsceneparser.html</anchorfile>
            <anchor>logInfo</anchor>
            <arglist>(const QString &amp;info)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QSceneLoader</name>
        <filename>qt3drender-qsceneloader.html</filename>
        <base>QAbstractSceneLoader</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSceneLoader</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>QSceneLoader</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSceneLoader</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>dtor.QSceneLoader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const Qt3DCore::QSceneChangePtr &amp;change)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QSceneParserPlugin</name>
        <filename>qt3drender-qsceneparserplugin.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSceneParserPlugin</name>
            <anchorfile>qt3drender-qsceneparserplugin.html</anchorfile>
            <anchor>QSceneParserPlugin</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSceneParserPlugin</name>
            <anchorfile>qt3drender-qsceneparserplugin.html</anchorfile>
            <anchor>dtor.QSceneParserPlugin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QAbstractSceneParser *</type>
            <name>create</name>
            <anchorfile>qt3drender-qsceneparserplugin.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(const QString &amp;key, const QStringList &amp;paramList)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QDirectionalLight</name>
        <filename>qt3drender-qdirectionallight.html</filename>
        <base>QLight</base>
        <member kind="property" type="QVector3D">
            <name>direction</name>
            <anchorfile>qt3drender-qdirectionallight.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDirectionalLight</name>
            <anchorfile>qt3drender-qdirectionallight.html</anchorfile>
            <anchor>QDirectionalLight</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>direction</name>
            <anchorfile>qt3drender-qdirectionallight.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDirection</name>
            <anchorfile>qt3drender-qdirectionallight.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist>(const QVector3D &amp;direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>directionChanged</name>
            <anchorfile>qt3drender-qdirectionallight.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist>(const QVector3D &amp;direction)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QDirectionalLight</name>
            <anchorfile>qt3drender-qdirectionallight.html</anchorfile>
            <anchor>QDirectionalLight-1</anchor>
            <arglist>(QDirectionalLightPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qdirectionallight.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QLight</name>
        <filename>qt3drender-qlight.html</filename>
        <base>QShaderData</base>
        <member kind="property" type="Type">
            <name>type</name>
            <anchorfile>qt3drender-qlight.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>color</name>
            <anchorfile>qt3drender-qlight.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>intensity</name>
            <anchorfile>qt3drender-qlight.html</anchorfile>
            <anchor>intensity-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PointLight">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirectionalLight">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SpotLight">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLight</name>
            <anchorfile>qt3drender-qlight.html</anchorfile>
            <anchor>QLight</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLight</name>
            <anchorfile>qt3drender-qlight.html</anchorfile>
            <anchor>dtor.QLight</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Type</type>
            <name>type</name>
            <anchorfile>qt3drender-qlight.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>color</name>
            <anchorfile>qt3drender-qlight.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>intensity</name>
            <anchorfile>qt3drender-qlight.html</anchorfile>
            <anchor>intensity-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setType</name>
            <anchorfile>qt3drender-qlight.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist>(Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColor</name>
            <anchorfile>qt3drender-qlight.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIntensity</name>
            <anchorfile>qt3drender-qlight.html</anchorfile>
            <anchor>intensity-prop</anchor>
            <arglist>(float intensity)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QLight</name>
            <anchorfile>qt3drender-qlight.html</anchorfile>
            <anchor>QLight-1</anchor>
            <arglist>(QLightPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qlight.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>typeChanged</name>
            <anchorfile>qt3drender-qlight.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist>(Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>colorChanged</name>
            <anchorfile>qt3drender-qlight.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>intensityChanged</name>
            <anchorfile>qt3drender-qlight.html</anchorfile>
            <anchor>intensity-prop</anchor>
            <arglist>(float intensity)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QPointLight</name>
        <filename>qt3drender-qpointlight.html</filename>
        <base>QLight</base>
        <member kind="property" type="QVector3D">
            <name>attenuation</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>attenuation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPointLight</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>QPointLight</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>attenuation</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>attenuation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>constantAttenuation</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>constantAttenuation</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setConstantAttenuation</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>setConstantAttenuation</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>linearAttenuation</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>linearAttenuation</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLinearAttenuation</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>setLinearAttenuation</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>quadraticAttenuation</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>quadraticAttenuation</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQuadraticAttenuation</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>setQuadraticAttenuation</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttenuation</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>attenuation-prop</anchor>
            <arglist>(const QVector3D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>attenuationChanged</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>attenuation-prop</anchor>
            <arglist>(const QVector3D &amp;attenuation)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QPointLight</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>QPointLight-1</anchor>
            <arglist>(QPointLightPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QSpotLight</name>
        <filename>qt3drender-qspotlight.html</filename>
        <base>QPointLight</base>
        <member kind="property" type="QVector3D">
            <name>direction</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>cutOffAngle</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>cutOffAngle-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSpotLight</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>QSpotLight</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>direction</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>cutOffAngle</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>cutOffAngle-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDirection</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist>(const QVector3D &amp;direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCutOffAngle</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>cutOffAngle-prop</anchor>
            <arglist>(float cutOffAngle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>directionChanged</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist>(const QVector3D &amp;direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cutOffAngleChanged</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>cutOffAngle-prop</anchor>
            <arglist>(float cutOffAngle)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QSpotLight</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>QSpotLight-1</anchor>
            <arglist>(QSpotLightPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QAnnotation</name>
        <filename>qt3drender-qannotation.html</filename>
        <base>QNode</base>
        <member kind="property" type="QVariant">
            <name>value</name>
            <anchorfile>qt3drender-qannotation.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>name</name>
            <anchorfile>qt3drender-qannotation.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAnnotation</name>
            <anchorfile>qt3drender-qannotation.html</anchorfile>
            <anchor>QAnnotation</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAnnotation</name>
            <anchorfile>qt3drender-qannotation.html</anchorfile>
            <anchor>dtor.QAnnotation</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>value</name>
            <anchorfile>qt3drender-qannotation.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qt3drender-qannotation.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qt3drender-qannotation.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qt3drender-qannotation.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;customType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nameChanged</name>
            <anchorfile>qt3drender-qannotation.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>valueChanged</name>
            <anchorfile>qt3drender-qannotation.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qannotation.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QEffect</name>
        <filename>qt3drender-qeffect.html</filename>
        <base>QNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QEffect</name>
            <anchorfile>qt3drender-qeffect.html</anchorfile>
            <anchor>QEffect</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QEffect</name>
            <anchorfile>qt3drender-qeffect.html</anchorfile>
            <anchor>dtor.QEffect</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addParameter</name>
            <anchorfile>qt3drender-qeffect.html</anchorfile>
            <anchor>addParameter</anchor>
            <arglist>(QParameter *parameter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeParameter</name>
            <anchorfile>qt3drender-qeffect.html</anchorfile>
            <anchor>removeParameter</anchor>
            <arglist>(QParameter *parameter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QParameter *&gt;</type>
            <name>parameters</name>
            <anchorfile>qt3drender-qeffect.html</anchorfile>
            <anchor>parameters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>addTechnique</name>
            <anchorfile>qt3drender-qeffect.html</anchorfile>
            <anchor>addTechnique</anchor>
            <arglist>(QTechnique *t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>removeTechnique</name>
            <anchorfile>qt3drender-qeffect.html</anchorfile>
            <anchor>removeTechnique</anchor>
            <arglist>(QTechnique *t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QTechnique *&gt;</type>
            <name>techniques</name>
            <anchorfile>qt3drender-qeffect.html</anchorfile>
            <anchor>techniques</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QEffect</name>
            <anchorfile>qt3drender-qeffect.html</anchorfile>
            <anchor>QEffect-1</anchor>
            <arglist>(QEffectPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qeffect.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QGraphicsApiFilter</name>
        <filename>qt3drender-qgraphicsapifilter.html</filename>
        <base>QObject</base>
        <member kind="property" type="Qt3DRender::QGraphicsApiFilter::Api">
            <name>api</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>api-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QGraphicsApiFilter::Profile">
            <name>profile</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>profile-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>minorVersion</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>minorVersion-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>majorVersion</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>majorVersion-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QStringList">
            <name>extensions</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>extensions-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>vendor</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>vendor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Api</name>
            <anchor>Api-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OpenGLES">
            <anchor>Api-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OpenGL">
            <anchor>Api-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Profile</name>
            <anchor>Profile-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoProfile">
            <anchor>Profile-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CoreProfile">
            <anchor>Profile-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompatibilityProfile">
            <anchor>Profile-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsApiFilter</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>QGraphicsApiFilter</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const QGraphicsApiFilter &amp;ref)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Api</type>
            <name>api</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>api-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Profile</type>
            <name>profile</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>profile-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minorVersion</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>minorVersion-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>majorVersion</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>majorVersion-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>extensions</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>extensions-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>vendor</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>vendor-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setApi</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>api-prop</anchor>
            <arglist>(Api api)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProfile</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>profile-prop</anchor>
            <arglist>(Profile profile)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinorVersion</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>minorVersion-prop</anchor>
            <arglist>(int minorVersion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMajorVersion</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>majorVersion-prop</anchor>
            <arglist>(int majorVersion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExtensions</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>extensions-prop</anchor>
            <arglist>(const QStringList &amp;extensions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVendor</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>vendor-prop</anchor>
            <arglist>(const QString &amp;vendor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>apiChanged</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>api-prop</anchor>
            <arglist>(Api api)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>profileChanged</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>profile-prop</anchor>
            <arglist>(Profile profile)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>minorVersionChanged</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>minorVersion-prop</anchor>
            <arglist>(int minorVersion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>majorVersionChanged</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>majorVersion-prop</anchor>
            <arglist>(int majorVersion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>extensionsChanged</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>extensions-prop</anchor>
            <arglist>(const QStringList &amp;extensions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>vendorChanged</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>vendor-prop</anchor>
            <arglist>(const QString &amp;vendor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>graphicsApiFilterChanged</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>graphicsApiFilterChanged</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QMaterial</name>
        <filename>qt3drender-qmaterial.html</filename>
        <base>QComponent</base>
        <member kind="property" type="Qt3DRender::QEffect *">
            <name>effect</name>
            <anchorfile>qt3drender-qmaterial.html</anchorfile>
            <anchor>effect-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMaterial</name>
            <anchorfile>qt3drender-qmaterial.html</anchorfile>
            <anchor>QMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMaterial</name>
            <anchorfile>qt3drender-qmaterial.html</anchorfile>
            <anchor>dtor.QMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEffect *</type>
            <name>effect</name>
            <anchorfile>qt3drender-qmaterial.html</anchorfile>
            <anchor>effect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addParameter</name>
            <anchorfile>qt3drender-qmaterial.html</anchorfile>
            <anchor>addParameter</anchor>
            <arglist>(QParameter *parameter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeParameter</name>
            <anchorfile>qt3drender-qmaterial.html</anchorfile>
            <anchor>removeParameter</anchor>
            <arglist>(QParameter *parameter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QParameter *&gt;</type>
            <name>parameters</name>
            <anchorfile>qt3drender-qmaterial.html</anchorfile>
            <anchor>parameters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>TextureDict</type>
            <name>textureValues</name>
            <anchorfile>qt3drender-qmaterial.html</anchorfile>
            <anchor>textureValues</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureParameter</name>
            <anchorfile>qt3drender-qmaterial.html</anchorfile>
            <anchor>setTextureParameter</anchor>
            <arglist>(QString name, QAbstractTextureProvider *tex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEffect</name>
            <anchorfile>qt3drender-qmaterial.html</anchorfile>
            <anchor>setEffect</anchor>
            <arglist>(QEffect *effect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>effectChanged</name>
            <anchorfile>qt3drender-qmaterial.html</anchorfile>
            <anchor>effect-prop</anchor>
            <arglist>(QEffect *effect)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QMaterial</name>
            <anchorfile>qt3drender-qmaterial.html</anchorfile>
            <anchor>QMaterial-1</anchor>
            <arglist>(QMaterialPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qmaterial.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QParameter</name>
        <filename>qt3drender-qparameter.html</filename>
        <base>QNode</base>
        <member kind="property" type="QString">
            <name>name</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariant">
            <name>value</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QParameter</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>QParameter</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QParameter</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>dtor.QParameter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QParameter</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>QParameter-1</anchor>
            <arglist>(const QString &amp;name, const QVariant &amp;value, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QParameter</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>QParameter-2</anchor>
            <arglist>(const QString &amp;name, QAbstractTextureProvider *texture, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>value</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(const QVariant &amp;dv)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>valueChanged</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nameChanged</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QParameter</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>QParameter-3</anchor>
            <arglist>(QParameterPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QParameterMapping</name>
        <filename>qt3drender-qparametermapping.html</filename>
        <base>QNode</base>
        <member kind="property" type="QString">
            <name>parameterName</name>
            <anchorfile>qt3drender-qparametermapping.html</anchorfile>
            <anchor>parameterName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>shaderVariableName</name>
            <anchorfile>qt3drender-qparametermapping.html</anchorfile>
            <anchor>shaderVariableName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Binding">
            <name>bindingType</name>
            <anchorfile>qt3drender-qparametermapping.html</anchorfile>
            <anchor>bindingType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Binding</name>
            <anchor>Binding-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Uniform">
            <anchor>Binding-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Attribute">
            <anchor>Binding-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StandardUniform">
            <anchor>Binding-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FragmentOutput">
            <anchor>Binding-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UniformBufferObject">
            <anchor>Binding-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShaderStorageBufferObject">
            <anchor>Binding-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QParameterMapping</name>
            <anchorfile>qt3drender-qparametermapping.html</anchorfile>
            <anchor>QParameterMapping</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QParameterMapping</name>
            <anchorfile>qt3drender-qparametermapping.html</anchorfile>
            <anchor>QParameterMapping-1</anchor>
            <arglist>(const QString &amp;parameterName, const QString &amp;shaderParameterName, QParameterMapping::Binding bindingType, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QParameterMapping</name>
            <anchorfile>qt3drender-qparametermapping.html</anchorfile>
            <anchor>dtor.QParameterMapping</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>parameterName</name>
            <anchorfile>qt3drender-qparametermapping.html</anchorfile>
            <anchor>parameterName-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>shaderVariableName</name>
            <anchorfile>qt3drender-qparametermapping.html</anchorfile>
            <anchor>shaderVariableName-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Binding</type>
            <name>bindingType</name>
            <anchorfile>qt3drender-qparametermapping.html</anchorfile>
            <anchor>bindingType-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setParameterName</name>
            <anchorfile>qt3drender-qparametermapping.html</anchorfile>
            <anchor>parameterName-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShaderVariableName</name>
            <anchorfile>qt3drender-qparametermapping.html</anchorfile>
            <anchor>shaderVariableName-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBindingType</name>
            <anchorfile>qt3drender-qparametermapping.html</anchorfile>
            <anchor>bindingType-prop</anchor>
            <arglist>(Binding type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>parameterNameChanged</name>
            <anchorfile>qt3drender-qparametermapping.html</anchorfile>
            <anchor>parameterName-prop</anchor>
            <arglist>(const QString &amp;parameterName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shaderVariableNameChanged</name>
            <anchorfile>qt3drender-qparametermapping.html</anchorfile>
            <anchor>shaderVariableName-prop</anchor>
            <arglist>(const QString &amp;shaderVariableName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bindingTypeChanged</name>
            <anchorfile>qt3drender-qparametermapping.html</anchorfile>
            <anchor>bindingType-prop</anchor>
            <arglist>(Binding bindingType)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QParameterMapping</name>
            <anchorfile>qt3drender-qparametermapping.html</anchorfile>
            <anchor>QParameterMapping-2</anchor>
            <arglist>(QParameterMappingPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qparametermapping.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderPass</name>
        <filename>qt3drender-qrenderpass.html</filename>
        <base>QNode</base>
        <member kind="property" type="Qt3DRender::QShaderProgram *">
            <name>shaderProgram</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>shaderProgram-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRenderPass</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>QRenderPass</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QRenderPass</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>dtor.QRenderPass</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>glslNameForParameter</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>glslNameForParameter</anchor>
            <arglist>(QString paramName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ParameterList</type>
            <name>attributes</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>attributes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ParameterList</type>
            <name>uniforms</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>uniforms</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QShaderProgram *</type>
            <name>shaderProgram</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>shaderProgram-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addAnnotation</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>addAnnotation</anchor>
            <arglist>(QAnnotation *criterion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAnnotation</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>removeAnnotation</anchor>
            <arglist>(QAnnotation *criterion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QAnnotation *&gt;</type>
            <name>annotations</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>annotations</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addBinding</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>addBinding</anchor>
            <arglist>(QParameterMapping *binding)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeBinding</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>removeBinding</anchor>
            <arglist>(QParameterMapping *binding)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QParameterMapping *&gt;</type>
            <name>bindings</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>bindings</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRenderState</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>addRenderState</anchor>
            <arglist>(QRenderState *state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeRenderState</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>removeRenderState</anchor>
            <arglist>(QRenderState *state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QRenderState *&gt;</type>
            <name>renderStates</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>renderStates</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addParameter</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>addParameter</anchor>
            <arglist>(QParameter *p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeParameter</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>removeParameter</anchor>
            <arglist>(QParameter *p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QParameter *&gt;</type>
            <name>parameters</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>parameters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShaderProgram</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>shaderProgram-prop</anchor>
            <arglist>(QShaderProgram *shaderProgram)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shaderProgramChanged</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>shaderProgram-prop</anchor>
            <arglist>(QShaderProgram *shaderProgram)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QRenderPass</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>QRenderPass-1</anchor>
            <arglist>(QRenderPassPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::PropertyReaderInterface</name>
        <filename>qt3drender-propertyreaderinterface.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~PropertyReaderInterface</name>
            <anchorfile>qt3drender-propertyreaderinterface.html</anchorfile>
            <anchor>dtor.PropertyReaderInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QVariant</type>
            <name>readProperty</name>
            <anchorfile>qt3drender-propertyreaderinterface.html</anchorfile>
            <anchor>readProperty</anchor>
            <arglist>(const QVariant &amp;v) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QShaderData</name>
        <filename>qt3drender-qshaderdata.html</filename>
        <base>QComponent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QShaderData</name>
            <anchorfile>qt3drender-qshaderdata.html</anchorfile>
            <anchor>QShaderData</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QShaderData</name>
            <anchorfile>qt3drender-qshaderdata.html</anchorfile>
            <anchor>dtor.QShaderData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>TransformType</name>
            <anchor>TransformType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ModelToEye">
            <anchor>TransformType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ModelToWorld">
            <anchor>TransformType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>PropertyReaderInterfacePtr</type>
            <name>propertyReader</name>
            <anchorfile>qt3drender-qshaderdata.html</anchorfile>
            <anchor>propertyReader</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QShaderData</name>
            <anchorfile>qt3drender-qshaderdata.html</anchorfile>
            <anchor>QShaderData-1</anchor>
            <arglist>(QShaderDataPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qshaderdata.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QShaderProgram</name>
        <filename>qt3drender-qshaderprogram.html</filename>
        <base>QNode</base>
        <member kind="property" type="QByteArray">
            <name>vertexShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>vertexShaderCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QByteArray">
            <name>tessellationControlShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>tessellationControlShaderCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QByteArray">
            <name>tessellationEvaluationShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>tessellationEvaluationShaderCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QByteArray">
            <name>geometryShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>geometryShaderCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QByteArray">
            <name>fragmentShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>fragmentShaderCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QByteArray">
            <name>computeShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>computeShaderCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QShaderProgram</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>QShaderProgram</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QShaderProgram</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>dtor.QShaderProgram</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>ShaderType</name>
            <anchor>ShaderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Vertex">
            <anchor>ShaderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Fragment">
            <anchor>ShaderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TessellationControl">
            <anchor>ShaderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TessellationEvaluation">
            <anchor>ShaderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Geometry">
            <anchor>ShaderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Compute">
            <anchor>ShaderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>vertexShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>vertexShaderCode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>tessellationControlShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>tessellationControlShaderCode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>tessellationEvaluationShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>tessellationEvaluationShaderCode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>geometryShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>geometryShaderCode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>fragmentShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>fragmentShaderCode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>computeShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>computeShaderCode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>setShaderCode</anchor>
            <arglist>(ShaderType type, const QByteArray &amp;shaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>shaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>shaderCode</anchor>
            <arglist>(ShaderType type) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>loadSource</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>loadSource</anchor>
            <arglist>(const QUrl &amp;sourceUrl)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVertexShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>vertexShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;vertexShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTessellationControlShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>tessellationControlShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;tessellationControlShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTessellationEvaluationShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>tessellationEvaluationShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;tessellationEvaluationShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGeometryShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>geometryShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;geometryShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFragmentShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>fragmentShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;fragmentShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setComputeShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>computeShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;computeShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>vertexShaderCodeChanged</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>vertexShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;vertexShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tessellationControlShaderCodeChanged</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>tessellationControlShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;tessellationControlShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tessellationEvaluationShaderCodeChanged</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>tessellationEvaluationShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;tessellationEvaluationShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>geometryShaderCodeChanged</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>geometryShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;geometryShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fragmentShaderCodeChanged</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>fragmentShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;fragmentShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>computeShaderCodeChanged</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>computeShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;computeShaderCode)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QShaderProgram</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>QShaderProgram-1</anchor>
            <arglist>(QShaderProgramPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTechnique</name>
        <filename>qt3drender-qtechnique.html</filename>
        <base>QNode</base>
        <member kind="property" type="Qt3DRender::QGraphicsApiFilter *">
            <name>graphicsApiFilter</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>graphicsApiFilter-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTechnique</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>QTechnique</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTechnique</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>dtor.QTechnique</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addAnnotation</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>addAnnotation</anchor>
            <arglist>(QAnnotation *criterion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAnnotation</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>removeAnnotation</anchor>
            <arglist>(QAnnotation *criterion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QAnnotation *&gt;</type>
            <name>annotations</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>annotations</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addParameter</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>addParameter</anchor>
            <arglist>(QParameter *p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeParameter</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>removeParameter</anchor>
            <arglist>(QParameter *p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QParameter *&gt;</type>
            <name>parameters</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>parameters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addPass</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>addPass</anchor>
            <arglist>(QRenderPass *pass)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removePass</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>removePass</anchor>
            <arglist>(QRenderPass *pass)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QRenderPass *&gt;</type>
            <name>renderPasses</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>renderPasses</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsApiFilter *</type>
            <name>graphicsApiFilter</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>graphicsApiFilter-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QTechnique</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>QTechnique-1</anchor>
            <arglist>(QTechniquePrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QObjectPicker</name>
        <filename>qt3drender-qobjectpicker.html</filename>
        <base>QComponent</base>
        <member kind="property" type="bool">
            <name>hoverEnabled</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>hoverEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>pressed</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>pressed-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>containsMouse</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>containsMouse-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QObjectPicker</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>QObjectPicker</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QObjectPicker</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>dtor.QObjectPicker</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hoverEnabled</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>hoverEnabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>containsMouse</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>containsMouse-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isPressed</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>pressed-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHoverEnabled</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>hoverEnabled-prop</anchor>
            <arglist>(bool hoverEnabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pressed</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>pressed</anchor>
            <arglist>(Qt3DRender::QPickEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>released</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>released</anchor>
            <arglist>(Qt3DRender::QPickEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clicked</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>clicked</anchor>
            <arglist>(Qt3DRender::QPickEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>entered</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>entered</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>exited</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>exited</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hoverEnabledChanged</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>hoverEnabled-prop</anchor>
            <arglist>(bool hoverEnabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pressedChanged</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>pressed-prop</anchor>
            <arglist>(bool pressed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>containsMouseChanged</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>containsMouse-prop</anchor>
            <arglist>(bool containsMouse)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const Qt3DCore::QSceneChangePtr &amp;change)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QPickEvent</name>
        <filename>qt3drender-qpickevent.html</filename>
        <base>QObject</base>
        <member kind="property" type="bool">
            <name>accepted</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPickEvent</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>QPickEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPickEvent</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>dtor.QPickEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAccepted</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccepted</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist>(bool accepted)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>acceptedChanged</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist>(bool accepted)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QAlphaCoverage</name>
        <filename>qt3drender-qalphacoverage.html</filename>
        <base>QRenderState</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAlphaCoverage</name>
            <anchorfile>qt3drender-qalphacoverage.html</anchorfile>
            <anchor>QAlphaCoverage</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAlphaCoverage</name>
            <anchorfile>qt3drender-qalphacoverage.html</anchorfile>
            <anchor>dtor.QAlphaCoverage</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QAlphaTest</name>
        <filename>qt3drender-qalphatest.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="AlphaFunc">
            <name>func</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>func-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>clamp</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>clamp-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>AlphaFunc</name>
            <anchor>AlphaFunc-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Never">
            <anchor>AlphaFunc-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Always">
            <anchor>AlphaFunc-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Less">
            <anchor>AlphaFunc-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LessOrEqual">
            <anchor>AlphaFunc-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Equal">
            <anchor>AlphaFunc-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GreaterOrEqual">
            <anchor>AlphaFunc-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Greater">
            <anchor>AlphaFunc-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotEqual">
            <anchor>AlphaFunc-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAlphaTest</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>QAlphaTest</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAlphaTest</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>dtor.QAlphaTest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>AlphaFunc</type>
            <name>func</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>func-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>clamp</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>clamp-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFunc</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>func-prop</anchor>
            <arglist>(AlphaFunc func)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClamp</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>clamp-prop</anchor>
            <arglist>(float clamp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>funcChanged</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>func-prop</anchor>
            <arglist>(AlphaFunc func)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clampChanged</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>clamp-prop</anchor>
            <arglist>(float clamp)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QBlendEquation</name>
        <filename>qt3drender-qblendequation.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="BlendMode">
            <name>mode</name>
            <anchorfile>qt3drender-qblendequation.html</anchorfile>
            <anchor>mode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>BlendMode</name>
            <anchor>BlendMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FuncAdd">
            <anchor>BlendMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FuncSubstract">
            <anchor>BlendMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FuncReverseSubstract">
            <anchor>BlendMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Min">
            <anchor>BlendMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Max">
            <anchor>BlendMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBlendEquation</name>
            <anchorfile>qt3drender-qblendequation.html</anchorfile>
            <anchor>QBlendEquation</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QBlendEquation</name>
            <anchorfile>qt3drender-qblendequation.html</anchorfile>
            <anchor>dtor.QBlendEquation</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>BlendMode</type>
            <name>mode</name>
            <anchorfile>qt3drender-qblendequation.html</anchorfile>
            <anchor>mode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMode</name>
            <anchorfile>qt3drender-qblendequation.html</anchorfile>
            <anchor>mode-prop</anchor>
            <arglist>(BlendMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>modeChanged</name>
            <anchorfile>qt3drender-qblendequation.html</anchorfile>
            <anchor>mode-prop</anchor>
            <arglist>(BlendMode mode)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qblendequation.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QBlendState</name>
        <filename>qt3drender-qblendstate.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="Blending">
            <name>srcRGB</name>
            <anchorfile>qt3drender-qblendstate.html</anchorfile>
            <anchor>srcRGB-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Blending">
            <name>srcAlpha</name>
            <anchorfile>qt3drender-qblendstate.html</anchorfile>
            <anchor>srcAlpha-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Blending">
            <name>dstRGB</name>
            <anchorfile>qt3drender-qblendstate.html</anchorfile>
            <anchor>dstRGB-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Blending">
            <name>dstAlpha</name>
            <anchorfile>qt3drender-qblendstate.html</anchorfile>
            <anchor>dstAlpha-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Blending</name>
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Zero">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="One">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SrcColor">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SrcAlpha">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Src1Alpha">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Src1Color">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DstColor">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DstAlpha">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SrcAlphaSaturate">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConstantColor">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConstantAlpha">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OneMinusSrcColor">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OneMinusSrcAlpha">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OneMinusDstAlpha">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OneMinusDstColor">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OneMinusConstantColor">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OneMinusConstantAlpha">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OneMinusSrc1Alpha">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OneMinusSrc1Color0">
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBlendState</name>
            <anchorfile>qt3drender-qblendstate.html</anchorfile>
            <anchor>QBlendState</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QBlendState</name>
            <anchorfile>qt3drender-qblendstate.html</anchorfile>
            <anchor>dtor.QBlendState</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Blending</type>
            <name>srcRGB</name>
            <anchorfile>qt3drender-qblendstate.html</anchorfile>
            <anchor>srcRGB-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Blending</type>
            <name>dstRGB</name>
            <anchorfile>qt3drender-qblendstate.html</anchorfile>
            <anchor>dstRGB-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Blending</type>
            <name>srcAlpha</name>
            <anchorfile>qt3drender-qblendstate.html</anchorfile>
            <anchor>srcAlpha-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Blending</type>
            <name>dstAlpha</name>
            <anchorfile>qt3drender-qblendstate.html</anchorfile>
            <anchor>dstAlpha-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSrcRGB</name>
            <anchorfile>qt3drender-qblendstate.html</anchorfile>
            <anchor>srcRGB-prop</anchor>
            <arglist>(Blending srcRGB)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDstRGB</name>
            <anchorfile>qt3drender-qblendstate.html</anchorfile>
            <anchor>dstRGB-prop</anchor>
            <arglist>(Blending dstRGB)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSrcAlpha</name>
            <anchorfile>qt3drender-qblendstate.html</anchorfile>
            <anchor>srcAlpha-prop</anchor>
            <arglist>(Blending srcAlpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDstAlpha</name>
            <anchorfile>qt3drender-qblendstate.html</anchorfile>
            <anchor>dstAlpha-prop</anchor>
            <arglist>(Blending dstAlpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>srcRGBChanged</name>
            <anchorfile>qt3drender-qblendstate.html</anchorfile>
            <anchor>srcRGB-prop</anchor>
            <arglist>(Blending srcRGB)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>srcAlphaChanged</name>
            <anchorfile>qt3drender-qblendstate.html</anchorfile>
            <anchor>srcAlpha-prop</anchor>
            <arglist>(Blending srcAlpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dstRGBChanged</name>
            <anchorfile>qt3drender-qblendstate.html</anchorfile>
            <anchor>dstRGB-prop</anchor>
            <arglist>(Blending dstRGB)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dstAlphaChanged</name>
            <anchorfile>qt3drender-qblendstate.html</anchorfile>
            <anchor>dstAlpha-prop</anchor>
            <arglist>(Blending dstAlpha)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QBlendState</name>
            <anchorfile>qt3drender-qblendstate.html</anchorfile>
            <anchor>QBlendState-1</anchor>
            <arglist>(QRenderState::Type type, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QBlendStateSeparate</name>
        <filename>qt3drender-qblendstateseparate.html</filename>
        <base>QBlendState</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBlendStateSeparate</name>
            <anchorfile>qt3drender-qblendstateseparate.html</anchorfile>
            <anchor>QBlendStateSeparate</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QClipPlane</name>
        <filename>qt3drender-qclipplane.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="int">
            <name>plane</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>plane-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QClipPlane</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>QClipPlane</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QClipPlane</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>dtor.QClipPlane</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>plane</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>plane</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPlane</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>setPlane</anchor>
            <arglist>(int plane)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>planeChanged</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>plane-prop</anchor>
            <arglist>(int plane)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QColorMask</name>
        <filename>qt3drender-qcolormask.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="bool">
            <name>red</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>red-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>green</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>green-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>blue</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>blue-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>alpha</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>alpha-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QColorMask</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>QColorMask</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QColorMask</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>dtor.QColorMask</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRed</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>red-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isGreen</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>green-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBlue</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>blue-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAlpha</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>alpha-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRed</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>red-prop</anchor>
            <arglist>(bool red)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGreen</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>green-prop</anchor>
            <arglist>(bool green)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBlue</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>blue-prop</anchor>
            <arglist>(bool blue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlpha</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>alpha-prop</anchor>
            <arglist>(bool alpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>redChanged</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>red-prop</anchor>
            <arglist>(bool red)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>greenChanged</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>green-prop</anchor>
            <arglist>(bool green)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>blueChanged</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>blue-prop</anchor>
            <arglist>(bool blue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>alphaChanged</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>alpha-prop</anchor>
            <arglist>(bool alpha)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QCullFace</name>
        <filename>qt3drender-qcullface.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="CullingMode">
            <name>mode</name>
            <anchorfile>qt3drender-qcullface.html</anchorfile>
            <anchor>mode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CullingMode</name>
            <anchor>CullingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Front">
            <anchor>CullingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Back">
            <anchor>CullingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrontAndBack">
            <anchor>CullingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCullFace</name>
            <anchorfile>qt3drender-qcullface.html</anchorfile>
            <anchor>QCullFace</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCullFace</name>
            <anchorfile>qt3drender-qcullface.html</anchorfile>
            <anchor>dtor.QCullFace</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CullingMode</type>
            <name>mode</name>
            <anchorfile>qt3drender-qcullface.html</anchorfile>
            <anchor>mode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMode</name>
            <anchorfile>qt3drender-qcullface.html</anchorfile>
            <anchor>mode-prop</anchor>
            <arglist>(CullingMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>modeChanged</name>
            <anchorfile>qt3drender-qcullface.html</anchorfile>
            <anchor>mode-prop</anchor>
            <arglist>(CullingMode mode)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qcullface.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QDepthMask</name>
        <filename>qt3drender-qdepthmask.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="bool">
            <name>mask</name>
            <anchorfile>qt3drender-qdepthmask.html</anchorfile>
            <anchor>mask-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDepthMask</name>
            <anchorfile>qt3drender-qdepthmask.html</anchorfile>
            <anchor>QDepthMask</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDepthMask</name>
            <anchorfile>qt3drender-qdepthmask.html</anchorfile>
            <anchor>dtor.QDepthMask</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>mask</name>
            <anchorfile>qt3drender-qdepthmask.html</anchorfile>
            <anchor>mask-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMask</name>
            <anchorfile>qt3drender-qdepthmask.html</anchorfile>
            <anchor>mask-prop</anchor>
            <arglist>(bool mask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>maskChanged</name>
            <anchorfile>qt3drender-qdepthmask.html</anchorfile>
            <anchor>mask-prop</anchor>
            <arglist>(bool mask)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qdepthmask.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QDepthTest</name>
        <filename>qt3drender-qdepthtest.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="DepthFunc">
            <name>func</name>
            <anchorfile>qt3drender-qdepthtest.html</anchorfile>
            <anchor>func-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>DepthFunc</name>
            <anchor>DepthFunc-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Never">
            <anchor>DepthFunc-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Always">
            <anchor>DepthFunc-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Less">
            <anchor>DepthFunc-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LessOrEqual">
            <anchor>DepthFunc-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Equal">
            <anchor>DepthFunc-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GreaterOrEqual">
            <anchor>DepthFunc-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Greater">
            <anchor>DepthFunc-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotEqual">
            <anchor>DepthFunc-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDepthTest</name>
            <anchorfile>qt3drender-qdepthtest.html</anchorfile>
            <anchor>QDepthTest</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDepthTest</name>
            <anchorfile>qt3drender-qdepthtest.html</anchorfile>
            <anchor>dtor.QDepthTest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>DepthFunc</type>
            <name>func</name>
            <anchorfile>qt3drender-qdepthtest.html</anchorfile>
            <anchor>func-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFunc</name>
            <anchorfile>qt3drender-qdepthtest.html</anchorfile>
            <anchor>func-prop</anchor>
            <arglist>(DepthFunc func)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>funcChanged</name>
            <anchorfile>qt3drender-qdepthtest.html</anchorfile>
            <anchor>func-prop</anchor>
            <arglist>(DepthFunc func)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qdepthtest.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QDithering</name>
        <filename>qt3drender-qdithering.html</filename>
        <base>QRenderState</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDithering</name>
            <anchorfile>qt3drender-qdithering.html</anchorfile>
            <anchor>QDithering</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDithering</name>
            <anchorfile>qt3drender-qdithering.html</anchorfile>
            <anchor>dtor.QDithering</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QFrontFace</name>
        <filename>qt3drender-qfrontface.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="FaceDir">
            <name>direction</name>
            <anchorfile>qt3drender-qfrontface.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>FaceDir</name>
            <anchor>FaceDir-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ClockWise">
            <anchor>FaceDir-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CounterClockWise">
            <anchor>FaceDir-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFrontFace</name>
            <anchorfile>qt3drender-qfrontface.html</anchorfile>
            <anchor>QFrontFace</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFrontFace</name>
            <anchorfile>qt3drender-qfrontface.html</anchorfile>
            <anchor>dtor.QFrontFace</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>FaceDir</type>
            <name>direction</name>
            <anchorfile>qt3drender-qfrontface.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDirection</name>
            <anchorfile>qt3drender-qfrontface.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist>(FaceDir direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>directionChanged</name>
            <anchorfile>qt3drender-qfrontface.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist>(FaceDir direction)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qfrontface.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QPointSize</name>
        <filename>qt3drender-qpointsize.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="Specification">
            <name>specification</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>specification-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>value</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Specification</name>
            <anchor>Specification-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StaticValue">
            <anchor>Specification-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Programmable">
            <anchor>Specification-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPointSize</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>QPointSize</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPointSize</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>dtor.QPointSize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Specification</type>
            <name>specification</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>specification-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>value</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isProgrammable</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>isProgrammable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpecification</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>specification-prop</anchor>
            <arglist>(Specification spec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>specificationChanged</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>specification-prop</anchor>
            <arglist>(Specification spec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>valueChanged</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QPolygonOffset</name>
        <filename>qt3drender-qpolygonoffset.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="float">
            <name>factor</name>
            <anchorfile>qt3drender-qpolygonoffset.html</anchorfile>
            <anchor>factor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>units</name>
            <anchorfile>qt3drender-qpolygonoffset.html</anchorfile>
            <anchor>units-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPolygonOffset</name>
            <anchorfile>qt3drender-qpolygonoffset.html</anchorfile>
            <anchor>QPolygonOffset</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPolygonOffset</name>
            <anchorfile>qt3drender-qpolygonoffset.html</anchorfile>
            <anchor>dtor.QPolygonOffset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>factor</name>
            <anchorfile>qt3drender-qpolygonoffset.html</anchorfile>
            <anchor>factor-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>units</name>
            <anchorfile>qt3drender-qpolygonoffset.html</anchorfile>
            <anchor>units-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFactor</name>
            <anchorfile>qt3drender-qpolygonoffset.html</anchorfile>
            <anchor>factor-prop</anchor>
            <arglist>(float factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUnits</name>
            <anchorfile>qt3drender-qpolygonoffset.html</anchorfile>
            <anchor>units-prop</anchor>
            <arglist>(float units)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>factorChanged</name>
            <anchorfile>qt3drender-qpolygonoffset.html</anchorfile>
            <anchor>factor-prop</anchor>
            <arglist>(float factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unitsChanged</name>
            <anchorfile>qt3drender-qpolygonoffset.html</anchorfile>
            <anchor>units-prop</anchor>
            <arglist>(float units)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qpolygonoffset.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderState</name>
        <filename>qt3drender-qrenderstate.html</filename>
        <base>QNode</base>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlphaCoverage">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlphaTest">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BlendEquation">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BlendState">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BlendStateSeparate">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ColorMask">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CullFace">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DepthMask">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DepthTest">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Dithering">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrontFace">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PointSize">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PolygonOffset">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ScissorTest">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StencilTest">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StencilMask">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StencilOp">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ClipPlane">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QRenderState</name>
            <anchorfile>qt3drender-qrenderstate.html</anchorfile>
            <anchor>dtor.QRenderState</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Type</type>
            <name>type</name>
            <anchorfile>qt3drender-qrenderstate.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QRenderState</name>
            <anchorfile>qt3drender-qrenderstate.html</anchorfile>
            <anchor>QRenderState</anchor>
            <arglist>(QRenderStatePrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QScissorTest</name>
        <filename>qt3drender-qscissortest.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="int">
            <name>left</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>bottom</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>width</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>height</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScissorTest</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>QScissorTest</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QScissorTest</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>dtor.QScissorTest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>left</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>bottom</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeft</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist>(int left)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottom</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>(int bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>leftChanged</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist>(int left)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bottomChanged</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>(int bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>widthChanged</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>heightChanged</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(int height)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QStencilMask</name>
        <filename>qt3drender-qstencilmask.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="uint">
            <name>frontMask</name>
            <anchorfile>qt3drender-qstencilmask.html</anchorfile>
            <anchor>frontMask-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>backMask</name>
            <anchorfile>qt3drender-qstencilmask.html</anchorfile>
            <anchor>backMask-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStencilMask</name>
            <anchorfile>qt3drender-qstencilmask.html</anchorfile>
            <anchor>QStencilMask</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QStencilMask</name>
            <anchorfile>qt3drender-qstencilmask.html</anchorfile>
            <anchor>dtor.QStencilMask</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>frontMask</name>
            <anchorfile>qt3drender-qstencilmask.html</anchorfile>
            <anchor>frontMask-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>backMask</name>
            <anchorfile>qt3drender-qstencilmask.html</anchorfile>
            <anchor>backMask-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrontMask</name>
            <anchorfile>qt3drender-qstencilmask.html</anchorfile>
            <anchor>frontMask-prop</anchor>
            <arglist>(uint mask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBackMask</name>
            <anchorfile>qt3drender-qstencilmask.html</anchorfile>
            <anchor>backMask-prop</anchor>
            <arglist>(uint mask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>frontMaskChanged</name>
            <anchorfile>qt3drender-qstencilmask.html</anchorfile>
            <anchor>frontMask-prop</anchor>
            <arglist>(uint frontMask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>backMaskChanged</name>
            <anchorfile>qt3drender-qstencilmask.html</anchorfile>
            <anchor>backMask-prop</anchor>
            <arglist>(uint backMask)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qstencilmask.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QStencilOp</name>
        <filename>qt3drender-qstencilop.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="Qt3DRender::QStencilOpSeparate *">
            <name>front</name>
            <anchorfile>qt3drender-qstencilop.html</anchorfile>
            <anchor>front-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QStencilOpSeparate *">
            <name>back</name>
            <anchorfile>qt3drender-qstencilop.html</anchorfile>
            <anchor>back-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStencilOp</name>
            <anchorfile>qt3drender-qstencilop.html</anchorfile>
            <anchor>QStencilOp</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QStencilOp</name>
            <anchorfile>qt3drender-qstencilop.html</anchorfile>
            <anchor>dtor.QStencilOp</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStencilOpSeparate *</type>
            <name>front</name>
            <anchorfile>qt3drender-qstencilop.html</anchorfile>
            <anchor>front-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStencilOpSeparate *</type>
            <name>back</name>
            <anchorfile>qt3drender-qstencilop.html</anchorfile>
            <anchor>back-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qstencilop.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QStencilOpSeparate</name>
        <filename>qt3drender-qstencilopseparate.html</filename>
        <base>QObject</base>
        <member kind="property" type="StencilFaceMode">
            <name>faceMode</name>
            <anchorfile>qt3drender-qstencilopseparate.html</anchorfile>
            <anchor>faceMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="StencilOp">
            <name>stencilFail</name>
            <anchorfile>qt3drender-qstencilopseparate.html</anchorfile>
            <anchor>stencilFail-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="StencilOp">
            <name>depthFail</name>
            <anchorfile>qt3drender-qstencilopseparate.html</anchorfile>
            <anchor>depthFail-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="StencilOp">
            <name>stencilDepthPass</name>
            <anchorfile>qt3drender-qstencilopseparate.html</anchorfile>
            <anchor>stencilDepthPass-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StencilFaceMode</name>
            <anchor>StencilFaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Front">
            <anchor>StencilFaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Back">
            <anchor>StencilFaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrontAndBack">
            <anchor>StencilFaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StencilOp</name>
            <anchor>StencilOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Zero">
            <anchor>StencilOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Keep">
            <anchor>StencilOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Replace">
            <anchor>StencilOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Incr">
            <anchor>StencilOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Decr">
            <anchor>StencilOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IncrWrap">
            <anchor>StencilOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DecrWrap">
            <anchor>StencilOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Invert">
            <anchor>StencilOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QStencilOpSeparate</name>
            <anchorfile>qt3drender-qstencilopseparate.html</anchorfile>
            <anchor>dtor.QStencilOpSeparate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>StencilFaceMode</type>
            <name>faceMode</name>
            <anchorfile>qt3drender-qstencilopseparate.html</anchorfile>
            <anchor>faceMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>StencilOp</type>
            <name>stencilFail</name>
            <anchorfile>qt3drender-qstencilopseparate.html</anchorfile>
            <anchor>stencilFail-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>StencilOp</type>
            <name>depthFail</name>
            <anchorfile>qt3drender-qstencilopseparate.html</anchorfile>
            <anchor>depthFail-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>StencilOp</type>
            <name>stencilDepthPass</name>
            <anchorfile>qt3drender-qstencilopseparate.html</anchorfile>
            <anchor>stencilDepthPass-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStencilFail</name>
            <anchorfile>qt3drender-qstencilopseparate.html</anchorfile>
            <anchor>stencilFail-prop</anchor>
            <arglist>(StencilOp op)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDepthFail</name>
            <anchorfile>qt3drender-qstencilopseparate.html</anchorfile>
            <anchor>depthFail-prop</anchor>
            <arglist>(StencilOp op)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStencilDepthPass</name>
            <anchorfile>qt3drender-qstencilopseparate.html</anchorfile>
            <anchor>stencilDepthPass-prop</anchor>
            <arglist>(StencilOp op)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stencilFailChanged</name>
            <anchorfile>qt3drender-qstencilopseparate.html</anchorfile>
            <anchor>stencilFail-prop</anchor>
            <arglist>(StencilOp stencilFail)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>depthFailChanged</name>
            <anchorfile>qt3drender-qstencilopseparate.html</anchorfile>
            <anchor>depthFail-prop</anchor>
            <arglist>(StencilOp depthFail)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stencilDepthPassChanged</name>
            <anchorfile>qt3drender-qstencilopseparate.html</anchorfile>
            <anchor>stencilDepthPass-prop</anchor>
            <arglist>(StencilOp stencilDepthPass)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>faceModeChanged</name>
            <anchorfile>qt3drender-qstencilopseparate.html</anchorfile>
            <anchor>faceMode-prop</anchor>
            <arglist>(StencilFaceMode faceMode)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QStencilTest</name>
        <filename>qt3drender-qstenciltest.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="Qt3DRender::QStencilTestSeparate *">
            <name>front</name>
            <anchorfile>qt3drender-qstenciltest.html</anchorfile>
            <anchor>front-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QStencilTestSeparate *">
            <name>back</name>
            <anchorfile>qt3drender-qstenciltest.html</anchorfile>
            <anchor>back-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStencilTest</name>
            <anchorfile>qt3drender-qstenciltest.html</anchorfile>
            <anchor>QStencilTest</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QStencilTest</name>
            <anchorfile>qt3drender-qstenciltest.html</anchorfile>
            <anchor>dtor.QStencilTest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStencilTestSeparate *</type>
            <name>front</name>
            <anchorfile>qt3drender-qstenciltest.html</anchorfile>
            <anchor>front-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStencilTestSeparate *</type>
            <name>back</name>
            <anchorfile>qt3drender-qstenciltest.html</anchorfile>
            <anchor>back-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qstenciltest.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QStencilTestSeparate</name>
        <filename>qt3drender-qstenciltestseparate.html</filename>
        <base>QObject</base>
        <member kind="property" type="StencilFaceMode">
            <name>faceMode</name>
            <anchorfile>qt3drender-qstenciltestseparate.html</anchorfile>
            <anchor>faceMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>mask</name>
            <anchorfile>qt3drender-qstenciltestseparate.html</anchorfile>
            <anchor>mask-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>ref</name>
            <anchorfile>qt3drender-qstenciltestseparate.html</anchorfile>
            <anchor>ref-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="StencilFunc">
            <name>func</name>
            <anchorfile>qt3drender-qstenciltestseparate.html</anchorfile>
            <anchor>func-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StencilFaceMode</name>
            <anchor>StencilFaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Front">
            <anchor>StencilFaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Back">
            <anchor>StencilFaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrontAndBack">
            <anchor>StencilFaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StencilFunc</name>
            <anchor>StencilFunc-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Never">
            <anchor>StencilFunc-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Always">
            <anchor>StencilFunc-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Less">
            <anchor>StencilFunc-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LessOrEqual">
            <anchor>StencilFunc-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Equal">
            <anchor>StencilFunc-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GreaterOrEqual">
            <anchor>StencilFunc-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Greater">
            <anchor>StencilFunc-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotEqual">
            <anchor>StencilFunc-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QStencilTestSeparate</name>
            <anchorfile>qt3drender-qstenciltestseparate.html</anchorfile>
            <anchor>dtor.QStencilTestSeparate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>mask</name>
            <anchorfile>qt3drender-qstenciltestseparate.html</anchorfile>
            <anchor>mask-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>ref</name>
            <anchorfile>qt3drender-qstenciltestseparate.html</anchorfile>
            <anchor>ref-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>StencilFunc</type>
            <name>func</name>
            <anchorfile>qt3drender-qstenciltestseparate.html</anchorfile>
            <anchor>func-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>StencilFaceMode</type>
            <name>faceMode</name>
            <anchorfile>qt3drender-qstenciltestseparate.html</anchorfile>
            <anchor>faceMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMask</name>
            <anchorfile>qt3drender-qstenciltestseparate.html</anchorfile>
            <anchor>mask-prop</anchor>
            <arglist>(uint mask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRef</name>
            <anchorfile>qt3drender-qstenciltestseparate.html</anchorfile>
            <anchor>ref-prop</anchor>
            <arglist>(int ref)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFunc</name>
            <anchorfile>qt3drender-qstenciltestseparate.html</anchorfile>
            <anchor>func-prop</anchor>
            <arglist>(StencilFunc func)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>maskChanged</name>
            <anchorfile>qt3drender-qstenciltestseparate.html</anchorfile>
            <anchor>mask-prop</anchor>
            <arglist>(uint mask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>funcChanged</name>
            <anchorfile>qt3drender-qstenciltestseparate.html</anchorfile>
            <anchor>func-prop</anchor>
            <arglist>(StencilFunc func)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>refChanged</name>
            <anchorfile>qt3drender-qstenciltestseparate.html</anchorfile>
            <anchor>ref-prop</anchor>
            <arglist>(int ref)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>faceModeChanged</name>
            <anchorfile>qt3drender-qstenciltestseparate.html</anchorfile>
            <anchor>faceMode-prop</anchor>
            <arglist>(StencilFaceMode faceMode)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTextureDataFunctor</name>
        <filename>qt3drender-qtexturedatafunctor.html</filename>
        <base>QAbstractFunctor</base>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTextureDataFunctor</name>
            <anchorfile>qt3drender-qtexturedatafunctor.html</anchorfile>
            <anchor>dtor.QTextureDataFunctor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QTexImageDataPtr</type>
            <name>operator()</name>
            <anchorfile>qt3drender-qtexturedatafunctor.html</anchorfile>
            <anchor>operator-28-29</anchor>
            <arglist>()() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>operator==</name>
            <anchorfile>qt3drender-qtexturedatafunctor.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QTextureDataFunctor &amp;other) const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QAbstractTextureImage</name>
        <filename>qt3drender-qabstracttextureimage.html</filename>
        <base>QNode</base>
        <member kind="property" type="int">
            <name>mipmapLevel</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>mipmapLevel-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>layer</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>layer-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTextureProvider::CubeMapFace">
            <name>cubeMapFace</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>cubeMapFace-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractTextureImage</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>QAbstractTextureImage</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractTextureImage</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>dtor.QAbstractTextureImage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>mipmapLevel</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>mipmapLevel-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>layer</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>layer-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractTextureProvider::CubeMapFace</type>
            <name>cubeMapFace</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>cubeMapFace-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>update</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QTextureDataFunctorPtr</type>
            <name>dataFunctor</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>dataFunctor</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMipmapLevel</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>mipmapLevel-prop</anchor>
            <arglist>(int level)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLayer</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>layer-prop</anchor>
            <arglist>(int layer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCubeMapFace</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>cubeMapFace-prop</anchor>
            <arglist>(QAbstractTextureProvider::CubeMapFace face)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mipmapLevelChanged</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>mipmapLevel-prop</anchor>
            <arglist>(int mipmapLevel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>layerChanged</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>layer-prop</anchor>
            <arglist>(int layer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cubeMapFaceChanged</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>cubeMapFace-prop</anchor>
            <arglist>(QAbstractTextureProvider::CubeMapFace cubeMapFace)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAbstractTextureImage</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>QAbstractTextureImage-1</anchor>
            <arglist>(QAbstractTextureImagePrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QAbstractTextureProvider</name>
        <filename>qt3drender-qabstracttextureprovider.html</filename>
        <base>QNode</base>
        <member kind="property" type="Target">
            <name>target</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="TextureFormat">
            <name>format</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>format-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>generateMipMaps</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>generateMipMaps-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QTextureWrapMode *">
            <name>wrapMode</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>wrapMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Status">
            <name>status</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>width</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>height</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>depth</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>depth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Filter">
            <name>magnificationFilter</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>magnificationFilter-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Filter">
            <name>minificationFilter</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>minificationFilter-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>maximumAnisotropy</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>maximumAnisotropy-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="ComparisonFunction">
            <name>comparisonFunction</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>comparisonFunction-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="ComparisonMode">
            <name>comparisonMode</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>comparisonMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maximumLayers</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>maximumLayers-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>unique</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>unique-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Status</name>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Loading">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Loaded">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Error">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Target</name>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Target1D">
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Target1DArray">
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Target2D">
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Target2DArray">
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Target3D">
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TargetCubeMap">
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TargetCubeMapArray">
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Target2DMultisample">
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Target2DMultisampleArray">
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TargetRectangle">
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TargetBuffer">
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>TextureFormat</name>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoFormat">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Automatic">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R8_UNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG8_UNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB8_UNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA8_UNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R16_UNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG16_UNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB16_UNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA16_UNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R8_SNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG8_SNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB8_SNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA8_SNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R16_SNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG16_SNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB16_SNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA16_SNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R8U">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG8U">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB8U">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA8U">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R16U">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG16U">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB16U">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA16U">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R32U">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG32U">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB32U">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA32U">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R8I">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG8I">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB8I">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA8I">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R16I">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG16I">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB16I">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA16I">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R32I">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG32I">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB32I">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA32I">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R16F">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG16F">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB16F">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA16F">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R32F">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG32F">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB32F">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA32F">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB9E5">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG11B10F">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG3B2">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R5G6B5">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB5A1">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA4">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB10A2">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="D16">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="D24">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="D24S8">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="D32">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="D32F">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="D32FS8X24">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB_DXT1">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA_DXT1">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA_DXT3">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA_DXT5">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R_ATI1N_UNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R_ATI1N_SNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG_ATI2N_UNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG_ATI2N_SNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB_BP_UNSIGNED_FLOAT">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB_BP_SIGNED_FLOAT">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB_BP_UNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R11_EAC_UNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R11_EAC_SNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG11_EAC_UNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RG11_EAC_SNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB8_ETC2">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SRGB8_ETC2">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB8_PunchThrough_Alpha1_ETC2">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SRGB8_PunchThrough_Alpha1_ETC2">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA8_ETC2_EAC">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SRGB8_Alpha8_ETC2_EAC">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGB8_ETC1">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SRGB8">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SRGB8_Alpha8">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SRGB_DXT1">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SRGB_Alpha_DXT1">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SRGB_Alpha_DXT3">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SRGB_Alpha_DXT5">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SRGB_BP_UNorm">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DepthFormat">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlphaFormat">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBFormat">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBAFormat">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LuminanceFormat">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LuminanceAlphaFormat">
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Filter</name>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Nearest">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Linear">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NearestMipMapNearest">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NearestMipMapLinear">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LinearMipMapNearest">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LinearMipMapLinear">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CubeMapFace</name>
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CubeMapPositiveX">
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CubeMapNegativeX">
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CubeMapPositiveY">
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CubeMapNegativeY">
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CubeMapPositiveZ">
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CubeMapNegativeZ">
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ComparisonFunction</name>
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompareLessEqual">
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompareGreaterEqual">
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompareLess">
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompareGreater">
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompareEqual">
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CommpareNotEqual">
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompareAlways">
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompareNever">
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ComparisonMode</name>
            <anchor>ComparisonMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompareRefToTexture">
            <anchor>ComparisonMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompareNone">
            <anchor>ComparisonMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAbstractTextureProvider</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>dtor.QAbstractTextureProvider</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Target</type>
            <name>target</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>TextureFormat</type>
            <name>format</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>generateMipMaps</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>generateMipMaps-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Status</type>
            <name>status</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addTextureImage</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>addTextureImage</anchor>
            <arglist>(QAbstractTextureImage *textureImage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeTextureImage</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>removeTextureImage</anchor>
            <arglist>(QAbstractTextureImage *textureImage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QAbstractTextureImage *&gt;</type>
            <name>textureImages</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>textureImages</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWrapMode</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>setWrapMode</anchor>
            <arglist>(const QTextureWrapMode &amp;wrapMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextureWrapMode *</type>
            <name>wrapMode</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>wrapMode-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSize</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>setSize</anchor>
            <arglist>(int w, int h, int d)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Filter</type>
            <name>minificationFilter</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>minificationFilter-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Filter</type>
            <name>magnificationFilter</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>magnificationFilter-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>maximumAnisotropy</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>maximumAnisotropy-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ComparisonFunction</type>
            <name>comparisonFunction</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>comparisonFunction-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ComparisonMode</type>
            <name>comparisonMode</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>comparisonMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>depth</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>depth-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maximumLayers</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>maximumLayers</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isUnique</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>isUnique</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>format-prop</anchor>
            <arglist>(TextureFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGenerateMipMaps</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>generateMipMaps-prop</anchor>
            <arglist>(bool gen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDepth</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>depth-prop</anchor>
            <arglist>(int depth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinificationFilter</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>minificationFilter-prop</anchor>
            <arglist>(Filter f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMagnificationFilter</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>magnificationFilter-prop</anchor>
            <arglist>(Filter f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumAnisotropy</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>maximumAnisotropy-prop</anchor>
            <arglist>(float anisotropy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setComparisonFunction</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>comparisonFunction-prop</anchor>
            <arglist>(ComparisonFunction function)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setComparisonMode</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>comparisonMode-prop</anchor>
            <arglist>(ComparisonMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumLayers</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>maximumLayers-prop</anchor>
            <arglist>(int maximumLayers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUnique</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>unique-prop</anchor>
            <arglist>(bool unique)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>formatChanged</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>format-prop</anchor>
            <arglist>(TextureFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>statusChanged</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>(Status status)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>generateMipMapsChanged</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>generateMipMaps-prop</anchor>
            <arglist>(bool generateMipMaps)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>widthChanged</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>heightChanged</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>depthChanged</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>depth-prop</anchor>
            <arglist>(int depth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>magnificationFilterChanged</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>magnificationFilter-prop</anchor>
            <arglist>(Filter magnificationFilter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>minificationFilterChanged</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>minificationFilter-prop</anchor>
            <arglist>(Filter minificationFilter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>maximumAnisotropyChanged</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>maximumAnisotropy-prop</anchor>
            <arglist>(float maximumAnisotropy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>comparisonFunctionChanged</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>comparisonFunction-prop</anchor>
            <arglist>(ComparisonFunction comparisonFunction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>comparisonModeChanged</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>comparisonMode-prop</anchor>
            <arglist>(ComparisonMode comparisonMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>maximumLayersChanged</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>maximumLayers-prop</anchor>
            <arglist>(int maximumLayers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>uniqueChanged</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>unique-prop</anchor>
            <arglist>(bool unique)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAbstractTextureProvider</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>QAbstractTextureProvider</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAbstractTextureProvider</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>QAbstractTextureProvider-1</anchor>
            <arglist>(Target target, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAbstractTextureProvider</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>QAbstractTextureProvider-2</anchor>
            <arglist>(QAbstractTextureProviderPrivate &amp;dd, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setStatus</name>
            <anchorfile>qt3drender-qabstracttextureprovider.html</anchorfile>
            <anchor>setStatus</anchor>
            <arglist>(Status status)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTexImageData</name>
        <filename>qt3drender-qteximagedata.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTexImageData</name>
            <anchorfile>qt3drender-qteximagedata.html</anchorfile>
            <anchor>QTexImageData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTexImageData</name>
            <anchorfile>qt3drender-qteximagedata.html</anchorfile>
            <anchor>dtor.QTexImageData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTexImageData &amp;</type>
            <name>operator=</name>
            <anchorfile>qt3drender-qteximagedata.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QTexImageData &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cleanup</name>
            <anchorfile>qt3drender-qteximagedata.html</anchorfile>
            <anchor>cleanup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCompressed</name>
            <anchorfile>qt3drender-qteximagedata.html</anchorfile>
            <anchor>isCompressed</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qt3drender-qteximagedata.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qt3drender-qteximagedata.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>depth</name>
            <anchorfile>qt3drender-qteximagedata.html</anchorfile>
            <anchor>depth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLTexture::TextureFormat</type>
            <name>format</name>
            <anchorfile>qt3drender-qteximagedata.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setImage</name>
            <anchorfile>qt3drender-qteximagedata.html</anchorfile>
            <anchor>setImage</anchor>
            <arglist>(const QImage &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qt3drender-qteximagedata.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QByteArray &amp;data, QOpenGLTexture::PixelFormat fmt, QOpenGLTexture::PixelType ptype)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setCompressedFile</name>
            <anchorfile>qt3drender-qteximagedata.html</anchorfile>
            <anchor>setCompressedFile</anchor>
            <arglist>(const QString &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>data</name>
            <anchorfile>qt3drender-qteximagedata.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLTexture::PixelFormat</type>
            <name>pixelFormat</name>
            <anchorfile>qt3drender-qteximagedata.html</anchorfile>
            <anchor>pixelFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLTexture::PixelType</type>
            <name>pixelType</name>
            <anchorfile>qt3drender-qteximagedata.html</anchorfile>
            <anchor>pixelType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QTexImageData</name>
            <anchorfile>qt3drender-qteximagedata.html</anchorfile>
            <anchor>QTexImageData-1</anchor>
            <arglist>(QTexImageDataPrivate &amp;dd)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTextureImage</name>
        <filename>qt3drender-qtextureimage.html</filename>
        <base>QAbstractTextureImage</base>
        <member kind="property" type="QUrl">
            <name>source</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextureImage</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>QTextureImage</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTextureImage</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>dtor.QTextureImage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>source</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>source</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QTextureDataFunctorPtr</type>
            <name>dataFunctor</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>dataFunctor</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSource</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>setSource</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceChanged</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const Qt3DCore::QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTexture1D</name>
        <filename>qt3drender-qtexture1d.html</filename>
        <base>QAbstractTextureProvider</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTexture1D</name>
            <anchorfile>qt3drender-qtexture1d.html</anchorfile>
            <anchor>QTexture1D</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTexture1D</name>
            <anchorfile>qt3drender-qtexture1d.html</anchorfile>
            <anchor>dtor.QTexture1D</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTexture1DArray</name>
        <filename>qt3drender-qtexture1darray.html</filename>
        <base>QAbstractTextureProvider</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTexture1DArray</name>
            <anchorfile>qt3drender-qtexture1darray.html</anchorfile>
            <anchor>QTexture1DArray</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTexture1DArray</name>
            <anchorfile>qt3drender-qtexture1darray.html</anchorfile>
            <anchor>dtor.QTexture1DArray</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTexture2D</name>
        <filename>qt3drender-qtexture2d.html</filename>
        <base>QAbstractTextureProvider</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTexture2D</name>
            <anchorfile>qt3drender-qtexture2d.html</anchorfile>
            <anchor>QTexture2D</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTexture2D</name>
            <anchorfile>qt3drender-qtexture2d.html</anchorfile>
            <anchor>dtor.QTexture2D</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTexture2DArray</name>
        <filename>qt3drender-qtexture2darray.html</filename>
        <base>QAbstractTextureProvider</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTexture2DArray</name>
            <anchorfile>qt3drender-qtexture2darray.html</anchorfile>
            <anchor>QTexture2DArray</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTexture2DArray</name>
            <anchorfile>qt3drender-qtexture2darray.html</anchorfile>
            <anchor>dtor.QTexture2DArray</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTexture3D</name>
        <filename>qt3drender-qtexture3d.html</filename>
        <base>QAbstractTextureProvider</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTexture3D</name>
            <anchorfile>qt3drender-qtexture3d.html</anchorfile>
            <anchor>QTexture3D</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTexture3D</name>
            <anchorfile>qt3drender-qtexture3d.html</anchorfile>
            <anchor>dtor.QTexture3D</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTextureCubeMap</name>
        <filename>qt3drender-qtexturecubemap.html</filename>
        <base>QAbstractTextureProvider</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextureCubeMap</name>
            <anchorfile>qt3drender-qtexturecubemap.html</anchorfile>
            <anchor>QTextureCubeMap</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTextureCubeMap</name>
            <anchorfile>qt3drender-qtexturecubemap.html</anchorfile>
            <anchor>dtor.QTextureCubeMap</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTextureCubeMapArray</name>
        <filename>qt3drender-qtexturecubemaparray.html</filename>
        <base>QAbstractTextureProvider</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextureCubeMapArray</name>
            <anchorfile>qt3drender-qtexturecubemaparray.html</anchorfile>
            <anchor>QTextureCubeMapArray</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTextureCubeMapArray</name>
            <anchorfile>qt3drender-qtexturecubemaparray.html</anchorfile>
            <anchor>dtor.QTextureCubeMapArray</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTexture2DMultisample</name>
        <filename>qt3drender-qtexture2dmultisample.html</filename>
        <base>QAbstractTextureProvider</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTexture2DMultisample</name>
            <anchorfile>qt3drender-qtexture2dmultisample.html</anchorfile>
            <anchor>QTexture2DMultisample</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTexture2DMultisample</name>
            <anchorfile>qt3drender-qtexture2dmultisample.html</anchorfile>
            <anchor>dtor.QTexture2DMultisample</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTexture2DMultisampleArray</name>
        <filename>qt3drender-qtexture2dmultisamplearray.html</filename>
        <base>QAbstractTextureProvider</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTexture2DMultisampleArray</name>
            <anchorfile>qt3drender-qtexture2dmultisamplearray.html</anchorfile>
            <anchor>QTexture2DMultisampleArray</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTexture2DMultisampleArray</name>
            <anchorfile>qt3drender-qtexture2dmultisamplearray.html</anchorfile>
            <anchor>dtor.QTexture2DMultisampleArray</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTextureRectangle</name>
        <filename>qt3drender-qtexturerectangle.html</filename>
        <base>QAbstractTextureProvider</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextureRectangle</name>
            <anchorfile>qt3drender-qtexturerectangle.html</anchorfile>
            <anchor>QTextureRectangle</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTextureRectangle</name>
            <anchorfile>qt3drender-qtexturerectangle.html</anchorfile>
            <anchor>dtor.QTextureRectangle</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTextureBuffer</name>
        <filename>qt3drender-qtexturebuffer.html</filename>
        <base>QAbstractTextureProvider</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextureBuffer</name>
            <anchorfile>qt3drender-qtexturebuffer.html</anchorfile>
            <anchor>QTextureBuffer</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTextureBuffer</name>
            <anchorfile>qt3drender-qtexturebuffer.html</anchorfile>
            <anchor>dtor.QTextureBuffer</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTextureWrapMode</name>
        <filename>qt3drender-qtexturewrapmode.html</filename>
        <base>QObject</base>
        <member kind="property" type="WrapMode">
            <name>x</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="WrapMode">
            <name>y</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="WrapMode">
            <name>z</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>WrapMode</name>
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Repeat">
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MirroredRepeat">
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ClampToEdge">
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ClampToBorder">
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextureWrapMode</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>QTextureWrapMode</anchor>
            <arglist>(WrapMode wrapMode, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextureWrapMode</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>QTextureWrapMode-1</anchor>
            <arglist>(WrapMode x, WrapMode y, WrapMode z, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>WrapMode</type>
            <name>x</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>WrapMode</type>
            <name>y</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>WrapMode</type>
            <name>z</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>z</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setX</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>setX</anchor>
            <arglist>(WrapMode x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setY</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>setY</anchor>
            <arglist>(WrapMode y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setZ</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>setZ</anchor>
            <arglist>(WrapMode z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>xChanged</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist>(WrapMode x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>yChanged</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist>(WrapMode y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>zChanged</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist>(WrapMode z)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D.Core.Camera</name>
        <filename>qml-qt3d-core-camera.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Core.CameraLens</name>
        <filename>qml-qt3d-core-cameralens.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Core.Component3D</name>
        <filename>qml-qt3d-core-component3d.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Core.Transform</name>
        <filename>qml-qt3d-core-transform.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.AbstractPhysicalDevice</name>
        <filename>qml-qt3d-input-abstractphysicaldevice.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.Action</name>
        <filename>qml-qt3d-input-action.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.ActionInput</name>
        <filename>qml-qt3d-input-actioninput.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.Axis</name>
        <filename>qml-qt3d-input-axis.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.AxisActionHandler</name>
        <filename>qml-qt3d-input-axisactionhandler.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.AxisInput</name>
        <filename>qml-qt3d-input-axisinput.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.AxisSetting</name>
        <filename>qml-qt3d-input-axissetting.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.KeyboardController</name>
        <filename>qml-qt3d-input-keyboardcontroller.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.KeyboardInput</name>
        <filename>qml-qt3d-input-keyboardinput.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.KeyEvent</name>
        <filename>qml-qt3d-input-keyevent.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.LogicalDevice</name>
        <filename>qml-qt3d-input-logicaldevice.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.MouseController</name>
        <filename>qml-qt3d-input-mousecontroller.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.MouseEvent</name>
        <filename>qml-qt3d-input-mouseevent.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.WheelEvent</name>
        <filename>qml-qt3d-input-wheelevent.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.MouseInput</name>
        <filename>qml-qt3d-input-mouseinput.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Logic.LogicComponent</name>
        <filename>qml-qt3d-logic-logiccomponent.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Core.Configuration</name>
        <filename>qml-qt3d-core-configuration.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Core.Entity</name>
        <filename>qml-qt3d-core-entity.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Core.EntityLoader</name>
        <filename>qml-qt3d-core-entityloader.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Core.Node</name>
        <filename>qml-qt3d-core-node.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Core.NodeInstantiator</name>
        <filename>qml-qt3d-core-nodeinstantiator.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Core.QuaternionAnimation</name>
        <filename>qml-qt3d-core-quaternionanimation.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.FrameGraph</name>
        <filename>qml-qt3d-render-framegraph.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.FrameGraphNode</name>
        <filename>qml-qt3d-render-framegraphnode.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.LayerFilter</name>
        <filename>qml-qt3d-render-layerfilter.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Layer</name>
        <filename>qml-qt3d-render-layer.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.AbstractAttribute</name>
        <filename>qml-qt3d-render-abstractattribute.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.AbstractBuffer</name>
        <filename>qml-qt3d-render-abstractbuffer.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.BoundingVolumeSpecifier</name>
        <filename>qml-qt3d-render-boundingvolumespecifier.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Buffer</name>
        <filename>qml-qt3d-render-buffer.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.CuboidGeometry</name>
        <filename>qml-qt3d-render-cuboidgeometry.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.QCuboidMesh</name>
        <filename>qml-qt3d-render-qcuboidmesh.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.CylinderGeometry</name>
        <filename>qml-qt3d-render-cylindergeometry.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.CylinderMesh</name>
        <filename>qml-qt3d-render-cylindermesh.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Geometry</name>
        <filename>qml-qt3d-render-geometry.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.GeometryRenderer</name>
        <filename>qml-qt3d-render-geometryrenderer.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Mesh</name>
        <filename>qml-qt3d-render-mesh.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.PlaneGeometry</name>
        <filename>qml-qt3d-render-planegeometry.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.PlaneMesh</name>
        <filename>qml-qt3d-render-planemesh.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.SphereGeometry</name>
        <filename>qml-qt3d-render-spheregeometry.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.SphereMesh</name>
        <filename>qml-qt3d-render-spheremesh.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.TorusGeometry</name>
        <filename>qml-qt3d-render-torusgeometry.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.TorusMesh</name>
        <filename>qml-qt3d-render-torusmesh.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Light</name>
        <filename>qml-qt3d-render-light.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.PointLight</name>
        <filename>qml-qt3d-render-pointlight.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.SpotLight</name>
        <filename>qml-qt3d-render-spotlight.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Annotation</name>
        <filename>qml-qt3d-render-annotation.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.GraphicsApiFilter</name>
        <filename>qml-qt3d-render-graphicsapifilter.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Material</name>
        <filename>qml-qt3d-render-material.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.ParameterMapping</name>
        <filename>qml-qt3d-render-parametermapping.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.BlendState</name>
        <filename>qml-qt3d-render-blendstate.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.BlendStateSeparate</name>
        <filename>qml-qt3d-render-blendstateseparate.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.ClipPlane</name>
        <filename>qml-qt3d-render-clipplane.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.AbstractTextureImage</name>
        <filename>qml-qt3d-render-abstracttextureimage.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.TextureImage</name>
        <filename>qml-qt3d-render-textureimage.html</filename>
    </compound>
</tagfile>
